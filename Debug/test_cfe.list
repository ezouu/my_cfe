
test_cfe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000d8  20000000  20000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001290  200000d8  200000d8  000010d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  20001368  20001368  00002368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  200015d4  200015d4  0000265c  2**0
                  CONTENTS
  4 .ARM          00000008  200015d4  200015d4  000025d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  200015dc  2000165c  0000265c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  200015dc  200015dc  000025dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  200015e0  200015e0  000025e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  200015e4  200015e4  000025e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000165c  2000165c  0000265c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017b0  200017b0  0000265c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000014a5  00000000  00000000  0000268c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000058  00000000  00000000  00003b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000bb9  00000000  00000000  00003b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000558  00000000  00000000  00004742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000118  00000000  00000000  00004ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000040c7  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000000c5  00000000  00000000  00008e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000010ef  00000000  00000000  00008f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000a033  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005a4  00000000  00000000  0000a078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200000d8 <__do_global_dtors_aux>:
200000d8:	b510      	push	{r4, lr}
200000da:	4c05      	ldr	r4, [pc, #20]	@ (200000f0 <__do_global_dtors_aux+0x18>)
200000dc:	7823      	ldrb	r3, [r4, #0]
200000de:	b933      	cbnz	r3, 200000ee <__do_global_dtors_aux+0x16>
200000e0:	4b04      	ldr	r3, [pc, #16]	@ (200000f4 <__do_global_dtors_aux+0x1c>)
200000e2:	b113      	cbz	r3, 200000ea <__do_global_dtors_aux+0x12>
200000e4:	4804      	ldr	r0, [pc, #16]	@ (200000f8 <__do_global_dtors_aux+0x20>)
200000e6:	f3af 8000 	nop.w
200000ea:	2301      	movs	r3, #1
200000ec:	7023      	strb	r3, [r4, #0]
200000ee:	bd10      	pop	{r4, pc}
200000f0:	2000165c 	.word	0x2000165c
200000f4:	00000000 	.word	0x00000000
200000f8:	20001350 	.word	0x20001350

200000fc <frame_dummy>:
200000fc:	b508      	push	{r3, lr}
200000fe:	4b03      	ldr	r3, [pc, #12]	@ (2000010c <frame_dummy+0x10>)
20000100:	b11b      	cbz	r3, 2000010a <frame_dummy+0xe>
20000102:	4903      	ldr	r1, [pc, #12]	@ (20000110 <frame_dummy+0x14>)
20000104:	4803      	ldr	r0, [pc, #12]	@ (20000114 <frame_dummy+0x18>)
20000106:	f3af 8000 	nop.w
2000010a:	bd08      	pop	{r3, pc}
2000010c:	00000000 	.word	0x00000000
20000110:	20001660 	.word	0x20001660
20000114:	20001350 	.word	0x20001350

20000118 <SysTick_Handler>:
.section .text
.global SysTick_Handler
.type SysTick_Handler, %function
SysTick_Handler:

    push {r0}
20000118:	b401      	push	{r0}
    push {r1}
2000011a:	b402      	push	{r1}
    push {r2}
2000011c:	b404      	push	{r2}
    push {r3}
2000011e:	b408      	push	{r3}
    push {r4}
20000120:	b410      	push	{r4}
    push {r5}
20000122:	b420      	push	{r5}
    push {r6}
20000124:	b440      	push	{r6}
    push {r7}
20000126:	b480      	push	{r7}
    push {r8}
20000128:	f84d 8d04 	str.w	r8, [sp, #-4]!
    push {r9}
2000012c:	f84d 9d04 	str.w	r9, [sp, #-4]!
    push {r10}
20000130:	f84d ad04 	str.w	sl, [sp, #-4]!
    push {r11}
20000134:	f84d bd04 	str.w	fp, [sp, #-4]!
    push {r12}
20000138:	f84d cd04 	str.w	ip, [sp, #-4]!
    push {lr}
2000013c:	b500      	push	{lr}


	//bl mytest_1
//
    pop {lr}
2000013e:	f85d eb04 	ldr.w	lr, [sp], #4
    pop {r12}
20000142:	f85d cb04 	ldr.w	ip, [sp], #4
    pop {r11}
20000146:	f85d bb04 	ldr.w	fp, [sp], #4
    pop {r10}
2000014a:	f85d ab04 	ldr.w	sl, [sp], #4
    pop {r9}
2000014e:	f85d 9b04 	ldr.w	r9, [sp], #4
    pop {r8}
20000152:	f85d 8b04 	ldr.w	r8, [sp], #4
    pop {r7}
20000156:	bc80      	pop	{r7}
    pop {r6}
20000158:	bc40      	pop	{r6}
    pop {r5}
2000015a:	bc20      	pop	{r5}
    pop {r4}
2000015c:	bc10      	pop	{r4}
    pop {r3}
2000015e:	bc08      	pop	{r3}
    pop {r2}
20000160:	bc04      	pop	{r2}
    pop {r1}
20000162:	bc02      	pop	{r1}
    pop {r0}
20000164:	bc01      	pop	{r0}

    bx lr
20000166:	4770      	bx	lr

20000168 <add_function>:
.global add_function

.type add_function, %function
add_function:

    add r0, r0, r1
20000168:	4408      	add	r0, r1
    add r0, r0, r2
2000016a:	4410      	add	r0, r2
    add r0, r0, r3
2000016c:	4418      	add	r0, r3
    add r0, r0, r4
2000016e:	4420      	add	r0, r4

	//push r1
    ldr r1, [sp, #0]
20000170:	9900      	ldr	r1, [sp, #0]
    add r0, r0, r1
20000172:	4408      	add	r0, r1


    ldr r1, [sp, #4]
20000174:	9901      	ldr	r1, [sp, #4]
    add r0, r0, r1
20000176:	4408      	add	r0, r1
    bx lr
20000178:	4770      	bx	lr

2000017a <USART1_IRQHandler>:
.section .text
.global USART1_IRQHandler
.type USART1_IRQHandler, %function
USART1_IRQHandler:

 	push {r0-r12, lr}
2000017a:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    //ldr r0, =0x40013800      // USART1 base address
    //ldr r1, [r0, #0x1C]      // Read USART1 status register (SR)
    //ldr r2, [r0, #0x24]      // Read USART1 data register (DR)


	pop {r0-r12, lr}
2000017e:	e8bd 5fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

    bx lr
20000182:	4770      	bx	lr

20000184 <strcmp>:
20000184:	f810 2b01 	ldrb.w	r2, [r0], #1
20000188:	f811 3b01 	ldrb.w	r3, [r1], #1
2000018c:	2a01      	cmp	r2, #1
2000018e:	bf28      	it	cs
20000190:	429a      	cmpcs	r2, r3
20000192:	d0f7      	beq.n	20000184 <strcmp>
20000194:	1ad0      	subs	r0, r2, r3
20000196:	4770      	bx	lr

20000198 <__aeabi_uldivmod>:
20000198:	b953      	cbnz	r3, 200001b0 <__aeabi_uldivmod+0x18>
2000019a:	b94a      	cbnz	r2, 200001b0 <__aeabi_uldivmod+0x18>
2000019c:	2900      	cmp	r1, #0
2000019e:	bf08      	it	eq
200001a0:	2800      	cmpeq	r0, #0
200001a2:	bf1c      	itt	ne
200001a4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
200001a8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
200001ac:	f000 b96a 	b.w	20000484 <__aeabi_idiv0>
200001b0:	f1ad 0c08 	sub.w	ip, sp, #8
200001b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
200001b8:	f000 f806 	bl	200001c8 <__udivmoddi4>
200001bc:	f8dd e004 	ldr.w	lr, [sp, #4]
200001c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
200001c4:	b004      	add	sp, #16
200001c6:	4770      	bx	lr

200001c8 <__udivmoddi4>:
200001c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
200001cc:	9d08      	ldr	r5, [sp, #32]
200001ce:	460c      	mov	r4, r1
200001d0:	2b00      	cmp	r3, #0
200001d2:	d14e      	bne.n	20000272 <__udivmoddi4+0xaa>
200001d4:	4694      	mov	ip, r2
200001d6:	458c      	cmp	ip, r1
200001d8:	4686      	mov	lr, r0
200001da:	fab2 f282 	clz	r2, r2
200001de:	d962      	bls.n	200002a6 <__udivmoddi4+0xde>
200001e0:	b14a      	cbz	r2, 200001f6 <__udivmoddi4+0x2e>
200001e2:	f1c2 0320 	rsb	r3, r2, #32
200001e6:	4091      	lsls	r1, r2
200001e8:	fa20 f303 	lsr.w	r3, r0, r3
200001ec:	fa0c fc02 	lsl.w	ip, ip, r2
200001f0:	4319      	orrs	r1, r3
200001f2:	fa00 fe02 	lsl.w	lr, r0, r2
200001f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
200001fa:	fa1f f68c 	uxth.w	r6, ip
200001fe:	fbb1 f4f7 	udiv	r4, r1, r7
20000202:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000206:	fb07 1114 	mls	r1, r7, r4, r1
2000020a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000020e:	fb04 f106 	mul.w	r1, r4, r6
20000212:	4299      	cmp	r1, r3
20000214:	d90a      	bls.n	2000022c <__udivmoddi4+0x64>
20000216:	eb1c 0303 	adds.w	r3, ip, r3
2000021a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
2000021e:	f080 8112 	bcs.w	20000446 <__udivmoddi4+0x27e>
20000222:	4299      	cmp	r1, r3
20000224:	f240 810f 	bls.w	20000446 <__udivmoddi4+0x27e>
20000228:	3c02      	subs	r4, #2
2000022a:	4463      	add	r3, ip
2000022c:	1a59      	subs	r1, r3, r1
2000022e:	fa1f f38e 	uxth.w	r3, lr
20000232:	fbb1 f0f7 	udiv	r0, r1, r7
20000236:	fb07 1110 	mls	r1, r7, r0, r1
2000023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000023e:	fb00 f606 	mul.w	r6, r0, r6
20000242:	429e      	cmp	r6, r3
20000244:	d90a      	bls.n	2000025c <__udivmoddi4+0x94>
20000246:	eb1c 0303 	adds.w	r3, ip, r3
2000024a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
2000024e:	f080 80fc 	bcs.w	2000044a <__udivmoddi4+0x282>
20000252:	429e      	cmp	r6, r3
20000254:	f240 80f9 	bls.w	2000044a <__udivmoddi4+0x282>
20000258:	4463      	add	r3, ip
2000025a:	3802      	subs	r0, #2
2000025c:	1b9b      	subs	r3, r3, r6
2000025e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
20000262:	2100      	movs	r1, #0
20000264:	b11d      	cbz	r5, 2000026e <__udivmoddi4+0xa6>
20000266:	40d3      	lsrs	r3, r2
20000268:	2200      	movs	r2, #0
2000026a:	e9c5 3200 	strd	r3, r2, [r5]
2000026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000272:	428b      	cmp	r3, r1
20000274:	d905      	bls.n	20000282 <__udivmoddi4+0xba>
20000276:	b10d      	cbz	r5, 2000027c <__udivmoddi4+0xb4>
20000278:	e9c5 0100 	strd	r0, r1, [r5]
2000027c:	2100      	movs	r1, #0
2000027e:	4608      	mov	r0, r1
20000280:	e7f5      	b.n	2000026e <__udivmoddi4+0xa6>
20000282:	fab3 f183 	clz	r1, r3
20000286:	2900      	cmp	r1, #0
20000288:	d146      	bne.n	20000318 <__udivmoddi4+0x150>
2000028a:	42a3      	cmp	r3, r4
2000028c:	d302      	bcc.n	20000294 <__udivmoddi4+0xcc>
2000028e:	4290      	cmp	r0, r2
20000290:	f0c0 80f0 	bcc.w	20000474 <__udivmoddi4+0x2ac>
20000294:	1a86      	subs	r6, r0, r2
20000296:	eb64 0303 	sbc.w	r3, r4, r3
2000029a:	2001      	movs	r0, #1
2000029c:	2d00      	cmp	r5, #0
2000029e:	d0e6      	beq.n	2000026e <__udivmoddi4+0xa6>
200002a0:	e9c5 6300 	strd	r6, r3, [r5]
200002a4:	e7e3      	b.n	2000026e <__udivmoddi4+0xa6>
200002a6:	2a00      	cmp	r2, #0
200002a8:	f040 8090 	bne.w	200003cc <__udivmoddi4+0x204>
200002ac:	eba1 040c 	sub.w	r4, r1, ip
200002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
200002b4:	fa1f f78c 	uxth.w	r7, ip
200002b8:	2101      	movs	r1, #1
200002ba:	fbb4 f6f8 	udiv	r6, r4, r8
200002be:	ea4f 431e 	mov.w	r3, lr, lsr #16
200002c2:	fb08 4416 	mls	r4, r8, r6, r4
200002c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
200002ca:	fb07 f006 	mul.w	r0, r7, r6
200002ce:	4298      	cmp	r0, r3
200002d0:	d908      	bls.n	200002e4 <__udivmoddi4+0x11c>
200002d2:	eb1c 0303 	adds.w	r3, ip, r3
200002d6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
200002da:	d202      	bcs.n	200002e2 <__udivmoddi4+0x11a>
200002dc:	4298      	cmp	r0, r3
200002de:	f200 80cd 	bhi.w	2000047c <__udivmoddi4+0x2b4>
200002e2:	4626      	mov	r6, r4
200002e4:	1a1c      	subs	r4, r3, r0
200002e6:	fa1f f38e 	uxth.w	r3, lr
200002ea:	fbb4 f0f8 	udiv	r0, r4, r8
200002ee:	fb08 4410 	mls	r4, r8, r0, r4
200002f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
200002f6:	fb00 f707 	mul.w	r7, r0, r7
200002fa:	429f      	cmp	r7, r3
200002fc:	d908      	bls.n	20000310 <__udivmoddi4+0x148>
200002fe:	eb1c 0303 	adds.w	r3, ip, r3
20000302:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
20000306:	d202      	bcs.n	2000030e <__udivmoddi4+0x146>
20000308:	429f      	cmp	r7, r3
2000030a:	f200 80b0 	bhi.w	2000046e <__udivmoddi4+0x2a6>
2000030e:	4620      	mov	r0, r4
20000310:	1bdb      	subs	r3, r3, r7
20000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000316:	e7a5      	b.n	20000264 <__udivmoddi4+0x9c>
20000318:	f1c1 0620 	rsb	r6, r1, #32
2000031c:	408b      	lsls	r3, r1
2000031e:	fa22 f706 	lsr.w	r7, r2, r6
20000322:	431f      	orrs	r7, r3
20000324:	fa20 fc06 	lsr.w	ip, r0, r6
20000328:	fa04 f301 	lsl.w	r3, r4, r1
2000032c:	ea43 030c 	orr.w	r3, r3, ip
20000330:	40f4      	lsrs	r4, r6
20000332:	fa00 f801 	lsl.w	r8, r0, r1
20000336:	0c38      	lsrs	r0, r7, #16
20000338:	ea4f 4913 	mov.w	r9, r3, lsr #16
2000033c:	fbb4 fef0 	udiv	lr, r4, r0
20000340:	fa1f fc87 	uxth.w	ip, r7
20000344:	fb00 441e 	mls	r4, r0, lr, r4
20000348:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
2000034c:	fb0e f90c 	mul.w	r9, lr, ip
20000350:	45a1      	cmp	r9, r4
20000352:	fa02 f201 	lsl.w	r2, r2, r1
20000356:	d90a      	bls.n	2000036e <__udivmoddi4+0x1a6>
20000358:	193c      	adds	r4, r7, r4
2000035a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
2000035e:	f080 8084 	bcs.w	2000046a <__udivmoddi4+0x2a2>
20000362:	45a1      	cmp	r9, r4
20000364:	f240 8081 	bls.w	2000046a <__udivmoddi4+0x2a2>
20000368:	f1ae 0e02 	sub.w	lr, lr, #2
2000036c:	443c      	add	r4, r7
2000036e:	eba4 0409 	sub.w	r4, r4, r9
20000372:	fa1f f983 	uxth.w	r9, r3
20000376:	fbb4 f3f0 	udiv	r3, r4, r0
2000037a:	fb00 4413 	mls	r4, r0, r3, r4
2000037e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
20000382:	fb03 fc0c 	mul.w	ip, r3, ip
20000386:	45a4      	cmp	ip, r4
20000388:	d907      	bls.n	2000039a <__udivmoddi4+0x1d2>
2000038a:	193c      	adds	r4, r7, r4
2000038c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
20000390:	d267      	bcs.n	20000462 <__udivmoddi4+0x29a>
20000392:	45a4      	cmp	ip, r4
20000394:	d965      	bls.n	20000462 <__udivmoddi4+0x29a>
20000396:	3b02      	subs	r3, #2
20000398:	443c      	add	r4, r7
2000039a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
2000039e:	fba0 9302 	umull	r9, r3, r0, r2
200003a2:	eba4 040c 	sub.w	r4, r4, ip
200003a6:	429c      	cmp	r4, r3
200003a8:	46ce      	mov	lr, r9
200003aa:	469c      	mov	ip, r3
200003ac:	d351      	bcc.n	20000452 <__udivmoddi4+0x28a>
200003ae:	d04e      	beq.n	2000044e <__udivmoddi4+0x286>
200003b0:	b155      	cbz	r5, 200003c8 <__udivmoddi4+0x200>
200003b2:	ebb8 030e 	subs.w	r3, r8, lr
200003b6:	eb64 040c 	sbc.w	r4, r4, ip
200003ba:	fa04 f606 	lsl.w	r6, r4, r6
200003be:	40cb      	lsrs	r3, r1
200003c0:	431e      	orrs	r6, r3
200003c2:	40cc      	lsrs	r4, r1
200003c4:	e9c5 6400 	strd	r6, r4, [r5]
200003c8:	2100      	movs	r1, #0
200003ca:	e750      	b.n	2000026e <__udivmoddi4+0xa6>
200003cc:	f1c2 0320 	rsb	r3, r2, #32
200003d0:	fa20 f103 	lsr.w	r1, r0, r3
200003d4:	fa0c fc02 	lsl.w	ip, ip, r2
200003d8:	fa24 f303 	lsr.w	r3, r4, r3
200003dc:	4094      	lsls	r4, r2
200003de:	430c      	orrs	r4, r1
200003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
200003e4:	fa00 fe02 	lsl.w	lr, r0, r2
200003e8:	fa1f f78c 	uxth.w	r7, ip
200003ec:	fbb3 f0f8 	udiv	r0, r3, r8
200003f0:	fb08 3110 	mls	r1, r8, r0, r3
200003f4:	0c23      	lsrs	r3, r4, #16
200003f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
200003fa:	fb00 f107 	mul.w	r1, r0, r7
200003fe:	4299      	cmp	r1, r3
20000400:	d908      	bls.n	20000414 <__udivmoddi4+0x24c>
20000402:	eb1c 0303 	adds.w	r3, ip, r3
20000406:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
2000040a:	d22c      	bcs.n	20000466 <__udivmoddi4+0x29e>
2000040c:	4299      	cmp	r1, r3
2000040e:	d92a      	bls.n	20000466 <__udivmoddi4+0x29e>
20000410:	3802      	subs	r0, #2
20000412:	4463      	add	r3, ip
20000414:	1a5b      	subs	r3, r3, r1
20000416:	b2a4      	uxth	r4, r4
20000418:	fbb3 f1f8 	udiv	r1, r3, r8
2000041c:	fb08 3311 	mls	r3, r8, r1, r3
20000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000424:	fb01 f307 	mul.w	r3, r1, r7
20000428:	42a3      	cmp	r3, r4
2000042a:	d908      	bls.n	2000043e <__udivmoddi4+0x276>
2000042c:	eb1c 0404 	adds.w	r4, ip, r4
20000430:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
20000434:	d213      	bcs.n	2000045e <__udivmoddi4+0x296>
20000436:	42a3      	cmp	r3, r4
20000438:	d911      	bls.n	2000045e <__udivmoddi4+0x296>
2000043a:	3902      	subs	r1, #2
2000043c:	4464      	add	r4, ip
2000043e:	1ae4      	subs	r4, r4, r3
20000440:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
20000444:	e739      	b.n	200002ba <__udivmoddi4+0xf2>
20000446:	4604      	mov	r4, r0
20000448:	e6f0      	b.n	2000022c <__udivmoddi4+0x64>
2000044a:	4608      	mov	r0, r1
2000044c:	e706      	b.n	2000025c <__udivmoddi4+0x94>
2000044e:	45c8      	cmp	r8, r9
20000450:	d2ae      	bcs.n	200003b0 <__udivmoddi4+0x1e8>
20000452:	ebb9 0e02 	subs.w	lr, r9, r2
20000456:	eb63 0c07 	sbc.w	ip, r3, r7
2000045a:	3801      	subs	r0, #1
2000045c:	e7a8      	b.n	200003b0 <__udivmoddi4+0x1e8>
2000045e:	4631      	mov	r1, r6
20000460:	e7ed      	b.n	2000043e <__udivmoddi4+0x276>
20000462:	4603      	mov	r3, r0
20000464:	e799      	b.n	2000039a <__udivmoddi4+0x1d2>
20000466:	4630      	mov	r0, r6
20000468:	e7d4      	b.n	20000414 <__udivmoddi4+0x24c>
2000046a:	46d6      	mov	lr, sl
2000046c:	e77f      	b.n	2000036e <__udivmoddi4+0x1a6>
2000046e:	4463      	add	r3, ip
20000470:	3802      	subs	r0, #2
20000472:	e74d      	b.n	20000310 <__udivmoddi4+0x148>
20000474:	4606      	mov	r6, r0
20000476:	4623      	mov	r3, r4
20000478:	4608      	mov	r0, r1
2000047a:	e70f      	b.n	2000029c <__udivmoddi4+0xd4>
2000047c:	3e02      	subs	r6, #2
2000047e:	4463      	add	r3, ip
20000480:	e730      	b.n	200002e4 <__udivmoddi4+0x11c>
20000482:	bf00      	nop

20000484 <__aeabi_idiv0>:
20000484:	4770      	bx	lr
20000486:	bf00      	nop

20000488 <Reset_Handler>:
 ldr   sp, =_estack    /* Set stack pointer */
20000488:	f8df d0c0 	ldr.w	sp, [pc, #192]	@ 2000054c <L__usart_tdr+0x4>
  ldr r2, =_sbss
2000048c:	4a30      	ldr	r2, [pc, #192]	@ (20000550 <L__usart_tdr+0x8>)
  ldr r4, =_ebss
2000048e:	4c31      	ldr	r4, [pc, #196]	@ (20000554 <L__usart_tdr+0xc>)
  movs r3, #0
20000490:	2300      	movs	r3, #0
  cmp r2, r4
20000492:	42a2      	cmp	r2, r4
  beq 2f
20000494:	d002      	beq.n	2000049c <Reset_Handler+0x14>
  str  r3, [r2]
20000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20000498:	3204      	adds	r2, #4
  b  1b
2000049a:	e7fa      	b.n	20000492 <Reset_Handler+0xa>
  ldr   r0, L__rcc_ahb2enr
2000049c:	481f      	ldr	r0, [pc, #124]	@ (2000051c <L__rcc_ahb2enr>)
  mov   r1, 0x2
2000049e:	f04f 0102 	mov.w	r1, #2
  str   r1, [r0]
200004a2:	6001      	str	r1, [r0, #0]
  ldr   r0, L__rcc_cr
200004a4:	481c      	ldr	r0, [pc, #112]	@ (20000518 <L__rcc_cr>)
  mov   r1, 0xf00
200004a6:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
  str   r1, [r0]
200004aa:	6001      	str	r1, [r0, #0]
  ldr   r0, L__rcc_ccipr
200004ac:	481c      	ldr	r0, [pc, #112]	@ (20000520 <L__rcc_ccipr>)
  mov   r1, 0x2
200004ae:	f04f 0102 	mov.w	r1, #2
  str   r1, [r0]
200004b2:	6001      	str	r1, [r0, #0]
  ldr   r0, L__rcc_apb2enr
200004b4:	481b      	ldr	r0, [pc, #108]	@ (20000524 <L__rcc_apb2enr>)
  mov   r1, 0x4000
200004b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  str   r1, [r0]
200004ba:	6001      	str	r1, [r0, #0]
  ldr   r0, L__gpio_moder
200004bc:	481a      	ldr	r0, [pc, #104]	@ (20000528 <L__gpio_moder>)
  mov   r1, 0xa000
200004be:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
  str   r1, [r0]
200004c2:	6001      	str	r1, [r0, #0]
  ldr   r0, L__gpio_afrl
200004c4:	4819      	ldr	r0, [pc, #100]	@ (2000052c <L__gpio_afrl>)
  mov   r1, 0x77000000
200004c6:	f04f 41ee 	mov.w	r1, #1996488704	@ 0x77000000
  str   r1, [r0]
200004ca:	6001      	str	r1, [r0, #0]
  ldr   r0, L__usart_cr1
200004cc:	481a      	ldr	r0, [pc, #104]	@ (20000538 <L__usart_cr1>)
  mov   r1, 0xd
200004ce:	f04f 010d 	mov.w	r1, #13
  str   r1, [r0]
200004d2:	6001      	str	r1, [r0, #0]
  ldr   r0, L__usart_brr
200004d4:	481a      	ldr	r0, [pc, #104]	@ (20000540 <L__usart_brr>)
  mov   r1, 0x8b
200004d6:	f04f 018b 	mov.w	r1, #139	@ 0x8b
  str   r1, [r0]
200004da:	6001      	str	r1, [r0, #0]
  ldr   r0, L__usart_isr
200004dc:	4819      	ldr	r0, [pc, #100]	@ (20000544 <L__usart_isr>)
  ldr   r0, L__usart_tdr
200004de:	481a      	ldr	r0, [pc, #104]	@ (20000548 <L__usart_tdr>)
  mov   r1, 0x59
200004e0:	f04f 0159 	mov.w	r1, #89	@ 0x59
  str   r1, [r0]
200004e4:	6001      	str	r1, [r0, #0]

200004e6 <compute>:
  add r2, r1, r0
200004e6:	eb01 0200 	add.w	r2, r1, r0
  mov r0, r2
200004ea:	4610      	mov	r0, r2
  add r1, r1, #1
200004ec:	f101 0101 	add.w	r1, r1, #1
  cmp r1, #101
200004f0:	2965      	cmp	r1, #101	@ 0x65
  bne compute
200004f2:	d1f8      	bne.n	200004e6 <compute>
bl sts_main
200004f4:	f000 fcea 	bl	20000ecc <sts_main>

200004f8 <start>:
    ldr   r1, [r0]
200004f8:	6801      	ldr	r1, [r0, #0]
    ands  r1, r1, 1<<7
200004fa:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
    beq   start
200004fe:	d0fb      	beq.n	200004f8 <start>
    ldr   r0, L__usart_tdr
20000500:	4811      	ldr	r0, [pc, #68]	@ (20000548 <L__usart_tdr>)
    mov   r1, #48
20000502:	f04f 0130 	mov.w	r1, #48	@ 0x30
    str   r1, [r0]
20000506:	6001      	str	r1, [r0, #0]

20000508 <stop>:
    ldr   r1, [r0]
20000508:	6801      	ldr	r1, [r0, #0]
    ands  r1, r1, 1<<7
2000050a:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
    beq   stop
2000050e:	d0fb      	beq.n	20000508 <stop>
    ldr   r0, L__usart_tdr
20000510:	480d      	ldr	r0, [pc, #52]	@ (20000548 <L__usart_tdr>)
    mov   r1, #49
20000512:	f04f 0131 	mov.w	r1, #49	@ 0x31
    str   r1, [r0]
20000516:	6001      	str	r1, [r0, #0]

20000518 <L__rcc_cr>:
20000518:	40021000 	.word	0x40021000

2000051c <L__rcc_ahb2enr>:
2000051c:	4002104c 	.word	0x4002104c

20000520 <L__rcc_ccipr>:
20000520:	40021088 	.word	0x40021088

20000524 <L__rcc_apb2enr>:
20000524:	40021060 	.word	0x40021060

20000528 <L__gpio_moder>:
20000528:	48000400 	.word	0x48000400

2000052c <L__gpio_afrl>:
2000052c:	48000420 	.word	0x48000420

20000530 <L__gpio_ospeedr>:
20000530:	48000408 	.word	0x48000408

20000534 <L__gpio_pupdr>:
20000534:	4800040c 	.word	0x4800040c

20000538 <L__usart_cr1>:
20000538:	40013800 	.word	0x40013800

2000053c <L__usart_otyper>:
2000053c:	40013804 	.word	0x40013804

20000540 <L__usart_brr>:
20000540:	4001380c 	.word	0x4001380c

20000544 <L__usart_isr>:
20000544:	4001381c 	.word	0x4001381c

20000548 <L__usart_tdr>:
20000548:	40013828 	.word	0x40013828
 ldr   sp, =_estack    /* Set stack pointer */
2000054c:	20018000 	.word	0x20018000
  ldr r2, =_sbss
20000550:	2000165c 	.word	0x2000165c
  ldr r4, =_ebss
20000554:	200017b0 	.word	0x200017b0

20000558 <__atox>:
    *  Return Value:
    *      number of digits placed in output buffer
    ********************************************************************* */
static int __atox(char *buf,unsigned int num,unsigned int radix,int width,
		     const char *digits)
{
20000558:	b480      	push	{r7}
2000055a:	b08b      	sub	sp, #44	@ 0x2c
2000055c:	af00      	add	r7, sp, #0
2000055e:	60f8      	str	r0, [r7, #12]
20000560:	60b9      	str	r1, [r7, #8]
20000562:	607a      	str	r2, [r7, #4]
20000564:	603b      	str	r3, [r7, #0]
    char buffer[16];
    char *op;
    int retval;

    op = &buffer[0];
20000566:	f107 0310 	add.w	r3, r7, #16
2000056a:	627b      	str	r3, [r7, #36]	@ 0x24
    retval = 0;
2000056c:	2300      	movs	r3, #0
2000056e:	623b      	str	r3, [r7, #32]

    do {
	*op++ = digits[num % radix];
20000570:	68bb      	ldr	r3, [r7, #8]
20000572:	687a      	ldr	r2, [r7, #4]
20000574:	fbb3 f2f2 	udiv	r2, r3, r2
20000578:	6879      	ldr	r1, [r7, #4]
2000057a:	fb01 f202 	mul.w	r2, r1, r2
2000057e:	1a9b      	subs	r3, r3, r2
20000580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20000582:	441a      	add	r2, r3
20000584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20000586:	1c59      	adds	r1, r3, #1
20000588:	6279      	str	r1, [r7, #36]	@ 0x24
2000058a:	7812      	ldrb	r2, [r2, #0]
2000058c:	701a      	strb	r2, [r3, #0]
	retval++;
2000058e:	6a3b      	ldr	r3, [r7, #32]
20000590:	3301      	adds	r3, #1
20000592:	623b      	str	r3, [r7, #32]
	num /= radix;
20000594:	68ba      	ldr	r2, [r7, #8]
20000596:	687b      	ldr	r3, [r7, #4]
20000598:	fbb2 f3f3 	udiv	r3, r2, r3
2000059c:	60bb      	str	r3, [r7, #8]
	} while (num != 0);
2000059e:	68bb      	ldr	r3, [r7, #8]
200005a0:	2b00      	cmp	r3, #0
200005a2:	d1e5      	bne.n	20000570 <__atox+0x18>

    if (width && (width > retval)) {
200005a4:	683b      	ldr	r3, [r7, #0]
200005a6:	2b00      	cmp	r3, #0
200005a8:	d020      	beq.n	200005ec <__atox+0x94>
200005aa:	683a      	ldr	r2, [r7, #0]
200005ac:	6a3b      	ldr	r3, [r7, #32]
200005ae:	429a      	cmp	r2, r3
200005b0:	dd1c      	ble.n	200005ec <__atox+0x94>
	width = width - retval;
200005b2:	683a      	ldr	r2, [r7, #0]
200005b4:	6a3b      	ldr	r3, [r7, #32]
200005b6:	1ad3      	subs	r3, r2, r3
200005b8:	603b      	str	r3, [r7, #0]
	while (width) {
200005ba:	e00a      	b.n	200005d2 <__atox+0x7a>
	    *op++ = '0';
200005bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200005be:	1c5a      	adds	r2, r3, #1
200005c0:	627a      	str	r2, [r7, #36]	@ 0x24
200005c2:	2230      	movs	r2, #48	@ 0x30
200005c4:	701a      	strb	r2, [r3, #0]
	    retval++;
200005c6:	6a3b      	ldr	r3, [r7, #32]
200005c8:	3301      	adds	r3, #1
200005ca:	623b      	str	r3, [r7, #32]
	    width--;
200005cc:	683b      	ldr	r3, [r7, #0]
200005ce:	3b01      	subs	r3, #1
200005d0:	603b      	str	r3, [r7, #0]
	while (width) {
200005d2:	683b      	ldr	r3, [r7, #0]
200005d4:	2b00      	cmp	r3, #0
200005d6:	d1f1      	bne.n	200005bc <__atox+0x64>
	    }
	}

    while (op != buffer) {
200005d8:	e008      	b.n	200005ec <__atox+0x94>
	op--;
200005da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200005dc:	3b01      	subs	r3, #1
200005de:	627b      	str	r3, [r7, #36]	@ 0x24
	*buf++ = *op;
200005e0:	68fb      	ldr	r3, [r7, #12]
200005e2:	1c5a      	adds	r2, r3, #1
200005e4:	60fa      	str	r2, [r7, #12]
200005e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200005e8:	7812      	ldrb	r2, [r2, #0]
200005ea:	701a      	strb	r2, [r3, #0]
    while (op != buffer) {
200005ec:	f107 0310 	add.w	r3, r7, #16
200005f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200005f2:	429a      	cmp	r2, r3
200005f4:	d1f1      	bne.n	200005da <__atox+0x82>
	}

    return retval;
200005f6:	6a3b      	ldr	r3, [r7, #32]
}
200005f8:	4618      	mov	r0, r3
200005fa:	372c      	adds	r7, #44	@ 0x2c
200005fc:	46bd      	mov	sp, r7
200005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20000602:	4770      	bx	lr

20000604 <__llatox>:
    *  Return Value:
    *      number of digits placed in output buffer
    ********************************************************************* */
static int __llatox(char *buf,unsigned long long num,unsigned int radix,
		    int width,const char *digits)
{
20000604:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
20000608:	b08a      	sub	sp, #40	@ 0x28
2000060a:	af00      	add	r7, sp, #0
2000060c:	60f8      	str	r0, [r7, #12]
2000060e:	e9c7 2300 	strd	r2, r3, [r7]
    char buffer[16];
    char *op;
    int retval;

    op = &buffer[0];
20000612:	f107 0310 	add.w	r3, r7, #16
20000616:	627b      	str	r3, [r7, #36]	@ 0x24
    retval = 0;
20000618:	2300      	movs	r3, #0
2000061a:	623b      	str	r3, [r7, #32]
	retval++;
	num >>= 4;
	} while (num != 0);
#else
    do {
	*op++ = digits[num % radix];
2000061c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2000061e:	2200      	movs	r2, #0
20000620:	4698      	mov	r8, r3
20000622:	4691      	mov	r9, r2
20000624:	e9d7 0100 	ldrd	r0, r1, [r7]
20000628:	4642      	mov	r2, r8
2000062a:	464b      	mov	r3, r9
2000062c:	f7ff fdb4 	bl	20000198 <__aeabi_uldivmod>
20000630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000632:	441a      	add	r2, r3
20000634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20000636:	1c59      	adds	r1, r3, #1
20000638:	6279      	str	r1, [r7, #36]	@ 0x24
2000063a:	7812      	ldrb	r2, [r2, #0]
2000063c:	701a      	strb	r2, [r3, #0]
	retval++;
2000063e:	6a3b      	ldr	r3, [r7, #32]
20000640:	3301      	adds	r3, #1
20000642:	623b      	str	r3, [r7, #32]
	num /= radix;
20000644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20000646:	2200      	movs	r2, #0
20000648:	461c      	mov	r4, r3
2000064a:	4615      	mov	r5, r2
2000064c:	4622      	mov	r2, r4
2000064e:	462b      	mov	r3, r5
20000650:	e9d7 0100 	ldrd	r0, r1, [r7]
20000654:	f7ff fda0 	bl	20000198 <__aeabi_uldivmod>
20000658:	4602      	mov	r2, r0
2000065a:	460b      	mov	r3, r1
2000065c:	e9c7 2300 	strd	r2, r3, [r7]
	} while (num != 0);
20000660:	e9d7 2300 	ldrd	r2, r3, [r7]
20000664:	4313      	orrs	r3, r2
20000666:	d1d9      	bne.n	2000061c <__llatox+0x18>
#endif

    if (width && (width > retval)) {
20000668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
2000066a:	2b00      	cmp	r3, #0
2000066c:	d020      	beq.n	200006b0 <__llatox+0xac>
2000066e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
20000670:	6a3b      	ldr	r3, [r7, #32]
20000672:	429a      	cmp	r2, r3
20000674:	dd1c      	ble.n	200006b0 <__llatox+0xac>
	width = width - retval;
20000676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
20000678:	6a3b      	ldr	r3, [r7, #32]
2000067a:	1ad3      	subs	r3, r2, r3
2000067c:	647b      	str	r3, [r7, #68]	@ 0x44
	while (width) {
2000067e:	e00a      	b.n	20000696 <__llatox+0x92>
	    *op++ = '0';
20000680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20000682:	1c5a      	adds	r2, r3, #1
20000684:	627a      	str	r2, [r7, #36]	@ 0x24
20000686:	2230      	movs	r2, #48	@ 0x30
20000688:	701a      	strb	r2, [r3, #0]
	    retval++;
2000068a:	6a3b      	ldr	r3, [r7, #32]
2000068c:	3301      	adds	r3, #1
2000068e:	623b      	str	r3, [r7, #32]
	    width--;
20000690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000692:	3b01      	subs	r3, #1
20000694:	647b      	str	r3, [r7, #68]	@ 0x44
	while (width) {
20000696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000698:	2b00      	cmp	r3, #0
2000069a:	d1f1      	bne.n	20000680 <__llatox+0x7c>
	    }
	}

    while (op != buffer) {
2000069c:	e008      	b.n	200006b0 <__llatox+0xac>
	op--;
2000069e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200006a0:	3b01      	subs	r3, #1
200006a2:	627b      	str	r3, [r7, #36]	@ 0x24
	*buf++ = *op;
200006a4:	68fb      	ldr	r3, [r7, #12]
200006a6:	1c5a      	adds	r2, r3, #1
200006a8:	60fa      	str	r2, [r7, #12]
200006aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200006ac:	7812      	ldrb	r2, [r2, #0]
200006ae:	701a      	strb	r2, [r3, #0]
    while (op != buffer) {
200006b0:	f107 0310 	add.w	r3, r7, #16
200006b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200006b6:	429a      	cmp	r2, r3
200006b8:	d1f1      	bne.n	2000069e <__llatox+0x9a>
	}

    return retval;
200006ba:	6a3b      	ldr	r3, [r7, #32]
}
200006bc:	4618      	mov	r0, r3
200006be:	3728      	adds	r7, #40	@ 0x28
200006c0:	46bd      	mov	sp, r7
200006c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

200006c8 <xvsprintf>:
    *  Return Value:
    *      number of characters copied
    ********************************************************************* */
#define isdigit(x) (((x) >= '0') && ((x) <= '9'))
int xvsprintf(char *outbuf,const char *templat,va_list marker)
{
200006c8:	b5b0      	push	{r4, r5, r7, lr}
200006ca:	b09a      	sub	sp, #104	@ 0x68
200006cc:	af04      	add	r7, sp, #16
200006ce:	60f8      	str	r0, [r7, #12]
200006d0:	60b9      	str	r1, [r7, #8]
200006d2:	607a      	str	r2, [r7, #4]
    long long ll;
    int leadingzero;
    int leadingnegsign;
    int islong;
    int width;
    int width2 = 0;
200006d4:	2300      	movs	r3, #0
200006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int hashash = 0;
200006d8:	2300      	movs	r3, #0
200006da:	62bb      	str	r3, [r7, #40]	@ 0x28

    optr = outbuf;
200006dc:	68fb      	ldr	r3, [r7, #12]
200006de:	657b      	str	r3, [r7, #84]	@ 0x54
    iptr = templat;
200006e0:	68bb      	ldr	r3, [r7, #8]
200006e2:	653b      	str	r3, [r7, #80]	@ 0x50

    while (*iptr) {
200006e4:	e326      	b.n	20000d34 <xvsprintf+0x66c>
	if (*iptr != '%') {*optr++ = *iptr++; continue;}
200006e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200006e8:	781b      	ldrb	r3, [r3, #0]
200006ea:	2b25      	cmp	r3, #37	@ 0x25
200006ec:	d008      	beq.n	20000700 <xvsprintf+0x38>
200006ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
200006f0:	1c53      	adds	r3, r2, #1
200006f2:	653b      	str	r3, [r7, #80]	@ 0x50
200006f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200006f6:	1c59      	adds	r1, r3, #1
200006f8:	6579      	str	r1, [r7, #84]	@ 0x54
200006fa:	7812      	ldrb	r2, [r2, #0]
200006fc:	701a      	strb	r2, [r3, #0]
200006fe:	e319      	b.n	20000d34 <xvsprintf+0x66c>

	iptr++;
20000700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000702:	3301      	adds	r3, #1
20000704:	653b      	str	r3, [r7, #80]	@ 0x50

	if (*iptr == '#') { hashash = 1; iptr++; }
20000706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000708:	781b      	ldrb	r3, [r3, #0]
2000070a:	2b23      	cmp	r3, #35	@ 0x23
2000070c:	d104      	bne.n	20000718 <xvsprintf+0x50>
2000070e:	2301      	movs	r3, #1
20000710:	62bb      	str	r3, [r7, #40]	@ 0x28
20000712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000714:	3301      	adds	r3, #1
20000716:	653b      	str	r3, [r7, #80]	@ 0x50
	if (*iptr == '-') {
20000718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000071a:	781b      	ldrb	r3, [r3, #0]
2000071c:	2b2d      	cmp	r3, #45	@ 0x2d
2000071e:	d105      	bne.n	2000072c <xvsprintf+0x64>
	    leadingnegsign = 1;
20000720:	2301      	movs	r3, #1
20000722:	627b      	str	r3, [r7, #36]	@ 0x24
	    iptr++;
20000724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000726:	3301      	adds	r3, #1
20000728:	653b      	str	r3, [r7, #80]	@ 0x50
2000072a:	e001      	b.n	20000730 <xvsprintf+0x68>
	    }
	else leadingnegsign = 0;
2000072c:	2300      	movs	r3, #0
2000072e:	627b      	str	r3, [r7, #36]	@ 0x24

	if (*iptr == '0') leadingzero = 1;
20000730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000732:	781b      	ldrb	r3, [r3, #0]
20000734:	2b30      	cmp	r3, #48	@ 0x30
20000736:	d102      	bne.n	2000073e <xvsprintf+0x76>
20000738:	2301      	movs	r3, #1
2000073a:	623b      	str	r3, [r7, #32]
2000073c:	e001      	b.n	20000742 <xvsprintf+0x7a>
	else leadingzero = 0;
2000073e:	2300      	movs	r3, #0
20000740:	623b      	str	r3, [r7, #32]

	width = 0;
20000742:	2300      	movs	r3, #0
20000744:	633b      	str	r3, [r7, #48]	@ 0x30
	while (*iptr && isdigit(*iptr)) {
20000746:	e016      	b.n	20000776 <xvsprintf+0xae>
	    width += (*iptr - '0');
20000748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000074a:	781b      	ldrb	r3, [r3, #0]
2000074c:	3b30      	subs	r3, #48	@ 0x30
2000074e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20000750:	4413      	add	r3, r2
20000752:	633b      	str	r3, [r7, #48]	@ 0x30
	    iptr++;
20000754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000756:	3301      	adds	r3, #1
20000758:	653b      	str	r3, [r7, #80]	@ 0x50
	    if (isdigit(*iptr)) width *= 10;
2000075a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000075c:	781b      	ldrb	r3, [r3, #0]
2000075e:	2b2f      	cmp	r3, #47	@ 0x2f
20000760:	d909      	bls.n	20000776 <xvsprintf+0xae>
20000762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000764:	781b      	ldrb	r3, [r3, #0]
20000766:	2b39      	cmp	r3, #57	@ 0x39
20000768:	d805      	bhi.n	20000776 <xvsprintf+0xae>
2000076a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
2000076c:	4613      	mov	r3, r2
2000076e:	009b      	lsls	r3, r3, #2
20000770:	4413      	add	r3, r2
20000772:	005b      	lsls	r3, r3, #1
20000774:	633b      	str	r3, [r7, #48]	@ 0x30
	while (*iptr && isdigit(*iptr)) {
20000776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000778:	781b      	ldrb	r3, [r3, #0]
2000077a:	2b00      	cmp	r3, #0
2000077c:	d007      	beq.n	2000078e <xvsprintf+0xc6>
2000077e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000780:	781b      	ldrb	r3, [r3, #0]
20000782:	2b2f      	cmp	r3, #47	@ 0x2f
20000784:	d903      	bls.n	2000078e <xvsprintf+0xc6>
20000786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000788:	781b      	ldrb	r3, [r3, #0]
2000078a:	2b39      	cmp	r3, #57	@ 0x39
2000078c:	d9dc      	bls.n	20000748 <xvsprintf+0x80>
	    }
	if (*iptr == '.') {
2000078e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000790:	781b      	ldrb	r3, [r3, #0]
20000792:	2b2e      	cmp	r3, #46	@ 0x2e
20000794:	d128      	bne.n	200007e8 <xvsprintf+0x120>
	    iptr++;
20000796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000798:	3301      	adds	r3, #1
2000079a:	653b      	str	r3, [r7, #80]	@ 0x50
	    width2 = 0;
2000079c:	2300      	movs	r3, #0
2000079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    while (*iptr && isdigit(*iptr)) {
200007a0:	e016      	b.n	200007d0 <xvsprintf+0x108>
		width2 += (*iptr - '0');
200007a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007a4:	781b      	ldrb	r3, [r3, #0]
200007a6:	3b30      	subs	r3, #48	@ 0x30
200007a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200007aa:	4413      	add	r3, r2
200007ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
		iptr++;
200007ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007b0:	3301      	adds	r3, #1
200007b2:	653b      	str	r3, [r7, #80]	@ 0x50
		if (isdigit(*iptr)) width2 *= 10;
200007b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007b6:	781b      	ldrb	r3, [r3, #0]
200007b8:	2b2f      	cmp	r3, #47	@ 0x2f
200007ba:	d909      	bls.n	200007d0 <xvsprintf+0x108>
200007bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007be:	781b      	ldrb	r3, [r3, #0]
200007c0:	2b39      	cmp	r3, #57	@ 0x39
200007c2:	d805      	bhi.n	200007d0 <xvsprintf+0x108>
200007c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200007c6:	4613      	mov	r3, r2
200007c8:	009b      	lsls	r3, r3, #2
200007ca:	4413      	add	r3, r2
200007cc:	005b      	lsls	r3, r3, #1
200007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    while (*iptr && isdigit(*iptr)) {
200007d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007d2:	781b      	ldrb	r3, [r3, #0]
200007d4:	2b00      	cmp	r3, #0
200007d6:	d007      	beq.n	200007e8 <xvsprintf+0x120>
200007d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007da:	781b      	ldrb	r3, [r3, #0]
200007dc:	2b2f      	cmp	r3, #47	@ 0x2f
200007de:	d903      	bls.n	200007e8 <xvsprintf+0x120>
200007e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007e2:	781b      	ldrb	r3, [r3, #0]
200007e4:	2b39      	cmp	r3, #57	@ 0x39
200007e6:	d9dc      	bls.n	200007a2 <xvsprintf+0xda>
		}
	    }

	islong = 0;
200007e8:	2300      	movs	r3, #0
200007ea:	637b      	str	r3, [r7, #52]	@ 0x34
	if (*iptr == 'l') { islong++; iptr++; }
200007ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007ee:	781b      	ldrb	r3, [r3, #0]
200007f0:	2b6c      	cmp	r3, #108	@ 0x6c
200007f2:	d105      	bne.n	20000800 <xvsprintf+0x138>
200007f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200007f6:	3301      	adds	r3, #1
200007f8:	637b      	str	r3, [r7, #52]	@ 0x34
200007fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007fc:	3301      	adds	r3, #1
200007fe:	653b      	str	r3, [r7, #80]	@ 0x50
	if (*iptr == 'l') { islong++; iptr++; }
20000800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000802:	781b      	ldrb	r3, [r3, #0]
20000804:	2b6c      	cmp	r3, #108	@ 0x6c
20000806:	d105      	bne.n	20000814 <xvsprintf+0x14c>
20000808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000080a:	3301      	adds	r3, #1
2000080c:	637b      	str	r3, [r7, #52]	@ 0x34
2000080e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000810:	3301      	adds	r3, #1
20000812:	653b      	str	r3, [r7, #80]	@ 0x50

	switch (*iptr) {
20000814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000816:	781b      	ldrb	r3, [r3, #0]
20000818:	3b49      	subs	r3, #73	@ 0x49
2000081a:	2b2f      	cmp	r3, #47	@ 0x2f
2000081c:	f200 8280 	bhi.w	20000d20 <xvsprintf+0x658>
20000820:	a201      	add	r2, pc, #4	@ (adr r2, 20000828 <xvsprintf+0x160>)
20000822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000826:	bf00      	nop
20000828:	200008e9 	.word	0x200008e9
2000082c:	20000d21 	.word	0x20000d21
20000830:	20000d21 	.word	0x20000d21
20000834:	20000d21 	.word	0x20000d21
20000838:	20000d21 	.word	0x20000d21
2000083c:	20000d21 	.word	0x20000d21
20000840:	20000d21 	.word	0x20000d21
20000844:	20000c39 	.word	0x20000c39
20000848:	20000d21 	.word	0x20000d21
2000084c:	20000d21 	.word	0x20000d21
20000850:	20000d21 	.word	0x20000d21
20000854:	20000d21 	.word	0x20000d21
20000858:	20000d21 	.word	0x20000d21
2000085c:	20000d21 	.word	0x20000d21
20000860:	20000d21 	.word	0x20000d21
20000864:	20000bab 	.word	0x20000bab
20000868:	20000d21 	.word	0x20000d21
2000086c:	20000cc3 	.word	0x20000cc3
20000870:	20000d21 	.word	0x20000d21
20000874:	20000d21 	.word	0x20000d21
20000878:	20000d21 	.word	0x20000d21
2000087c:	20000d21 	.word	0x20000d21
20000880:	20000d21 	.word	0x20000d21
20000884:	20000d21 	.word	0x20000d21
20000888:	20000a13 	.word	0x20000a13
2000088c:	20000c97 	.word	0x20000c97
20000890:	20000d09 	.word	0x20000d09
20000894:	20000a7f 	.word	0x20000a7f
20000898:	20000d21 	.word	0x20000d21
2000089c:	20000d21 	.word	0x20000d21
200008a0:	20000d21 	.word	0x20000d21
200008a4:	20000d21 	.word	0x20000d21
200008a8:	20000d21 	.word	0x20000d21
200008ac:	20000d21 	.word	0x20000d21
200008b0:	20000d21 	.word	0x20000d21
200008b4:	20000d21 	.word	0x20000d21
200008b8:	20000d21 	.word	0x20000d21
200008bc:	20000d21 	.word	0x20000d21
200008c0:	20000d21 	.word	0x20000d21
200008c4:	20000c39 	.word	0x20000c39
200008c8:	20000d21 	.word	0x20000d21
200008cc:	20000d21 	.word	0x20000d21
200008d0:	2000099b 	.word	0x2000099b
200008d4:	20000d21 	.word	0x20000d21
200008d8:	20000b2d 	.word	0x20000b2d
200008dc:	20000d21 	.word	0x20000d21
200008e0:	20000c6b 	.word	0x20000c6b
200008e4:	20000bab 	.word	0x20000bab
	    case 'I':
		tmpptr = (unsigned char *) va_arg(marker,unsigned char *);
200008e8:	687b      	ldr	r3, [r7, #4]
200008ea:	1d1a      	adds	r2, r3, #4
200008ec:	607a      	str	r2, [r7, #4]
200008ee:	681b      	ldr	r3, [r3, #0]
200008f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		optr += __atox(optr,*tmpptr++,10,0,digits);
200008f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200008f4:	1c5a      	adds	r2, r3, #1
200008f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
200008f8:	781b      	ldrb	r3, [r3, #0]
200008fa:	4619      	mov	r1, r3
200008fc:	4b9a      	ldr	r3, [pc, #616]	@ (20000b68 <xvsprintf+0x4a0>)
200008fe:	9300      	str	r3, [sp, #0]
20000900:	2300      	movs	r3, #0
20000902:	220a      	movs	r2, #10
20000904:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000906:	f7ff fe27 	bl	20000558 <__atox>
2000090a:	4603      	mov	r3, r0
2000090c:	461a      	mov	r2, r3
2000090e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000910:	4413      	add	r3, r2
20000912:	657b      	str	r3, [r7, #84]	@ 0x54
		*optr++ = '.';
20000914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000916:	1c5a      	adds	r2, r3, #1
20000918:	657a      	str	r2, [r7, #84]	@ 0x54
2000091a:	222e      	movs	r2, #46	@ 0x2e
2000091c:	701a      	strb	r2, [r3, #0]
		optr += __atox(optr,*tmpptr++,10,0,digits);
2000091e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000920:	1c5a      	adds	r2, r3, #1
20000922:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000924:	781b      	ldrb	r3, [r3, #0]
20000926:	4619      	mov	r1, r3
20000928:	4b8f      	ldr	r3, [pc, #572]	@ (20000b68 <xvsprintf+0x4a0>)
2000092a:	9300      	str	r3, [sp, #0]
2000092c:	2300      	movs	r3, #0
2000092e:	220a      	movs	r2, #10
20000930:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000932:	f7ff fe11 	bl	20000558 <__atox>
20000936:	4603      	mov	r3, r0
20000938:	461a      	mov	r2, r3
2000093a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
2000093c:	4413      	add	r3, r2
2000093e:	657b      	str	r3, [r7, #84]	@ 0x54
		*optr++ = '.';
20000940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000942:	1c5a      	adds	r2, r3, #1
20000944:	657a      	str	r2, [r7, #84]	@ 0x54
20000946:	222e      	movs	r2, #46	@ 0x2e
20000948:	701a      	strb	r2, [r3, #0]
		optr += __atox(optr,*tmpptr++,10,0,digits);
2000094a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000094c:	1c5a      	adds	r2, r3, #1
2000094e:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000950:	781b      	ldrb	r3, [r3, #0]
20000952:	4619      	mov	r1, r3
20000954:	4b84      	ldr	r3, [pc, #528]	@ (20000b68 <xvsprintf+0x4a0>)
20000956:	9300      	str	r3, [sp, #0]
20000958:	2300      	movs	r3, #0
2000095a:	220a      	movs	r2, #10
2000095c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
2000095e:	f7ff fdfb 	bl	20000558 <__atox>
20000962:	4603      	mov	r3, r0
20000964:	461a      	mov	r2, r3
20000966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000968:	4413      	add	r3, r2
2000096a:	657b      	str	r3, [r7, #84]	@ 0x54
		*optr++ = '.';
2000096c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
2000096e:	1c5a      	adds	r2, r3, #1
20000970:	657a      	str	r2, [r7, #84]	@ 0x54
20000972:	222e      	movs	r2, #46	@ 0x2e
20000974:	701a      	strb	r2, [r3, #0]
		optr += __atox(optr,*tmpptr++,10,0,digits);
20000976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000978:	1c5a      	adds	r2, r3, #1
2000097a:	64fa      	str	r2, [r7, #76]	@ 0x4c
2000097c:	781b      	ldrb	r3, [r3, #0]
2000097e:	4619      	mov	r1, r3
20000980:	4b79      	ldr	r3, [pc, #484]	@ (20000b68 <xvsprintf+0x4a0>)
20000982:	9300      	str	r3, [sp, #0]
20000984:	2300      	movs	r3, #0
20000986:	220a      	movs	r2, #10
20000988:	6d78      	ldr	r0, [r7, #84]	@ 0x54
2000098a:	f7ff fde5 	bl	20000558 <__atox>
2000098e:	4603      	mov	r3, r0
20000990:	461a      	mov	r2, r3
20000992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000994:	4413      	add	r3, r2
20000996:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
20000998:	e1c9      	b.n	20000d2e <xvsprintf+0x666>
	    case 's':
		tmpptr = (unsigned char *) va_arg(marker,unsigned char *);
2000099a:	687b      	ldr	r3, [r7, #4]
2000099c:	1d1a      	adds	r2, r3, #4
2000099e:	607a      	str	r2, [r7, #4]
200009a0:	681b      	ldr	r3, [r3, #0]
200009a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (!tmpptr) tmpptr = (unsigned char *) "(null)";
200009a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200009a6:	2b00      	cmp	r3, #0
200009a8:	d101      	bne.n	200009ae <xvsprintf+0x2e6>
200009aa:	4b70      	ldr	r3, [pc, #448]	@ (20000b6c <xvsprintf+0x4a4>)
200009ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if ((width == 0) & (width2 == 0)) {
200009ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
200009b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200009b2:	4313      	orrs	r3, r2
200009b4:	2b00      	cmp	r3, #0
200009b6:	d118      	bne.n	200009ea <xvsprintf+0x322>
		    while (*tmpptr) *optr++ = *tmpptr++;
200009b8:	e007      	b.n	200009ca <xvsprintf+0x302>
200009ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
200009bc:	1c53      	adds	r3, r2, #1
200009be:	64fb      	str	r3, [r7, #76]	@ 0x4c
200009c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200009c2:	1c59      	adds	r1, r3, #1
200009c4:	6579      	str	r1, [r7, #84]	@ 0x54
200009c6:	7812      	ldrb	r2, [r2, #0]
200009c8:	701a      	strb	r2, [r3, #0]
200009ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200009cc:	781b      	ldrb	r3, [r3, #0]
200009ce:	2b00      	cmp	r3, #0
200009d0:	d1f3      	bne.n	200009ba <xvsprintf+0x2f2>
		    break;
200009d2:	e1ac      	b.n	20000d2e <xvsprintf+0x666>
		    }
		while (width && *tmpptr) {
		    *optr++ = *tmpptr++;
200009d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
200009d6:	1c53      	adds	r3, r2, #1
200009d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
200009da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200009dc:	1c59      	adds	r1, r3, #1
200009de:	6579      	str	r1, [r7, #84]	@ 0x54
200009e0:	7812      	ldrb	r2, [r2, #0]
200009e2:	701a      	strb	r2, [r3, #0]
		    width--;
200009e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200009e6:	3b01      	subs	r3, #1
200009e8:	633b      	str	r3, [r7, #48]	@ 0x30
		while (width && *tmpptr) {
200009ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200009ec:	2b00      	cmp	r3, #0
200009ee:	d00c      	beq.n	20000a0a <xvsprintf+0x342>
200009f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200009f2:	781b      	ldrb	r3, [r3, #0]
200009f4:	2b00      	cmp	r3, #0
200009f6:	d1ed      	bne.n	200009d4 <xvsprintf+0x30c>
		    }
		while (width) {
200009f8:	e007      	b.n	20000a0a <xvsprintf+0x342>
		    *optr++ = ' ';
200009fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200009fc:	1c5a      	adds	r2, r3, #1
200009fe:	657a      	str	r2, [r7, #84]	@ 0x54
20000a00:	2220      	movs	r2, #32
20000a02:	701a      	strb	r2, [r3, #0]
		    width--;
20000a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000a06:	3b01      	subs	r3, #1
20000a08:	633b      	str	r3, [r7, #48]	@ 0x30
		while (width) {
20000a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000a0c:	2b00      	cmp	r3, #0
20000a0e:	d1f4      	bne.n	200009fa <xvsprintf+0x332>
		    }
		break;
20000a10:	e18d      	b.n	20000d2e <xvsprintf+0x666>
	    case 'a':
		tmpptr = (unsigned char *) va_arg(marker,unsigned char *);
20000a12:	687b      	ldr	r3, [r7, #4]
20000a14:	1d1a      	adds	r2, r3, #4
20000a16:	607a      	str	r2, [r7, #4]
20000a18:	681b      	ldr	r3, [r3, #0]
20000a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		for (x = 0; x < 5; x++) {
20000a1c:	2300      	movs	r3, #0
20000a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
20000a20:	e018      	b.n	20000a54 <xvsprintf+0x38c>
		    optr += __atox(optr,*tmpptr++,16,2,digits);
20000a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000a24:	1c5a      	adds	r2, r3, #1
20000a26:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	4619      	mov	r1, r3
20000a2c:	4b4e      	ldr	r3, [pc, #312]	@ (20000b68 <xvsprintf+0x4a0>)
20000a2e:	9300      	str	r3, [sp, #0]
20000a30:	2302      	movs	r3, #2
20000a32:	2210      	movs	r2, #16
20000a34:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000a36:	f7ff fd8f 	bl	20000558 <__atox>
20000a3a:	4603      	mov	r3, r0
20000a3c:	461a      	mov	r2, r3
20000a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a40:	4413      	add	r3, r2
20000a42:	657b      	str	r3, [r7, #84]	@ 0x54
		    *optr++ = '-';
20000a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a46:	1c5a      	adds	r2, r3, #1
20000a48:	657a      	str	r2, [r7, #84]	@ 0x54
20000a4a:	222d      	movs	r2, #45	@ 0x2d
20000a4c:	701a      	strb	r2, [r3, #0]
		for (x = 0; x < 5; x++) {
20000a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000a50:	3301      	adds	r3, #1
20000a52:	64bb      	str	r3, [r7, #72]	@ 0x48
20000a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000a56:	2b04      	cmp	r3, #4
20000a58:	dde3      	ble.n	20000a22 <xvsprintf+0x35a>
		    }
		optr += __atox(optr,*tmpptr++,16,2,digits);
20000a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000a5c:	1c5a      	adds	r2, r3, #1
20000a5e:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000a60:	781b      	ldrb	r3, [r3, #0]
20000a62:	4619      	mov	r1, r3
20000a64:	4b40      	ldr	r3, [pc, #256]	@ (20000b68 <xvsprintf+0x4a0>)
20000a66:	9300      	str	r3, [sp, #0]
20000a68:	2302      	movs	r3, #2
20000a6a:	2210      	movs	r2, #16
20000a6c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000a6e:	f7ff fd73 	bl	20000558 <__atox>
20000a72:	4603      	mov	r3, r0
20000a74:	461a      	mov	r2, r3
20000a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a78:	4413      	add	r3, r2
20000a7a:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
20000a7c:	e157      	b.n	20000d2e <xvsprintf+0x666>
20000a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000a80:	2b01      	cmp	r3, #1
20000a82:	dc03      	bgt.n	20000a8c <xvsprintf+0x3c4>
20000a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000a86:	2b00      	cmp	r3, #0
20000a88:	da04      	bge.n	20000a94 <xvsprintf+0x3cc>
			ll = va_arg(marker,long long int);
			if (ll < 0) { *optr++='-'; ll = -ll;}
			optr += __llatox(optr,ll,10,width,digits);
			break;
		    }
		break;
20000a8a:	e150      	b.n	20000d2e <xvsprintf+0x666>
20000a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000a8e:	2b02      	cmp	r3, #2
20000a90:	d01e      	beq.n	20000ad0 <xvsprintf+0x408>
20000a92:	e14c      	b.n	20000d2e <xvsprintf+0x666>
			i = va_arg(marker,int);
20000a94:	687b      	ldr	r3, [r7, #4]
20000a96:	1d1a      	adds	r2, r3, #4
20000a98:	607a      	str	r2, [r7, #4]
20000a9a:	681b      	ldr	r3, [r3, #0]
20000a9c:	647b      	str	r3, [r7, #68]	@ 0x44
			if (i < 0) { *optr++='-'; i = -i;}
20000a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000aa0:	2b00      	cmp	r3, #0
20000aa2:	da07      	bge.n	20000ab4 <xvsprintf+0x3ec>
20000aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000aa6:	1c5a      	adds	r2, r3, #1
20000aa8:	657a      	str	r2, [r7, #84]	@ 0x54
20000aaa:	222d      	movs	r2, #45	@ 0x2d
20000aac:	701a      	strb	r2, [r3, #0]
20000aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000ab0:	425b      	negs	r3, r3
20000ab2:	647b      	str	r3, [r7, #68]	@ 0x44
			optr += __atox(optr,i,10,width,digits);
20000ab4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
20000ab6:	4b2c      	ldr	r3, [pc, #176]	@ (20000b68 <xvsprintf+0x4a0>)
20000ab8:	9300      	str	r3, [sp, #0]
20000aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000abc:	220a      	movs	r2, #10
20000abe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000ac0:	f7ff fd4a 	bl	20000558 <__atox>
20000ac4:	4603      	mov	r3, r0
20000ac6:	461a      	mov	r2, r3
20000ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000aca:	4413      	add	r3, r2
20000acc:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000ace:	e02c      	b.n	20000b2a <xvsprintf+0x462>
			ll = va_arg(marker,long long int);
20000ad0:	687b      	ldr	r3, [r7, #4]
20000ad2:	3307      	adds	r3, #7
20000ad4:	f023 0307 	bic.w	r3, r3, #7
20000ad8:	f103 0208 	add.w	r2, r3, #8
20000adc:	607a      	str	r2, [r7, #4]
20000ade:	e9d3 2300 	ldrd	r2, r3, [r3]
20000ae2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			if (ll < 0) { *optr++='-'; ll = -ll;}
20000ae6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
20000aea:	2b00      	cmp	r3, #0
20000aec:	da0c      	bge.n	20000b08 <xvsprintf+0x440>
20000aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000af0:	1c5a      	adds	r2, r3, #1
20000af2:	657a      	str	r2, [r7, #84]	@ 0x54
20000af4:	222d      	movs	r2, #45	@ 0x2d
20000af6:	701a      	strb	r2, [r3, #0]
20000af8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
20000afc:	2100      	movs	r1, #0
20000afe:	4254      	negs	r4, r2
20000b00:	eb61 0503 	sbc.w	r5, r1, r3
20000b04:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
			optr += __llatox(optr,ll,10,width,digits);
20000b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
20000b0c:	4916      	ldr	r1, [pc, #88]	@ (20000b68 <xvsprintf+0x4a0>)
20000b0e:	9102      	str	r1, [sp, #8]
20000b10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
20000b12:	9101      	str	r1, [sp, #4]
20000b14:	210a      	movs	r1, #10
20000b16:	9100      	str	r1, [sp, #0]
20000b18:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000b1a:	f7ff fd73 	bl	20000604 <__llatox>
20000b1e:	4603      	mov	r3, r0
20000b20:	461a      	mov	r2, r3
20000b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000b24:	4413      	add	r3, r2
20000b26:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000b28:	bf00      	nop
		break;
20000b2a:	e100      	b.n	20000d2e <xvsprintf+0x666>
20000b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000b2e:	2b01      	cmp	r3, #1
20000b30:	dc03      	bgt.n	20000b3a <xvsprintf+0x472>
20000b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000b34:	2b00      	cmp	r3, #0
20000b36:	da04      	bge.n	20000b42 <xvsprintf+0x47a>
		    case 2:
			ulx = va_arg(marker,unsigned long long);
			optr += __llatox(optr,ulx,10,width,digits);
			break;
		    }
		break;
20000b38:	e0f9      	b.n	20000d2e <xvsprintf+0x666>
20000b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000b3c:	2b02      	cmp	r3, #2
20000b3e:	d017      	beq.n	20000b70 <xvsprintf+0x4a8>
20000b40:	e0f5      	b.n	20000d2e <xvsprintf+0x666>
			ux = va_arg(marker,unsigned int);
20000b42:	687b      	ldr	r3, [r7, #4]
20000b44:	1d1a      	adds	r2, r3, #4
20000b46:	607a      	str	r2, [r7, #4]
20000b48:	681b      	ldr	r3, [r3, #0]
20000b4a:	617b      	str	r3, [r7, #20]
			optr += __atox(optr,ux,10,width,digits);
20000b4c:	4b06      	ldr	r3, [pc, #24]	@ (20000b68 <xvsprintf+0x4a0>)
20000b4e:	9300      	str	r3, [sp, #0]
20000b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000b52:	220a      	movs	r2, #10
20000b54:	6979      	ldr	r1, [r7, #20]
20000b56:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000b58:	f7ff fcfe 	bl	20000558 <__atox>
20000b5c:	4603      	mov	r3, r0
20000b5e:	461a      	mov	r2, r3
20000b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000b62:	4413      	add	r3, r2
20000b64:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000b66:	e01f      	b.n	20000ba8 <xvsprintf+0x4e0>
20000b68:	200014ac 	.word	0x200014ac
20000b6c:	20001368 	.word	0x20001368
			ulx = va_arg(marker,unsigned long long);
20000b70:	687b      	ldr	r3, [r7, #4]
20000b72:	3307      	adds	r3, #7
20000b74:	f023 0307 	bic.w	r3, r3, #7
20000b78:	f103 0208 	add.w	r2, r3, #8
20000b7c:	607a      	str	r2, [r7, #4]
20000b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b82:	e9c7 2306 	strd	r2, r3, [r7, #24]
			optr += __llatox(optr,ulx,10,width,digits);
20000b86:	4b73      	ldr	r3, [pc, #460]	@ (20000d54 <xvsprintf+0x68c>)
20000b88:	9302      	str	r3, [sp, #8]
20000b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000b8c:	9301      	str	r3, [sp, #4]
20000b8e:	230a      	movs	r3, #10
20000b90:	9300      	str	r3, [sp, #0]
20000b92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20000b96:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000b98:	f7ff fd34 	bl	20000604 <__llatox>
20000b9c:	4603      	mov	r3, r0
20000b9e:	461a      	mov	r2, r3
20000ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000ba2:	4413      	add	r3, r2
20000ba4:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000ba6:	bf00      	nop
		break;
20000ba8:	e0c1      	b.n	20000d2e <xvsprintf+0x666>
20000baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000bac:	2b01      	cmp	r3, #1
20000bae:	dc03      	bgt.n	20000bb8 <xvsprintf+0x4f0>
20000bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000bb2:	2b00      	cmp	r3, #0
20000bb4:	da04      	bge.n	20000bc0 <xvsprintf+0x4f8>
			ulx = va_arg(marker,unsigned long long);
			optr += __llatox(optr,ulx,16,width,
				       (*iptr == 'X') ? digits : ldigits);
			break;
		    }
		break;
20000bb6:	e0ba      	b.n	20000d2e <xvsprintf+0x666>
20000bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000bba:	2b02      	cmp	r3, #2
20000bbc:	d019      	beq.n	20000bf2 <xvsprintf+0x52a>
20000bbe:	e0b6      	b.n	20000d2e <xvsprintf+0x666>
			ux = va_arg(marker,unsigned int);
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	1d1a      	adds	r2, r3, #4
20000bc4:	607a      	str	r2, [r7, #4]
20000bc6:	681b      	ldr	r3, [r3, #0]
20000bc8:	617b      	str	r3, [r7, #20]
				       (*iptr == 'X') ? digits : ldigits);
20000bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000bcc:	781b      	ldrb	r3, [r3, #0]
			optr += __atox(optr,ux,16,width,
20000bce:	2b58      	cmp	r3, #88	@ 0x58
20000bd0:	d101      	bne.n	20000bd6 <xvsprintf+0x50e>
20000bd2:	4b60      	ldr	r3, [pc, #384]	@ (20000d54 <xvsprintf+0x68c>)
20000bd4:	e000      	b.n	20000bd8 <xvsprintf+0x510>
20000bd6:	4b60      	ldr	r3, [pc, #384]	@ (20000d58 <xvsprintf+0x690>)
20000bd8:	9300      	str	r3, [sp, #0]
20000bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000bdc:	2210      	movs	r2, #16
20000bde:	6979      	ldr	r1, [r7, #20]
20000be0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000be2:	f7ff fcb9 	bl	20000558 <__atox>
20000be6:	4603      	mov	r3, r0
20000be8:	461a      	mov	r2, r3
20000bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000bec:	4413      	add	r3, r2
20000bee:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000bf0:	e021      	b.n	20000c36 <xvsprintf+0x56e>
			ulx = va_arg(marker,unsigned long long);
20000bf2:	687b      	ldr	r3, [r7, #4]
20000bf4:	3307      	adds	r3, #7
20000bf6:	f023 0307 	bic.w	r3, r3, #7
20000bfa:	f103 0208 	add.w	r2, r3, #8
20000bfe:	607a      	str	r2, [r7, #4]
20000c00:	e9d3 2300 	ldrd	r2, r3, [r3]
20000c04:	e9c7 2306 	strd	r2, r3, [r7, #24]
				       (*iptr == 'X') ? digits : ldigits);
20000c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000c0a:	781b      	ldrb	r3, [r3, #0]
			optr += __llatox(optr,ulx,16,width,
20000c0c:	2b58      	cmp	r3, #88	@ 0x58
20000c0e:	d101      	bne.n	20000c14 <xvsprintf+0x54c>
20000c10:	4b50      	ldr	r3, [pc, #320]	@ (20000d54 <xvsprintf+0x68c>)
20000c12:	e000      	b.n	20000c16 <xvsprintf+0x54e>
20000c14:	4b50      	ldr	r3, [pc, #320]	@ (20000d58 <xvsprintf+0x690>)
20000c16:	9302      	str	r3, [sp, #8]
20000c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000c1a:	9301      	str	r3, [sp, #4]
20000c1c:	2310      	movs	r3, #16
20000c1e:	9300      	str	r3, [sp, #0]
20000c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20000c24:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000c26:	f7ff fced 	bl	20000604 <__llatox>
20000c2a:	4603      	mov	r3, r0
20000c2c:	461a      	mov	r2, r3
20000c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000c30:	4413      	add	r3, r2
20000c32:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000c34:	bf00      	nop
		break;
20000c36:	e07a      	b.n	20000d2e <xvsprintf+0x666>
#ifdef __long64
		lx = va_arg(marker,long long);
		optr += __llatox(optr,lx,16,16,
				 (*iptr == 'P') ? digits : ldigits);
#else
		x = va_arg(marker,long);
20000c38:	687b      	ldr	r3, [r7, #4]
20000c3a:	1d1a      	adds	r2, r3, #4
20000c3c:	607a      	str	r2, [r7, #4]
20000c3e:	681b      	ldr	r3, [r3, #0]
20000c40:	64bb      	str	r3, [r7, #72]	@ 0x48
		optr += __atox(optr,x,16,8,
20000c42:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
			       (*iptr == 'P') ? digits : ldigits);
20000c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000c46:	781b      	ldrb	r3, [r3, #0]
		optr += __atox(optr,x,16,8,
20000c48:	2b50      	cmp	r3, #80	@ 0x50
20000c4a:	d101      	bne.n	20000c50 <xvsprintf+0x588>
20000c4c:	4b41      	ldr	r3, [pc, #260]	@ (20000d54 <xvsprintf+0x68c>)
20000c4e:	e000      	b.n	20000c52 <xvsprintf+0x58a>
20000c50:	4b41      	ldr	r3, [pc, #260]	@ (20000d58 <xvsprintf+0x690>)
20000c52:	9300      	str	r3, [sp, #0]
20000c54:	2308      	movs	r3, #8
20000c56:	2210      	movs	r2, #16
20000c58:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000c5a:	f7ff fc7d 	bl	20000558 <__atox>
20000c5e:	4603      	mov	r3, r0
20000c60:	461a      	mov	r2, r3
20000c62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000c64:	4413      	add	r3, r2
20000c66:	657b      	str	r3, [r7, #84]	@ 0x54
#endif
		break;
20000c68:	e061      	b.n	20000d2e <xvsprintf+0x666>
	    case 'w':
		x = va_arg(marker,unsigned int);
20000c6a:	687b      	ldr	r3, [r7, #4]
20000c6c:	1d1a      	adds	r2, r3, #4
20000c6e:	607a      	str	r2, [r7, #4]
20000c70:	681b      	ldr	r3, [r3, #0]
20000c72:	64bb      	str	r3, [r7, #72]	@ 0x48
	        x &= 0x0000FFFF;
20000c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000c76:	b29b      	uxth	r3, r3
20000c78:	64bb      	str	r3, [r7, #72]	@ 0x48
		optr += __atox(optr,x,16,4,digits);
20000c7a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
20000c7c:	4b35      	ldr	r3, [pc, #212]	@ (20000d54 <xvsprintf+0x68c>)
20000c7e:	9300      	str	r3, [sp, #0]
20000c80:	2304      	movs	r3, #4
20000c82:	2210      	movs	r2, #16
20000c84:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000c86:	f7ff fc67 	bl	20000558 <__atox>
20000c8a:	4603      	mov	r3, r0
20000c8c:	461a      	mov	r2, r3
20000c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000c90:	4413      	add	r3, r2
20000c92:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
20000c94:	e04b      	b.n	20000d2e <xvsprintf+0x666>
	    case 'b':
		x = va_arg(marker,unsigned int);
20000c96:	687b      	ldr	r3, [r7, #4]
20000c98:	1d1a      	adds	r2, r3, #4
20000c9a:	607a      	str	r2, [r7, #4]
20000c9c:	681b      	ldr	r3, [r3, #0]
20000c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
	        x &= 0x0000FF;
20000ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000ca2:	b2db      	uxtb	r3, r3
20000ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
		optr += __atox(optr,x,16,2,digits);
20000ca6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
20000ca8:	4b2a      	ldr	r3, [pc, #168]	@ (20000d54 <xvsprintf+0x68c>)
20000caa:	9300      	str	r3, [sp, #0]
20000cac:	2302      	movs	r3, #2
20000cae:	2210      	movs	r2, #16
20000cb0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000cb2:	f7ff fc51 	bl	20000558 <__atox>
20000cb6:	4603      	mov	r3, r0
20000cb8:	461a      	mov	r2, r3
20000cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000cbc:	4413      	add	r3, r2
20000cbe:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
20000cc0:	e035      	b.n	20000d2e <xvsprintf+0x666>
	    case 'Z':
		x = va_arg(marker,unsigned int);
20000cc2:	687b      	ldr	r3, [r7, #4]
20000cc4:	1d1a      	adds	r2, r3, #4
20000cc6:	607a      	str	r2, [r7, #4]
20000cc8:	681b      	ldr	r3, [r3, #0]
20000cca:	64bb      	str	r3, [r7, #72]	@ 0x48
		tmpptr = va_arg(marker,unsigned char *);
20000ccc:	687b      	ldr	r3, [r7, #4]
20000cce:	1d1a      	adds	r2, r3, #4
20000cd0:	607a      	str	r2, [r7, #4]
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		while (x) {
20000cd6:	e013      	b.n	20000d00 <xvsprintf+0x638>
		    optr += __atox(optr,*tmpptr++,16,2,digits);
20000cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000cda:	1c5a      	adds	r2, r3, #1
20000cdc:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000cde:	781b      	ldrb	r3, [r3, #0]
20000ce0:	4619      	mov	r1, r3
20000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (20000d54 <xvsprintf+0x68c>)
20000ce4:	9300      	str	r3, [sp, #0]
20000ce6:	2302      	movs	r3, #2
20000ce8:	2210      	movs	r2, #16
20000cea:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000cec:	f7ff fc34 	bl	20000558 <__atox>
20000cf0:	4603      	mov	r3, r0
20000cf2:	461a      	mov	r2, r3
20000cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000cf6:	4413      	add	r3, r2
20000cf8:	657b      	str	r3, [r7, #84]	@ 0x54
		    x--;
20000cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000cfc:	3b01      	subs	r3, #1
20000cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
		while (x) {
20000d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000d02:	2b00      	cmp	r3, #0
20000d04:	d1e8      	bne.n	20000cd8 <xvsprintf+0x610>
		    }
		break;
20000d06:	e012      	b.n	20000d2e <xvsprintf+0x666>
	    case 'c':
		x = va_arg(marker, int);
20000d08:	687b      	ldr	r3, [r7, #4]
20000d0a:	1d1a      	adds	r2, r3, #4
20000d0c:	607a      	str	r2, [r7, #4]
20000d0e:	681b      	ldr	r3, [r3, #0]
20000d10:	64bb      	str	r3, [r7, #72]	@ 0x48
		*optr++ = x & 0xff;
20000d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000d14:	1c5a      	adds	r2, r3, #1
20000d16:	657a      	str	r2, [r7, #84]	@ 0x54
20000d18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
20000d1a:	b2d2      	uxtb	r2, r2
20000d1c:	701a      	strb	r2, [r3, #0]
		break;
20000d1e:	e006      	b.n	20000d2e <xvsprintf+0x666>

	    default:
		*optr++ = *iptr;
20000d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000d22:	1c5a      	adds	r2, r3, #1
20000d24:	657a      	str	r2, [r7, #84]	@ 0x54
20000d26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
20000d28:	7812      	ldrb	r2, [r2, #0]
20000d2a:	701a      	strb	r2, [r3, #0]
		break;
20000d2c:	bf00      	nop
	    }
	iptr++;
20000d2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000d30:	3301      	adds	r3, #1
20000d32:	653b      	str	r3, [r7, #80]	@ 0x50
    while (*iptr) {
20000d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000d36:	781b      	ldrb	r3, [r3, #0]
20000d38:	2b00      	cmp	r3, #0
20000d3a:	f47f acd4 	bne.w	200006e6 <xvsprintf+0x1e>
	}

 //   *optr++ = '\r';
 //   *optr++ = '\n';
    *optr = '\0';
20000d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000d40:	2200      	movs	r2, #0
20000d42:	701a      	strb	r2, [r3, #0]

    return (optr - outbuf);
20000d44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
20000d46:	68fb      	ldr	r3, [r7, #12]
20000d48:	1ad3      	subs	r3, r2, r3
}
20000d4a:	4618      	mov	r0, r3
20000d4c:	3758      	adds	r7, #88	@ 0x58
20000d4e:	46bd      	mov	sp, r7
20000d50:	bdb0      	pop	{r4, r5, r7, pc}
20000d52:	bf00      	nop
20000d54:	200014ac 	.word	0x200014ac
20000d58:	200014c0 	.word	0x200014c0

20000d5c <printf>:
    *  Return value:
    *  	   number of bytes written
    ********************************************************************* */

int printf(const char *templat,...)
{
20000d5c:	b40f      	push	{r0, r1, r2, r3}
20000d5e:	b580      	push	{r7, lr}
20000d60:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
20000d64:	af00      	add	r7, sp, #0
    va_list marker;
    int count;
    char buffer[512];

    va_start(marker,templat);
20000d66:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
20000d6a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
    count = xvsprintf(buffer,templat,marker);
20000d6e:	1d3b      	adds	r3, r7, #4
20000d70:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
20000d74:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
20000d78:	4618      	mov	r0, r3
20000d7a:	f7ff fca5 	bl	200006c8 <xvsprintf>
20000d7e:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
    va_end(marker);


    for(int i = 0; i< count; i++){
20000d82:	2300      	movs	r3, #0
20000d84:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
20000d88:	e00f      	b.n	20000daa <printf+0x4e>
    	putc(buffer[i]);
20000d8a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
20000d8e:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
20000d92:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
20000d96:	4413      	add	r3, r2
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	4618      	mov	r0, r3
20000d9c:	f000 f816 	bl	20000dcc <putc>
    for(int i = 0; i< count; i++){
20000da0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
20000da4:	3301      	adds	r3, #1
20000da6:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
20000daa:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
20000dae:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
20000db2:	429a      	cmp	r2, r3
20000db4:	dbe9      	blt.n	20000d8a <printf+0x2e>
    }

    //putc('\r');
    //putc('\n');

    return count;
20000db6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
}
20000dba:	4618      	mov	r0, r3
20000dbc:	f507 7704 	add.w	r7, r7, #528	@ 0x210
20000dc0:	46bd      	mov	sp, r7
20000dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20000dc6:	b004      	add	sp, #16
20000dc8:	4770      	bx	lr
	...

20000dcc <putc>:
	for(int i = 0; i< strlen(str); i++)
		putc(*str++);
}


void putc(char c) {
20000dcc:	b480      	push	{r7}
20000dce:	b085      	sub	sp, #20
20000dd0:	af00      	add	r7, sp, #0
20000dd2:	4603      	mov	r3, r0
20000dd4:	71fb      	strb	r3, [r7, #7]
    volatile uint32_t *usart_isr = (volatile uint32_t *)(0x40013800 + 0x1C);
20000dd6:	4b10      	ldr	r3, [pc, #64]	@ (20000e18 <putc+0x4c>)
20000dd8:	60fb      	str	r3, [r7, #12]
    volatile uint32_t *usart_tdr = (volatile uint32_t *)(0x40013800 + 0x28);
20000dda:	4b10      	ldr	r3, [pc, #64]	@ (20000e1c <putc+0x50>)
20000ddc:	60bb      	str	r3, [r7, #8]

    if (c == '\n'){
20000dde:	79fb      	ldrb	r3, [r7, #7]
20000de0:	2b0a      	cmp	r3, #10
20000de2:	d109      	bne.n	20000df8 <putc+0x2c>

		 while((*usart_isr & (1 << 7)) == 0);
20000de4:	bf00      	nop
20000de6:	68fb      	ldr	r3, [r7, #12]
20000de8:	681b      	ldr	r3, [r3, #0]
20000dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000dee:	2b00      	cmp	r3, #0
20000df0:	d0f9      	beq.n	20000de6 <putc+0x1a>
		 *usart_tdr = '\r';
20000df2:	68bb      	ldr	r3, [r7, #8]
20000df4:	220d      	movs	r2, #13
20000df6:	601a      	str	r2, [r3, #0]
    }

    while((*usart_isr & (1 << 7)) == 0);
20000df8:	bf00      	nop
20000dfa:	68fb      	ldr	r3, [r7, #12]
20000dfc:	681b      	ldr	r3, [r3, #0]
20000dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000e02:	2b00      	cmp	r3, #0
20000e04:	d0f9      	beq.n	20000dfa <putc+0x2e>



    *usart_tdr = c;
20000e06:	79fa      	ldrb	r2, [r7, #7]
20000e08:	68bb      	ldr	r3, [r7, #8]
20000e0a:	601a      	str	r2, [r3, #0]
}
20000e0c:	bf00      	nop
20000e0e:	3714      	adds	r7, #20
20000e10:	46bd      	mov	sp, r7
20000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e16:	4770      	bx	lr
20000e18:	4001381c 	.word	0x4001381c
20000e1c:	40013828 	.word	0x40013828

20000e20 <poll_for_input>:
char getc(); // Function to get a character from USART

#define BUFFER_SIZE 100


void poll_for_input(char *buffer, int size) {
20000e20:	b580      	push	{r7, lr}
20000e22:	b084      	sub	sp, #16
20000e24:	af00      	add	r7, sp, #0
20000e26:	6078      	str	r0, [r7, #4]
20000e28:	6039      	str	r1, [r7, #0]
    int index = 0;
20000e2a:	2300      	movs	r3, #0
20000e2c:	60fb      	str	r3, [r7, #12]
    char ch;

    printf("STS>");
20000e2e:	4822      	ldr	r0, [pc, #136]	@ (20000eb8 <poll_for_input+0x98>)
20000e30:	f7ff ff94 	bl	20000d5c <printf>

    while (1) {
        ch = getc();
20000e34:	f000 f862 	bl	20000efc <getc>
20000e38:	4603      	mov	r3, r0
20000e3a:	72fb      	strb	r3, [r7, #11]
        if (ch == '\r' || ch == '\n') {
20000e3c:	7afb      	ldrb	r3, [r7, #11]
20000e3e:	2b0d      	cmp	r3, #13
20000e40:	d002      	beq.n	20000e48 <poll_for_input+0x28>
20000e42:	7afb      	ldrb	r3, [r7, #11]
20000e44:	2b0a      	cmp	r3, #10
20000e46:	d113      	bne.n	20000e70 <poll_for_input+0x50>

			if (index == 0) {
20000e48:	68fb      	ldr	r3, [r7, #12]
20000e4a:	2b00      	cmp	r3, #0
20000e4c:	d106      	bne.n	20000e5c <poll_for_input+0x3c>
				printf("\n");
20000e4e:	481b      	ldr	r0, [pc, #108]	@ (20000ebc <poll_for_input+0x9c>)
20000e50:	f7ff ff84 	bl	20000d5c <printf>
				printf("STS> ");
20000e54:	481a      	ldr	r0, [pc, #104]	@ (20000ec0 <poll_for_input+0xa0>)
20000e56:	f7ff ff81 	bl	20000d5c <printf>
				continue;
20000e5a:	e027      	b.n	20000eac <poll_for_input+0x8c>
			}
            buffer[index] = '\0';
20000e5c:	68fb      	ldr	r3, [r7, #12]
20000e5e:	687a      	ldr	r2, [r7, #4]
20000e60:	4413      	add	r3, r2
20000e62:	2200      	movs	r2, #0
20000e64:	701a      	strb	r2, [r3, #0]
            printf("\nCaptured command: '%s'\n", buffer);
20000e66:	6879      	ldr	r1, [r7, #4]
20000e68:	4816      	ldr	r0, [pc, #88]	@ (20000ec4 <poll_for_input+0xa4>)
20000e6a:	f7ff ff77 	bl	20000d5c <printf>
            break;
20000e6e:	e01e      	b.n	20000eae <poll_for_input+0x8e>
        } else if (ch == '\b' && index > 0) {
20000e70:	7afb      	ldrb	r3, [r7, #11]
20000e72:	2b08      	cmp	r3, #8
20000e74:	d109      	bne.n	20000e8a <poll_for_input+0x6a>
20000e76:	68fb      	ldr	r3, [r7, #12]
20000e78:	2b00      	cmp	r3, #0
20000e7a:	dd06      	ble.n	20000e8a <poll_for_input+0x6a>
            index--;
20000e7c:	68fb      	ldr	r3, [r7, #12]
20000e7e:	3b01      	subs	r3, #1
20000e80:	60fb      	str	r3, [r7, #12]
            printf("\b \b");
20000e82:	4811      	ldr	r0, [pc, #68]	@ (20000ec8 <poll_for_input+0xa8>)
20000e84:	f7ff ff6a 	bl	20000d5c <printf>
20000e88:	e010      	b.n	20000eac <poll_for_input+0x8c>
        } else if (index < size - 1) {
20000e8a:	683b      	ldr	r3, [r7, #0]
20000e8c:	3b01      	subs	r3, #1
20000e8e:	68fa      	ldr	r2, [r7, #12]
20000e90:	429a      	cmp	r2, r3
20000e92:	dacf      	bge.n	20000e34 <poll_for_input+0x14>
            buffer[index++] = ch;
20000e94:	68fb      	ldr	r3, [r7, #12]
20000e96:	1c5a      	adds	r2, r3, #1
20000e98:	60fa      	str	r2, [r7, #12]
20000e9a:	461a      	mov	r2, r3
20000e9c:	687b      	ldr	r3, [r7, #4]
20000e9e:	4413      	add	r3, r2
20000ea0:	7afa      	ldrb	r2, [r7, #11]
20000ea2:	701a      	strb	r2, [r3, #0]
            putc(ch);
20000ea4:	7afb      	ldrb	r3, [r7, #11]
20000ea6:	4618      	mov	r0, r3
20000ea8:	f7ff ff90 	bl	20000dcc <putc>
        ch = getc();
20000eac:	e7c2      	b.n	20000e34 <poll_for_input+0x14>
        }
    }
}
20000eae:	bf00      	nop
20000eb0:	3710      	adds	r7, #16
20000eb2:	46bd      	mov	sp, r7
20000eb4:	bd80      	pop	{r7, pc}
20000eb6:	bf00      	nop
20000eb8:	20001384 	.word	0x20001384
20000ebc:	2000138c 	.word	0x2000138c
20000ec0:	20001390 	.word	0x20001390
20000ec4:	20001398 	.word	0x20001398
20000ec8:	200013b4 	.word	0x200013b4

20000ecc <sts_main>:

void sts_main(int a, int b) {
20000ecc:	b580      	push	{r7, lr}
20000ece:	b09c      	sub	sp, #112	@ 0x70
20000ed0:	af00      	add	r7, sp, #0
20000ed2:	6078      	str	r0, [r7, #4]
20000ed4:	6039      	str	r1, [r7, #0]
    char input_buffer[BUFFER_SIZE];

	while(1){

		poll_for_input(input_buffer, BUFFER_SIZE);
20000ed6:	f107 030c 	add.w	r3, r7, #12
20000eda:	2164      	movs	r1, #100	@ 0x64
20000edc:	4618      	mov	r0, r3
20000ede:	f7ff ff9f 	bl	20000e20 <poll_for_input>


		//printf("\nYou entered: %s\n", input_buffer);

		execute_command(input_buffer);
20000ee2:	f107 030c 	add.w	r3, r7, #12
20000ee6:	4618      	mov	r0, r3
20000ee8:	f000 f868 	bl	20000fbc <execute_command>

		printf("\n");
20000eec:	4802      	ldr	r0, [pc, #8]	@ (20000ef8 <sts_main+0x2c>)
20000eee:	f7ff ff35 	bl	20000d5c <printf>
	while(1){
20000ef2:	bf00      	nop
20000ef4:	e7ef      	b.n	20000ed6 <sts_main+0xa>
20000ef6:	bf00      	nop
20000ef8:	2000138c 	.word	0x2000138c

20000efc <getc>:
	}

}


char getc() {
20000efc:	b480      	push	{r7}
20000efe:	b083      	sub	sp, #12
20000f00:	af00      	add	r7, sp, #0
    volatile uint32_t *usart_isr = (volatile uint32_t *)(0x40013800 + 0x1C);
20000f02:	4b0a      	ldr	r3, [pc, #40]	@ (20000f2c <getc+0x30>)
20000f04:	607b      	str	r3, [r7, #4]
    volatile uint32_t *usart_rdr = (volatile uint32_t *)(0x40013800 + 0x24);
20000f06:	4b0a      	ldr	r3, [pc, #40]	@ (20000f30 <getc+0x34>)
20000f08:	603b      	str	r3, [r7, #0]


    while ((*usart_isr & (1 << 5)) == 0);
20000f0a:	bf00      	nop
20000f0c:	687b      	ldr	r3, [r7, #4]
20000f0e:	681b      	ldr	r3, [r3, #0]
20000f10:	f003 0320 	and.w	r3, r3, #32
20000f14:	2b00      	cmp	r3, #0
20000f16:	d0f9      	beq.n	20000f0c <getc+0x10>

    return (char)(*usart_rdr & 0xFF);
20000f18:	683b      	ldr	r3, [r7, #0]
20000f1a:	681b      	ldr	r3, [r3, #0]
20000f1c:	b2db      	uxtb	r3, r3
}
20000f1e:	4618      	mov	r0, r3
20000f20:	370c      	adds	r7, #12
20000f22:	46bd      	mov	sp, r7
20000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f28:	4770      	bx	lr
20000f2a:	bf00      	nop
20000f2c:	4001381c 	.word	0x4001381c
20000f30:	40013824 	.word	0x40013824

20000f34 <split_string>:


#define COMMAND_COUNT (sizeof(command_list) / sizeof(CommandWithArgs))


char* split_string(char* str, char delimiter, int* current_position) {
20000f34:	b480      	push	{r7}
20000f36:	b087      	sub	sp, #28
20000f38:	af00      	add	r7, sp, #0
20000f3a:	60f8      	str	r0, [r7, #12]
20000f3c:	460b      	mov	r3, r1
20000f3e:	607a      	str	r2, [r7, #4]
20000f40:	72fb      	strb	r3, [r7, #11]
    if (str[*current_position] == '\0') {
20000f42:	687b      	ldr	r3, [r7, #4]
20000f44:	681b      	ldr	r3, [r3, #0]
20000f46:	461a      	mov	r2, r3
20000f48:	68fb      	ldr	r3, [r7, #12]
20000f4a:	4413      	add	r3, r2
20000f4c:	781b      	ldrb	r3, [r3, #0]
20000f4e:	2b00      	cmp	r3, #0
20000f50:	d101      	bne.n	20000f56 <split_string+0x22>
        return NULL;
20000f52:	2300      	movs	r3, #0
20000f54:	e02b      	b.n	20000fae <split_string+0x7a>
    }

    char* token = &str[*current_position];
20000f56:	687b      	ldr	r3, [r7, #4]
20000f58:	681b      	ldr	r3, [r3, #0]
20000f5a:	461a      	mov	r2, r3
20000f5c:	68fb      	ldr	r3, [r7, #12]
20000f5e:	4413      	add	r3, r2
20000f60:	617b      	str	r3, [r7, #20]
    while (str[*current_position] != '\0') {
20000f62:	e01b      	b.n	20000f9c <split_string+0x68>
        if (str[*current_position] == delimiter) {
20000f64:	687b      	ldr	r3, [r7, #4]
20000f66:	681b      	ldr	r3, [r3, #0]
20000f68:	461a      	mov	r2, r3
20000f6a:	68fb      	ldr	r3, [r7, #12]
20000f6c:	4413      	add	r3, r2
20000f6e:	781b      	ldrb	r3, [r3, #0]
20000f70:	7afa      	ldrb	r2, [r7, #11]
20000f72:	429a      	cmp	r2, r3
20000f74:	d10d      	bne.n	20000f92 <split_string+0x5e>
            str[*current_position] = '\0';
20000f76:	687b      	ldr	r3, [r7, #4]
20000f78:	681b      	ldr	r3, [r3, #0]
20000f7a:	461a      	mov	r2, r3
20000f7c:	68fb      	ldr	r3, [r7, #12]
20000f7e:	4413      	add	r3, r2
20000f80:	2200      	movs	r2, #0
20000f82:	701a      	strb	r2, [r3, #0]
            (*current_position)++;
20000f84:	687b      	ldr	r3, [r7, #4]
20000f86:	681b      	ldr	r3, [r3, #0]
20000f88:	1c5a      	adds	r2, r3, #1
20000f8a:	687b      	ldr	r3, [r7, #4]
20000f8c:	601a      	str	r2, [r3, #0]
            return token;
20000f8e:	697b      	ldr	r3, [r7, #20]
20000f90:	e00d      	b.n	20000fae <split_string+0x7a>
        }
        (*current_position)++;
20000f92:	687b      	ldr	r3, [r7, #4]
20000f94:	681b      	ldr	r3, [r3, #0]
20000f96:	1c5a      	adds	r2, r3, #1
20000f98:	687b      	ldr	r3, [r7, #4]
20000f9a:	601a      	str	r2, [r3, #0]
    while (str[*current_position] != '\0') {
20000f9c:	687b      	ldr	r3, [r7, #4]
20000f9e:	681b      	ldr	r3, [r3, #0]
20000fa0:	461a      	mov	r2, r3
20000fa2:	68fb      	ldr	r3, [r7, #12]
20000fa4:	4413      	add	r3, r2
20000fa6:	781b      	ldrb	r3, [r3, #0]
20000fa8:	2b00      	cmp	r3, #0
20000faa:	d1db      	bne.n	20000f64 <split_string+0x30>
    }

    return token;
20000fac:	697b      	ldr	r3, [r7, #20]
}
20000fae:	4618      	mov	r0, r3
20000fb0:	371c      	adds	r7, #28
20000fb2:	46bd      	mov	sp, r7
20000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
20000fb8:	4770      	bx	lr
	...

20000fbc <execute_command>:


void execute_command(char *input_buffer) {
20000fbc:	b580      	push	{r7, lr}
20000fbe:	b0ea      	sub	sp, #424	@ 0x1a8
20000fc0:	af00      	add	r7, sp, #0
20000fc2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
20000fc6:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
20000fca:	6018      	str	r0, [r3, #0]
    char *argv[BUFFER_SIZE];
    int argc = 0;
20000fcc:	2300      	movs	r3, #0
20000fce:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    int current_position = 0;
20000fd2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
20000fd6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
20000fda:	2200      	movs	r2, #0
20000fdc:	601a      	str	r2, [r3, #0]

    char *token = split_string(input_buffer, ' ', &current_position);
20000fde:	f107 0208 	add.w	r2, r7, #8
20000fe2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
20000fe6:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
20000fea:	2120      	movs	r1, #32
20000fec:	6818      	ldr	r0, [r3, #0]
20000fee:	f7ff ffa1 	bl	20000f34 <split_string>
20000ff2:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
    while (token != NULL && argc < BUFFER_SIZE) {
20000ff6:	e018      	b.n	2000102a <execute_command+0x6e>
        argv[argc++] = token;
20000ff8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
20000ffc:	1c5a      	adds	r2, r3, #1
20000ffe:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
20001002:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
20001006:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
2000100a:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
2000100e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        token = split_string(input_buffer, ' ', &current_position);
20001012:	f107 0208 	add.w	r2, r7, #8
20001016:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
2000101a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
2000101e:	2120      	movs	r1, #32
20001020:	6818      	ldr	r0, [r3, #0]
20001022:	f7ff ff87 	bl	20000f34 <split_string>
20001026:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
    while (token != NULL && argc < BUFFER_SIZE) {
2000102a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
2000102e:	2b00      	cmp	r3, #0
20001030:	d003      	beq.n	2000103a <execute_command+0x7e>
20001032:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
20001036:	2b63      	cmp	r3, #99	@ 0x63
20001038:	ddde      	ble.n	20000ff8 <execute_command+0x3c>
    }

    for (int i = 0; i < COMMAND_COUNT; i++) {
2000103a:	2300      	movs	r3, #0
2000103c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
20001040:	e022      	b.n	20001088 <execute_command+0xcc>
        if (strcmp(argv[0], command_list[i].name) == 0) {
20001042:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
20001046:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
2000104a:	681a      	ldr	r2, [r3, #0]
2000104c:	4917      	ldr	r1, [pc, #92]	@ (200010ac <execute_command+0xf0>)
2000104e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
20001052:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
20001056:	4619      	mov	r1, r3
20001058:	4610      	mov	r0, r2
2000105a:	f7ff f893 	bl	20000184 <strcmp>
2000105e:	4603      	mov	r3, r0
20001060:	2b00      	cmp	r3, #0
20001062:	d10c      	bne.n	2000107e <execute_command+0xc2>
            command_list[i].function(argc, argv);
20001064:	4a11      	ldr	r2, [pc, #68]	@ (200010ac <execute_command+0xf0>)
20001066:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
2000106a:	00db      	lsls	r3, r3, #3
2000106c:	4413      	add	r3, r2
2000106e:	685b      	ldr	r3, [r3, #4]
20001070:	f107 020c 	add.w	r2, r7, #12
20001074:	4611      	mov	r1, r2
20001076:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
2000107a:	4798      	blx	r3
2000107c:	e011      	b.n	200010a2 <execute_command+0xe6>
    for (int i = 0; i < COMMAND_COUNT; i++) {
2000107e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
20001082:	3301      	adds	r3, #1
20001084:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
20001088:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
2000108c:	2b04      	cmp	r3, #4
2000108e:	d9d8      	bls.n	20001042 <execute_command+0x86>
            return;
        }
    }
    printf("Unknown command: %s\n", argv[0]);
20001090:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
20001094:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
20001098:	681b      	ldr	r3, [r3, #0]
2000109a:	4619      	mov	r1, r3
2000109c:	4804      	ldr	r0, [pc, #16]	@ (200010b0 <execute_command+0xf4>)
2000109e:	f7ff fe5d 	bl	20000d5c <printf>
}
200010a2:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
200010a6:	46bd      	mov	sp, r7
200010a8:	bd80      	pop	{r7, pc}
200010aa:	bf00      	nop
200010ac:	200015e4 	.word	0x200015e4
200010b0:	200013dc 	.word	0x200013dc

200010b4 <simple_command>:


void simple_command(int argc, char *argv[]) {
200010b4:	b580      	push	{r7, lr}
200010b6:	b082      	sub	sp, #8
200010b8:	af00      	add	r7, sp, #0
200010ba:	6078      	str	r0, [r7, #4]
200010bc:	6039      	str	r1, [r7, #0]
    printf("Executing simple command.\n");
200010be:	480c      	ldr	r0, [pc, #48]	@ (200010f0 <simple_command+0x3c>)
200010c0:	f7ff fe4c 	bl	20000d5c <printf>
    if (argc > 1) {
200010c4:	687b      	ldr	r3, [r7, #4]
200010c6:	2b01      	cmp	r3, #1
200010c8:	dd0d      	ble.n	200010e6 <simple_command+0x32>
        printf("Argument: %s\n", argv[1]);
200010ca:	683b      	ldr	r3, [r7, #0]
200010cc:	3304      	adds	r3, #4
200010ce:	681b      	ldr	r3, [r3, #0]
200010d0:	4619      	mov	r1, r3
200010d2:	4808      	ldr	r0, [pc, #32]	@ (200010f4 <simple_command+0x40>)
200010d4:	f7ff fe42 	bl	20000d5c <printf>
        printf("Argument: %s\n", argv[2]);
200010d8:	683b      	ldr	r3, [r7, #0]
200010da:	3308      	adds	r3, #8
200010dc:	681b      	ldr	r3, [r3, #0]
200010de:	4619      	mov	r1, r3
200010e0:	4804      	ldr	r0, [pc, #16]	@ (200010f4 <simple_command+0x40>)
200010e2:	f7ff fe3b 	bl	20000d5c <printf>

    }
}
200010e6:	bf00      	nop
200010e8:	3708      	adds	r7, #8
200010ea:	46bd      	mov	sp, r7
200010ec:	bd80      	pop	{r7, pc}
200010ee:	bf00      	nop
200010f0:	200013f4 	.word	0x200013f4
200010f4:	20001410 	.word	0x20001410

200010f8 <help_command>:

void help_command(int argc, char *argv[]) {
200010f8:	b580      	push	{r7, lr}
200010fa:	b084      	sub	sp, #16
200010fc:	af00      	add	r7, sp, #0
200010fe:	6078      	str	r0, [r7, #4]
20001100:	6039      	str	r1, [r7, #0]
    printf("Available commands:\n");
20001102:	480c      	ldr	r0, [pc, #48]	@ (20001134 <help_command+0x3c>)
20001104:	f7ff fe2a 	bl	20000d5c <printf>
    for (int i = 0; i < COMMAND_COUNT; i++) {
20001108:	2300      	movs	r3, #0
2000110a:	60fb      	str	r3, [r7, #12]
2000110c:	e00a      	b.n	20001124 <help_command+0x2c>
        printf("- %s\n", command_list[i].name);
2000110e:	4a0a      	ldr	r2, [pc, #40]	@ (20001138 <help_command+0x40>)
20001110:	68fb      	ldr	r3, [r7, #12]
20001112:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
20001116:	4619      	mov	r1, r3
20001118:	4808      	ldr	r0, [pc, #32]	@ (2000113c <help_command+0x44>)
2000111a:	f7ff fe1f 	bl	20000d5c <printf>
    for (int i = 0; i < COMMAND_COUNT; i++) {
2000111e:	68fb      	ldr	r3, [r7, #12]
20001120:	3301      	adds	r3, #1
20001122:	60fb      	str	r3, [r7, #12]
20001124:	68fb      	ldr	r3, [r7, #12]
20001126:	2b04      	cmp	r3, #4
20001128:	d9f1      	bls.n	2000110e <help_command+0x16>
    }
}
2000112a:	bf00      	nop
2000112c:	bf00      	nop
2000112e:	3710      	adds	r7, #16
20001130:	46bd      	mov	sp, r7
20001132:	bd80      	pop	{r7, pc}
20001134:	20001420 	.word	0x20001420
20001138:	200015e4 	.word	0x200015e4
2000113c:	20001438 	.word	0x20001438

20001140 <ui_cmd_display>:

#include <stdint.h>
void ui_cmd_display(int argc, char *argv[]) {
20001140:	b580      	push	{r7, lr}
20001142:	b088      	sub	sp, #32
20001144:	af00      	add	r7, sp, #0
20001146:	6078      	str	r0, [r7, #4]
20001148:	6039      	str	r1, [r7, #0]

    printf("Printing out Memory Contents:\n");
2000114a:	4813      	ldr	r0, [pc, #76]	@ (20001198 <ui_cmd_display+0x58>)
2000114c:	f7ff fe06 	bl	20000d5c <printf>

    char *addr_str = argv[1];
20001150:	683b      	ldr	r3, [r7, #0]
20001152:	685b      	ldr	r3, [r3, #4]
20001154:	61bb      	str	r3, [r7, #24]
    uint32_t address = (uint32_t)strtoul(addr_str, NULL, 0);
20001156:	2200      	movs	r2, #0
20001158:	2100      	movs	r1, #0
2000115a:	69b8      	ldr	r0, [r7, #24]
2000115c:	f000 f8ee 	bl	2000133c <strtoul>
20001160:	4603      	mov	r3, r0
20001162:	61fb      	str	r3, [r7, #28]

    volatile uint32_t *ptr;
    uint32_t value;

    volatile uint32_t *ADDRESS_END = (uint32_t *)(address + 0x32);
20001164:	69fb      	ldr	r3, [r7, #28]
20001166:	3332      	adds	r3, #50	@ 0x32
20001168:	617b      	str	r3, [r7, #20]

    for (; address <= (uint32_t)ADDRESS_END; address += 0x4) {
2000116a:	e00c      	b.n	20001186 <ui_cmd_display+0x46>
        ptr = (volatile uint32_t *)address;
2000116c:	69fb      	ldr	r3, [r7, #28]
2000116e:	613b      	str	r3, [r7, #16]
        value = *ptr;
20001170:	693b      	ldr	r3, [r7, #16]
20001172:	681b      	ldr	r3, [r3, #0]
20001174:	60fb      	str	r3, [r7, #12]

        printf("0x%08X: 0x%08X\n", address, value);
20001176:	68fa      	ldr	r2, [r7, #12]
20001178:	69f9      	ldr	r1, [r7, #28]
2000117a:	4808      	ldr	r0, [pc, #32]	@ (2000119c <ui_cmd_display+0x5c>)
2000117c:	f7ff fdee 	bl	20000d5c <printf>
    for (; address <= (uint32_t)ADDRESS_END; address += 0x4) {
20001180:	69fb      	ldr	r3, [r7, #28]
20001182:	3304      	adds	r3, #4
20001184:	61fb      	str	r3, [r7, #28]
20001186:	697b      	ldr	r3, [r7, #20]
20001188:	69fa      	ldr	r2, [r7, #28]
2000118a:	429a      	cmp	r2, r3
2000118c:	d9ee      	bls.n	2000116c <ui_cmd_display+0x2c>
    }
}
2000118e:	bf00      	nop
20001190:	bf00      	nop
20001192:	3720      	adds	r7, #32
20001194:	46bd      	mov	sp, r7
20001196:	bd80      	pop	{r7, pc}
20001198:	20001440 	.word	0x20001440
2000119c:	20001460 	.word	0x20001460

200011a0 <ui_cmd_edit>:


void ui_cmd_edit(int argc, char *argv[])
{
200011a0:	b580      	push	{r7, lr}
200011a2:	b088      	sub	sp, #32
200011a4:	af00      	add	r7, sp, #0
200011a6:	6078      	str	r0, [r7, #4]
200011a8:	6039      	str	r1, [r7, #0]

	volatile uint32_t *ptr;
	uint32_t value;

	char *addr_str = argv[1];
200011aa:	683b      	ldr	r3, [r7, #0]
200011ac:	685b      	ldr	r3, [r3, #4]
200011ae:	61fb      	str	r3, [r7, #28]
    uint32_t address = (uint32_t)strtoul(addr_str, NULL, 0);
200011b0:	2200      	movs	r2, #0
200011b2:	2100      	movs	r1, #0
200011b4:	69f8      	ldr	r0, [r7, #28]
200011b6:	f000 f8c1 	bl	2000133c <strtoul>
200011ba:	4603      	mov	r3, r0
200011bc:	61bb      	str	r3, [r7, #24]

    ptr = (volatile uint32_t *)address;
200011be:	69bb      	ldr	r3, [r7, #24]
200011c0:	617b      	str	r3, [r7, #20]
    value = *ptr;
200011c2:	697b      	ldr	r3, [r7, #20]
200011c4:	681b      	ldr	r3, [r3, #0]
200011c6:	613b      	str	r3, [r7, #16]

    printf("original value 0x%08X: 0x%08X\n", address, value);
200011c8:	693a      	ldr	r2, [r7, #16]
200011ca:	69b9      	ldr	r1, [r7, #24]
200011cc:	480d      	ldr	r0, [pc, #52]	@ (20001204 <ui_cmd_edit+0x64>)
200011ce:	f7ff fdc5 	bl	20000d5c <printf>


	char *value_str = argv[2];
200011d2:	683b      	ldr	r3, [r7, #0]
200011d4:	689b      	ldr	r3, [r3, #8]
200011d6:	60fb      	str	r3, [r7, #12]
	uint32_t value2 = (uint32_t)strtoul(value_str, NULL, 0);
200011d8:	2200      	movs	r2, #0
200011da:	2100      	movs	r1, #0
200011dc:	68f8      	ldr	r0, [r7, #12]
200011de:	f000 f8ad 	bl	2000133c <strtoul>
200011e2:	4603      	mov	r3, r0
200011e4:	60bb      	str	r3, [r7, #8]




    ptr = (volatile uint32_t *)address;
200011e6:	69bb      	ldr	r3, [r7, #24]
200011e8:	617b      	str	r3, [r7, #20]
    *ptr = value;
200011ea:	697b      	ldr	r3, [r7, #20]
200011ec:	693a      	ldr	r2, [r7, #16]
200011ee:	601a      	str	r2, [r3, #0]

    printf("new value 0x%08X: 0x%08X\n", address, value2);
200011f0:	68ba      	ldr	r2, [r7, #8]
200011f2:	69b9      	ldr	r1, [r7, #24]
200011f4:	4804      	ldr	r0, [pc, #16]	@ (20001208 <ui_cmd_edit+0x68>)
200011f6:	f7ff fdb1 	bl	20000d5c <printf>

}
200011fa:	bf00      	nop
200011fc:	3720      	adds	r7, #32
200011fe:	46bd      	mov	sp, r7
20001200:	bd80      	pop	{r7, pc}
20001202:	bf00      	nop
20001204:	20001470 	.word	0x20001470
20001208:	20001490 	.word	0x20001490

2000120c <LED_Init>:
#define GPIOA_BASE 0x48000000
#define GPIOB_BASE 0x48000400
#define GPIOC_BASE 0x48000800


void LED_Init(void) {
2000120c:	b480      	push	{r7}
2000120e:	b083      	sub	sp, #12
20001210:	af00      	add	r7, sp, #0

    *(volatile uint32_t *)(0x40007004) = 0x200;
20001212:	4b0e      	ldr	r3, [pc, #56]	@ (2000124c <LED_Init+0x40>)
20001214:	f44f 7200 	mov.w	r2, #512	@ 0x200
20001218:	601a      	str	r2, [r3, #0]

    volatile uint32_t *RCC_AHB2ENR = (uint32_t *)(0x40021000 + 0x4C);
2000121a:	4b0d      	ldr	r3, [pc, #52]	@ (20001250 <LED_Init+0x44>)
2000121c:	607b      	str	r3, [r7, #4]
    *RCC_AHB2ENR = 0xf;
2000121e:	687b      	ldr	r3, [r7, #4]
20001220:	220f      	movs	r2, #15
20001222:	601a      	str	r2, [r3, #0]


    volatile uint32_t *RCC_APB1ENR1 = (uint32_t *)(0x40021000 + 0x58);
20001224:	4b0b      	ldr	r3, [pc, #44]	@ (20001254 <LED_Init+0x48>)
20001226:	603b      	str	r3, [r7, #0]
    *RCC_APB1ENR1 |= (1 << 28);
20001228:	683b      	ldr	r3, [r7, #0]
2000122a:	681b      	ldr	r3, [r3, #0]
2000122c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
20001230:	683b      	ldr	r3, [r7, #0]
20001232:	601a      	str	r2, [r3, #0]


    *(volatile uint32_t *)(GPIOC_BASE) = 0x4; // turn on
20001234:	4b08      	ldr	r3, [pc, #32]	@ (20001258 <LED_Init+0x4c>)
20001236:	2204      	movs	r2, #4
20001238:	601a      	str	r2, [r3, #0]


    *(volatile uint32_t *)(GPIOC_BASE + 0x14) = 0x0; // turn off
2000123a:	4b08      	ldr	r3, [pc, #32]	@ (2000125c <LED_Init+0x50>)
2000123c:	2200      	movs	r2, #0
2000123e:	601a      	str	r2, [r3, #0]
}
20001240:	bf00      	nop
20001242:	370c      	adds	r7, #12
20001244:	46bd      	mov	sp, r7
20001246:	f85d 7b04 	ldr.w	r7, [sp], #4
2000124a:	4770      	bx	lr
2000124c:	40007004 	.word	0x40007004
20001250:	4002104c 	.word	0x4002104c
20001254:	40021058 	.word	0x40021058
20001258:	48000800 	.word	0x48000800
2000125c:	48000814 	.word	0x48000814

20001260 <_strtoul_l.constprop.0>:
20001260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
20001264:	4e34      	ldr	r6, [pc, #208]	@ (20001338 <_strtoul_l.constprop.0+0xd8>)
20001266:	4686      	mov	lr, r0
20001268:	460d      	mov	r5, r1
2000126a:	4628      	mov	r0, r5
2000126c:	f815 4b01 	ldrb.w	r4, [r5], #1
20001270:	5d37      	ldrb	r7, [r6, r4]
20001272:	f017 0708 	ands.w	r7, r7, #8
20001276:	d1f8      	bne.n	2000126a <_strtoul_l.constprop.0+0xa>
20001278:	2c2d      	cmp	r4, #45	@ 0x2d
2000127a:	d12f      	bne.n	200012dc <_strtoul_l.constprop.0+0x7c>
2000127c:	782c      	ldrb	r4, [r5, #0]
2000127e:	2701      	movs	r7, #1
20001280:	1c85      	adds	r5, r0, #2
20001282:	f033 0010 	bics.w	r0, r3, #16
20001286:	d109      	bne.n	2000129c <_strtoul_l.constprop.0+0x3c>
20001288:	2c30      	cmp	r4, #48	@ 0x30
2000128a:	d12c      	bne.n	200012e6 <_strtoul_l.constprop.0+0x86>
2000128c:	7828      	ldrb	r0, [r5, #0]
2000128e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
20001292:	2858      	cmp	r0, #88	@ 0x58
20001294:	d127      	bne.n	200012e6 <_strtoul_l.constprop.0+0x86>
20001296:	786c      	ldrb	r4, [r5, #1]
20001298:	2310      	movs	r3, #16
2000129a:	3502      	adds	r5, #2
2000129c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
200012a0:	2600      	movs	r6, #0
200012a2:	fbb8 f8f3 	udiv	r8, r8, r3
200012a6:	fb03 f908 	mul.w	r9, r3, r8
200012aa:	ea6f 0909 	mvn.w	r9, r9
200012ae:	4630      	mov	r0, r6
200012b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
200012b4:	f1bc 0f09 	cmp.w	ip, #9
200012b8:	d81c      	bhi.n	200012f4 <_strtoul_l.constprop.0+0x94>
200012ba:	4664      	mov	r4, ip
200012bc:	42a3      	cmp	r3, r4
200012be:	dd2a      	ble.n	20001316 <_strtoul_l.constprop.0+0xb6>
200012c0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
200012c4:	d007      	beq.n	200012d6 <_strtoul_l.constprop.0+0x76>
200012c6:	4580      	cmp	r8, r0
200012c8:	d322      	bcc.n	20001310 <_strtoul_l.constprop.0+0xb0>
200012ca:	d101      	bne.n	200012d0 <_strtoul_l.constprop.0+0x70>
200012cc:	45a1      	cmp	r9, r4
200012ce:	db1f      	blt.n	20001310 <_strtoul_l.constprop.0+0xb0>
200012d0:	fb00 4003 	mla	r0, r0, r3, r4
200012d4:	2601      	movs	r6, #1
200012d6:	f815 4b01 	ldrb.w	r4, [r5], #1
200012da:	e7e9      	b.n	200012b0 <_strtoul_l.constprop.0+0x50>
200012dc:	2c2b      	cmp	r4, #43	@ 0x2b
200012de:	bf04      	itt	eq
200012e0:	782c      	ldrbeq	r4, [r5, #0]
200012e2:	1c85      	addeq	r5, r0, #2
200012e4:	e7cd      	b.n	20001282 <_strtoul_l.constprop.0+0x22>
200012e6:	2b00      	cmp	r3, #0
200012e8:	d1d8      	bne.n	2000129c <_strtoul_l.constprop.0+0x3c>
200012ea:	2c30      	cmp	r4, #48	@ 0x30
200012ec:	bf0c      	ite	eq
200012ee:	2308      	moveq	r3, #8
200012f0:	230a      	movne	r3, #10
200012f2:	e7d3      	b.n	2000129c <_strtoul_l.constprop.0+0x3c>
200012f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
200012f8:	f1bc 0f19 	cmp.w	ip, #25
200012fc:	d801      	bhi.n	20001302 <_strtoul_l.constprop.0+0xa2>
200012fe:	3c37      	subs	r4, #55	@ 0x37
20001300:	e7dc      	b.n	200012bc <_strtoul_l.constprop.0+0x5c>
20001302:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
20001306:	f1bc 0f19 	cmp.w	ip, #25
2000130a:	d804      	bhi.n	20001316 <_strtoul_l.constprop.0+0xb6>
2000130c:	3c57      	subs	r4, #87	@ 0x57
2000130e:	e7d5      	b.n	200012bc <_strtoul_l.constprop.0+0x5c>
20001310:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
20001314:	e7df      	b.n	200012d6 <_strtoul_l.constprop.0+0x76>
20001316:	1c73      	adds	r3, r6, #1
20001318:	d106      	bne.n	20001328 <_strtoul_l.constprop.0+0xc8>
2000131a:	2322      	movs	r3, #34	@ 0x22
2000131c:	f8ce 3000 	str.w	r3, [lr]
20001320:	4630      	mov	r0, r6
20001322:	b932      	cbnz	r2, 20001332 <_strtoul_l.constprop.0+0xd2>
20001324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
20001328:	b107      	cbz	r7, 2000132c <_strtoul_l.constprop.0+0xcc>
2000132a:	4240      	negs	r0, r0
2000132c:	2a00      	cmp	r2, #0
2000132e:	d0f9      	beq.n	20001324 <_strtoul_l.constprop.0+0xc4>
20001330:	b106      	cbz	r6, 20001334 <_strtoul_l.constprop.0+0xd4>
20001332:	1e69      	subs	r1, r5, #1
20001334:	6011      	str	r1, [r2, #0]
20001336:	e7f5      	b.n	20001324 <_strtoul_l.constprop.0+0xc4>
20001338:	200014d2 	.word	0x200014d2

2000133c <strtoul>:
2000133c:	4613      	mov	r3, r2
2000133e:	460a      	mov	r2, r1
20001340:	4601      	mov	r1, r0
20001342:	4802      	ldr	r0, [pc, #8]	@ (2000134c <strtoul+0x10>)
20001344:	6800      	ldr	r0, [r0, #0]
20001346:	f7ff bf8b 	b.w	20001260 <_strtoul_l.constprop.0>
2000134a:	bf00      	nop
2000134c:	2000160c 	.word	0x2000160c

20001350 <_init>:
20001350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001352:	bf00      	nop
20001354:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001356:	bc08      	pop	{r3}
20001358:	469e      	mov	lr, r3
2000135a:	4770      	bx	lr

2000135c <_fini>:
2000135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000135e:	bf00      	nop
20001360:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001362:	bc08      	pop	{r3}
20001364:	469e      	mov	lr, r3
20001366:	4770      	bx	lr
