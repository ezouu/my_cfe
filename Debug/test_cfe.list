
test_cfe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000d8  20000000  20000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d18  200000d8  200000d8  000010d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  20001df0  20001df0  00002df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000230c  2000230c  0000336c  2**0
                  CONTENTS
  4 .ARM          00000008  2000230c  2000230c  0000330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20002314  2000236c  0000336c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20002314  20002314  00003314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  20002318  20002318  00003318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  2000231c  2000231c  0000331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  2000236c  2000236c  0000336c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000271c  2000271c  0000336c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00001b10  00000000  00000000  0000339c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000058  00000000  00000000  00004eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000014fd  00000000  00000000  00004f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000685  00000000  00000000  00006401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000178  00000000  00000000  00006a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000473e  00000000  00000000  00006c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000114  00000000  00000000  0000b33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00001171  00000000  00000000  0000b452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000c5c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000804  00000000  00000000  0000c608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200000d8 <__do_global_dtors_aux>:
200000d8:	b510      	push	{r4, lr}
200000da:	4c05      	ldr	r4, [pc, #20]	@ (200000f0 <__do_global_dtors_aux+0x18>)
200000dc:	7823      	ldrb	r3, [r4, #0]
200000de:	b933      	cbnz	r3, 200000ee <__do_global_dtors_aux+0x16>
200000e0:	4b04      	ldr	r3, [pc, #16]	@ (200000f4 <__do_global_dtors_aux+0x1c>)
200000e2:	b113      	cbz	r3, 200000ea <__do_global_dtors_aux+0x12>
200000e4:	4804      	ldr	r0, [pc, #16]	@ (200000f8 <__do_global_dtors_aux+0x20>)
200000e6:	f3af 8000 	nop.w
200000ea:	2301      	movs	r3, #1
200000ec:	7023      	strb	r3, [r4, #0]
200000ee:	bd10      	pop	{r4, pc}
200000f0:	2000236c 	.word	0x2000236c
200000f4:	00000000 	.word	0x00000000
200000f8:	20001dd8 	.word	0x20001dd8

200000fc <frame_dummy>:
200000fc:	b508      	push	{r3, lr}
200000fe:	4b03      	ldr	r3, [pc, #12]	@ (2000010c <frame_dummy+0x10>)
20000100:	b11b      	cbz	r3, 2000010a <frame_dummy+0xe>
20000102:	4903      	ldr	r1, [pc, #12]	@ (20000110 <frame_dummy+0x14>)
20000104:	4803      	ldr	r0, [pc, #12]	@ (20000114 <frame_dummy+0x18>)
20000106:	f3af 8000 	nop.w
2000010a:	bd08      	pop	{r3, pc}
2000010c:	00000000 	.word	0x00000000
20000110:	20002370 	.word	0x20002370
20000114:	20001dd8 	.word	0x20001dd8

20000118 <SysTick_Handler>:
.section .text
.global SysTick_Handler
.type SysTick_Handler, %function
SysTick_Handler:

    push {r0}
20000118:	b401      	push	{r0}
    push {r1}
2000011a:	b402      	push	{r1}
    push {r2}
2000011c:	b404      	push	{r2}
    push {r3}
2000011e:	b408      	push	{r3}
    push {r4}
20000120:	b410      	push	{r4}
    push {r5}
20000122:	b420      	push	{r5}
    push {r6}
20000124:	b440      	push	{r6}
    push {r7}
20000126:	b480      	push	{r7}
    push {r8}
20000128:	f84d 8d04 	str.w	r8, [sp, #-4]!
    push {r9}
2000012c:	f84d 9d04 	str.w	r9, [sp, #-4]!
    push {r10}
20000130:	f84d ad04 	str.w	sl, [sp, #-4]!
    push {r11}
20000134:	f84d bd04 	str.w	fp, [sp, #-4]!
    push {r12}
20000138:	f84d cd04 	str.w	ip, [sp, #-4]!
    push {lr}
2000013c:	b500      	push	{lr}


	//bl mytest_1
//
    pop {lr}
2000013e:	f85d eb04 	ldr.w	lr, [sp], #4
    pop {r12}
20000142:	f85d cb04 	ldr.w	ip, [sp], #4
    pop {r11}
20000146:	f85d bb04 	ldr.w	fp, [sp], #4
    pop {r10}
2000014a:	f85d ab04 	ldr.w	sl, [sp], #4
    pop {r9}
2000014e:	f85d 9b04 	ldr.w	r9, [sp], #4
    pop {r8}
20000152:	f85d 8b04 	ldr.w	r8, [sp], #4
    pop {r7}
20000156:	bc80      	pop	{r7}
    pop {r6}
20000158:	bc40      	pop	{r6}
    pop {r5}
2000015a:	bc20      	pop	{r5}
    pop {r4}
2000015c:	bc10      	pop	{r4}
    pop {r3}
2000015e:	bc08      	pop	{r3}
    pop {r2}
20000160:	bc04      	pop	{r2}
    pop {r1}
20000162:	bc02      	pop	{r1}
    pop {r0}
20000164:	bc01      	pop	{r0}

    bx lr
20000166:	4770      	bx	lr

20000168 <add_function>:
.global add_function

.type add_function, %function
add_function:

    add r0, r0, r1
20000168:	4408      	add	r0, r1
    add r0, r0, r2
2000016a:	4410      	add	r0, r2
    add r0, r0, r3
2000016c:	4418      	add	r0, r3
    add r0, r0, r4
2000016e:	4420      	add	r0, r4

	//push r1
    ldr r1, [sp, #0]
20000170:	9900      	ldr	r1, [sp, #0]
    add r0, r0, r1
20000172:	4408      	add	r0, r1


    ldr r1, [sp, #4]
20000174:	9901      	ldr	r1, [sp, #4]
    add r0, r0, r1
20000176:	4408      	add	r0, r1
    bx lr
20000178:	4770      	bx	lr

2000017a <USART1_IRQHandler>:
.section .text
.global USART1_IRQHandler
.type USART1_IRQHandler, %function
USART1_IRQHandler:

 	push {r0-r12, lr}
2000017a:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}


	bl mytest_1
2000017e:	f001 fcc1 	bl	20001b04 <mytest_1>
    //ldr r0, =0x40013800      // USART1 base address
    //ldr r1, [r0, #0x1C]      // Read USART1 status register (SR)
    //ldr r2, [r0, #0x24]      // Read USART1 data register (DR)


	pop {r0-r12, lr}
20000182:	e8bd 5fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

    bx lr
20000186:	4770      	bx	lr

20000188 <strcmp>:
20000188:	f810 2b01 	ldrb.w	r2, [r0], #1
2000018c:	f811 3b01 	ldrb.w	r3, [r1], #1
20000190:	2a01      	cmp	r2, #1
20000192:	bf28      	it	cs
20000194:	429a      	cmpcs	r2, r3
20000196:	d0f7      	beq.n	20000188 <strcmp>
20000198:	1ad0      	subs	r0, r2, r3
2000019a:	4770      	bx	lr

2000019c <__aeabi_uldivmod>:
2000019c:	b953      	cbnz	r3, 200001b4 <__aeabi_uldivmod+0x18>
2000019e:	b94a      	cbnz	r2, 200001b4 <__aeabi_uldivmod+0x18>
200001a0:	2900      	cmp	r1, #0
200001a2:	bf08      	it	eq
200001a4:	2800      	cmpeq	r0, #0
200001a6:	bf1c      	itt	ne
200001a8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
200001ac:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
200001b0:	f000 b96a 	b.w	20000488 <__aeabi_idiv0>
200001b4:	f1ad 0c08 	sub.w	ip, sp, #8
200001b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
200001bc:	f000 f806 	bl	200001cc <__udivmoddi4>
200001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
200001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
200001c8:	b004      	add	sp, #16
200001ca:	4770      	bx	lr

200001cc <__udivmoddi4>:
200001cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
200001d0:	9d08      	ldr	r5, [sp, #32]
200001d2:	460c      	mov	r4, r1
200001d4:	2b00      	cmp	r3, #0
200001d6:	d14e      	bne.n	20000276 <__udivmoddi4+0xaa>
200001d8:	4694      	mov	ip, r2
200001da:	458c      	cmp	ip, r1
200001dc:	4686      	mov	lr, r0
200001de:	fab2 f282 	clz	r2, r2
200001e2:	d962      	bls.n	200002aa <__udivmoddi4+0xde>
200001e4:	b14a      	cbz	r2, 200001fa <__udivmoddi4+0x2e>
200001e6:	f1c2 0320 	rsb	r3, r2, #32
200001ea:	4091      	lsls	r1, r2
200001ec:	fa20 f303 	lsr.w	r3, r0, r3
200001f0:	fa0c fc02 	lsl.w	ip, ip, r2
200001f4:	4319      	orrs	r1, r3
200001f6:	fa00 fe02 	lsl.w	lr, r0, r2
200001fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
200001fe:	fa1f f68c 	uxth.w	r6, ip
20000202:	fbb1 f4f7 	udiv	r4, r1, r7
20000206:	ea4f 431e 	mov.w	r3, lr, lsr #16
2000020a:	fb07 1114 	mls	r1, r7, r4, r1
2000020e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
20000212:	fb04 f106 	mul.w	r1, r4, r6
20000216:	4299      	cmp	r1, r3
20000218:	d90a      	bls.n	20000230 <__udivmoddi4+0x64>
2000021a:	eb1c 0303 	adds.w	r3, ip, r3
2000021e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
20000222:	f080 8112 	bcs.w	2000044a <__udivmoddi4+0x27e>
20000226:	4299      	cmp	r1, r3
20000228:	f240 810f 	bls.w	2000044a <__udivmoddi4+0x27e>
2000022c:	3c02      	subs	r4, #2
2000022e:	4463      	add	r3, ip
20000230:	1a59      	subs	r1, r3, r1
20000232:	fa1f f38e 	uxth.w	r3, lr
20000236:	fbb1 f0f7 	udiv	r0, r1, r7
2000023a:	fb07 1110 	mls	r1, r7, r0, r1
2000023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
20000242:	fb00 f606 	mul.w	r6, r0, r6
20000246:	429e      	cmp	r6, r3
20000248:	d90a      	bls.n	20000260 <__udivmoddi4+0x94>
2000024a:	eb1c 0303 	adds.w	r3, ip, r3
2000024e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
20000252:	f080 80fc 	bcs.w	2000044e <__udivmoddi4+0x282>
20000256:	429e      	cmp	r6, r3
20000258:	f240 80f9 	bls.w	2000044e <__udivmoddi4+0x282>
2000025c:	4463      	add	r3, ip
2000025e:	3802      	subs	r0, #2
20000260:	1b9b      	subs	r3, r3, r6
20000262:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
20000266:	2100      	movs	r1, #0
20000268:	b11d      	cbz	r5, 20000272 <__udivmoddi4+0xa6>
2000026a:	40d3      	lsrs	r3, r2
2000026c:	2200      	movs	r2, #0
2000026e:	e9c5 3200 	strd	r3, r2, [r5]
20000272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000276:	428b      	cmp	r3, r1
20000278:	d905      	bls.n	20000286 <__udivmoddi4+0xba>
2000027a:	b10d      	cbz	r5, 20000280 <__udivmoddi4+0xb4>
2000027c:	e9c5 0100 	strd	r0, r1, [r5]
20000280:	2100      	movs	r1, #0
20000282:	4608      	mov	r0, r1
20000284:	e7f5      	b.n	20000272 <__udivmoddi4+0xa6>
20000286:	fab3 f183 	clz	r1, r3
2000028a:	2900      	cmp	r1, #0
2000028c:	d146      	bne.n	2000031c <__udivmoddi4+0x150>
2000028e:	42a3      	cmp	r3, r4
20000290:	d302      	bcc.n	20000298 <__udivmoddi4+0xcc>
20000292:	4290      	cmp	r0, r2
20000294:	f0c0 80f0 	bcc.w	20000478 <__udivmoddi4+0x2ac>
20000298:	1a86      	subs	r6, r0, r2
2000029a:	eb64 0303 	sbc.w	r3, r4, r3
2000029e:	2001      	movs	r0, #1
200002a0:	2d00      	cmp	r5, #0
200002a2:	d0e6      	beq.n	20000272 <__udivmoddi4+0xa6>
200002a4:	e9c5 6300 	strd	r6, r3, [r5]
200002a8:	e7e3      	b.n	20000272 <__udivmoddi4+0xa6>
200002aa:	2a00      	cmp	r2, #0
200002ac:	f040 8090 	bne.w	200003d0 <__udivmoddi4+0x204>
200002b0:	eba1 040c 	sub.w	r4, r1, ip
200002b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
200002b8:	fa1f f78c 	uxth.w	r7, ip
200002bc:	2101      	movs	r1, #1
200002be:	fbb4 f6f8 	udiv	r6, r4, r8
200002c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
200002c6:	fb08 4416 	mls	r4, r8, r6, r4
200002ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
200002ce:	fb07 f006 	mul.w	r0, r7, r6
200002d2:	4298      	cmp	r0, r3
200002d4:	d908      	bls.n	200002e8 <__udivmoddi4+0x11c>
200002d6:	eb1c 0303 	adds.w	r3, ip, r3
200002da:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
200002de:	d202      	bcs.n	200002e6 <__udivmoddi4+0x11a>
200002e0:	4298      	cmp	r0, r3
200002e2:	f200 80cd 	bhi.w	20000480 <__udivmoddi4+0x2b4>
200002e6:	4626      	mov	r6, r4
200002e8:	1a1c      	subs	r4, r3, r0
200002ea:	fa1f f38e 	uxth.w	r3, lr
200002ee:	fbb4 f0f8 	udiv	r0, r4, r8
200002f2:	fb08 4410 	mls	r4, r8, r0, r4
200002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
200002fa:	fb00 f707 	mul.w	r7, r0, r7
200002fe:	429f      	cmp	r7, r3
20000300:	d908      	bls.n	20000314 <__udivmoddi4+0x148>
20000302:	eb1c 0303 	adds.w	r3, ip, r3
20000306:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
2000030a:	d202      	bcs.n	20000312 <__udivmoddi4+0x146>
2000030c:	429f      	cmp	r7, r3
2000030e:	f200 80b0 	bhi.w	20000472 <__udivmoddi4+0x2a6>
20000312:	4620      	mov	r0, r4
20000314:	1bdb      	subs	r3, r3, r7
20000316:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
2000031a:	e7a5      	b.n	20000268 <__udivmoddi4+0x9c>
2000031c:	f1c1 0620 	rsb	r6, r1, #32
20000320:	408b      	lsls	r3, r1
20000322:	fa22 f706 	lsr.w	r7, r2, r6
20000326:	431f      	orrs	r7, r3
20000328:	fa20 fc06 	lsr.w	ip, r0, r6
2000032c:	fa04 f301 	lsl.w	r3, r4, r1
20000330:	ea43 030c 	orr.w	r3, r3, ip
20000334:	40f4      	lsrs	r4, r6
20000336:	fa00 f801 	lsl.w	r8, r0, r1
2000033a:	0c38      	lsrs	r0, r7, #16
2000033c:	ea4f 4913 	mov.w	r9, r3, lsr #16
20000340:	fbb4 fef0 	udiv	lr, r4, r0
20000344:	fa1f fc87 	uxth.w	ip, r7
20000348:	fb00 441e 	mls	r4, r0, lr, r4
2000034c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
20000350:	fb0e f90c 	mul.w	r9, lr, ip
20000354:	45a1      	cmp	r9, r4
20000356:	fa02 f201 	lsl.w	r2, r2, r1
2000035a:	d90a      	bls.n	20000372 <__udivmoddi4+0x1a6>
2000035c:	193c      	adds	r4, r7, r4
2000035e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
20000362:	f080 8084 	bcs.w	2000046e <__udivmoddi4+0x2a2>
20000366:	45a1      	cmp	r9, r4
20000368:	f240 8081 	bls.w	2000046e <__udivmoddi4+0x2a2>
2000036c:	f1ae 0e02 	sub.w	lr, lr, #2
20000370:	443c      	add	r4, r7
20000372:	eba4 0409 	sub.w	r4, r4, r9
20000376:	fa1f f983 	uxth.w	r9, r3
2000037a:	fbb4 f3f0 	udiv	r3, r4, r0
2000037e:	fb00 4413 	mls	r4, r0, r3, r4
20000382:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
20000386:	fb03 fc0c 	mul.w	ip, r3, ip
2000038a:	45a4      	cmp	ip, r4
2000038c:	d907      	bls.n	2000039e <__udivmoddi4+0x1d2>
2000038e:	193c      	adds	r4, r7, r4
20000390:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
20000394:	d267      	bcs.n	20000466 <__udivmoddi4+0x29a>
20000396:	45a4      	cmp	ip, r4
20000398:	d965      	bls.n	20000466 <__udivmoddi4+0x29a>
2000039a:	3b02      	subs	r3, #2
2000039c:	443c      	add	r4, r7
2000039e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
200003a2:	fba0 9302 	umull	r9, r3, r0, r2
200003a6:	eba4 040c 	sub.w	r4, r4, ip
200003aa:	429c      	cmp	r4, r3
200003ac:	46ce      	mov	lr, r9
200003ae:	469c      	mov	ip, r3
200003b0:	d351      	bcc.n	20000456 <__udivmoddi4+0x28a>
200003b2:	d04e      	beq.n	20000452 <__udivmoddi4+0x286>
200003b4:	b155      	cbz	r5, 200003cc <__udivmoddi4+0x200>
200003b6:	ebb8 030e 	subs.w	r3, r8, lr
200003ba:	eb64 040c 	sbc.w	r4, r4, ip
200003be:	fa04 f606 	lsl.w	r6, r4, r6
200003c2:	40cb      	lsrs	r3, r1
200003c4:	431e      	orrs	r6, r3
200003c6:	40cc      	lsrs	r4, r1
200003c8:	e9c5 6400 	strd	r6, r4, [r5]
200003cc:	2100      	movs	r1, #0
200003ce:	e750      	b.n	20000272 <__udivmoddi4+0xa6>
200003d0:	f1c2 0320 	rsb	r3, r2, #32
200003d4:	fa20 f103 	lsr.w	r1, r0, r3
200003d8:	fa0c fc02 	lsl.w	ip, ip, r2
200003dc:	fa24 f303 	lsr.w	r3, r4, r3
200003e0:	4094      	lsls	r4, r2
200003e2:	430c      	orrs	r4, r1
200003e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
200003e8:	fa00 fe02 	lsl.w	lr, r0, r2
200003ec:	fa1f f78c 	uxth.w	r7, ip
200003f0:	fbb3 f0f8 	udiv	r0, r3, r8
200003f4:	fb08 3110 	mls	r1, r8, r0, r3
200003f8:	0c23      	lsrs	r3, r4, #16
200003fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
200003fe:	fb00 f107 	mul.w	r1, r0, r7
20000402:	4299      	cmp	r1, r3
20000404:	d908      	bls.n	20000418 <__udivmoddi4+0x24c>
20000406:	eb1c 0303 	adds.w	r3, ip, r3
2000040a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
2000040e:	d22c      	bcs.n	2000046a <__udivmoddi4+0x29e>
20000410:	4299      	cmp	r1, r3
20000412:	d92a      	bls.n	2000046a <__udivmoddi4+0x29e>
20000414:	3802      	subs	r0, #2
20000416:	4463      	add	r3, ip
20000418:	1a5b      	subs	r3, r3, r1
2000041a:	b2a4      	uxth	r4, r4
2000041c:	fbb3 f1f8 	udiv	r1, r3, r8
20000420:	fb08 3311 	mls	r3, r8, r1, r3
20000424:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000428:	fb01 f307 	mul.w	r3, r1, r7
2000042c:	42a3      	cmp	r3, r4
2000042e:	d908      	bls.n	20000442 <__udivmoddi4+0x276>
20000430:	eb1c 0404 	adds.w	r4, ip, r4
20000434:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
20000438:	d213      	bcs.n	20000462 <__udivmoddi4+0x296>
2000043a:	42a3      	cmp	r3, r4
2000043c:	d911      	bls.n	20000462 <__udivmoddi4+0x296>
2000043e:	3902      	subs	r1, #2
20000440:	4464      	add	r4, ip
20000442:	1ae4      	subs	r4, r4, r3
20000444:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
20000448:	e739      	b.n	200002be <__udivmoddi4+0xf2>
2000044a:	4604      	mov	r4, r0
2000044c:	e6f0      	b.n	20000230 <__udivmoddi4+0x64>
2000044e:	4608      	mov	r0, r1
20000450:	e706      	b.n	20000260 <__udivmoddi4+0x94>
20000452:	45c8      	cmp	r8, r9
20000454:	d2ae      	bcs.n	200003b4 <__udivmoddi4+0x1e8>
20000456:	ebb9 0e02 	subs.w	lr, r9, r2
2000045a:	eb63 0c07 	sbc.w	ip, r3, r7
2000045e:	3801      	subs	r0, #1
20000460:	e7a8      	b.n	200003b4 <__udivmoddi4+0x1e8>
20000462:	4631      	mov	r1, r6
20000464:	e7ed      	b.n	20000442 <__udivmoddi4+0x276>
20000466:	4603      	mov	r3, r0
20000468:	e799      	b.n	2000039e <__udivmoddi4+0x1d2>
2000046a:	4630      	mov	r0, r6
2000046c:	e7d4      	b.n	20000418 <__udivmoddi4+0x24c>
2000046e:	46d6      	mov	lr, sl
20000470:	e77f      	b.n	20000372 <__udivmoddi4+0x1a6>
20000472:	4463      	add	r3, ip
20000474:	3802      	subs	r0, #2
20000476:	e74d      	b.n	20000314 <__udivmoddi4+0x148>
20000478:	4606      	mov	r6, r0
2000047a:	4623      	mov	r3, r4
2000047c:	4608      	mov	r0, r1
2000047e:	e70f      	b.n	200002a0 <__udivmoddi4+0xd4>
20000480:	3e02      	subs	r6, #2
20000482:	4463      	add	r3, ip
20000484:	e730      	b.n	200002e8 <__udivmoddi4+0x11c>
20000486:	bf00      	nop

20000488 <__aeabi_idiv0>:
20000488:	4770      	bx	lr
2000048a:	bf00      	nop

2000048c <Reset_Handler>:
 ldr   sp, =_estack    /* Set stack pointer */
2000048c:	f8df d0e0 	ldr.w	sp, [pc, #224]	@ 20000570 <L__usart_tdr+0x4>
  ldr r2, =_sbss
20000490:	4a38      	ldr	r2, [pc, #224]	@ (20000574 <L__usart_tdr+0x8>)
  ldr r4, =_ebss
20000492:	4c39      	ldr	r4, [pc, #228]	@ (20000578 <L__usart_tdr+0xc>)
  movs r3, #0
20000494:	2300      	movs	r3, #0
  cmp r2, r4
20000496:	42a2      	cmp	r2, r4
  beq 2f
20000498:	d002      	beq.n	200004a0 <Reset_Handler+0x14>
  str  r3, [r2]
2000049a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
2000049c:	3204      	adds	r2, #4
  b  1b
2000049e:	e7fa      	b.n	20000496 <Reset_Handler+0xa>
  ldr   r0, L__rcc_ahb2enr
200004a0:	f8df 009c 	ldr.w	r0, [pc, #156]	@ 20000540 <L__rcc_ahb2enr>
  mov   r1, 0x2
200004a4:	f04f 0102 	mov.w	r1, #2
  str   r1, [r0]
200004a8:	6001      	str	r1, [r0, #0]
  ldr   r0, L__rcc_cr
200004aa:	4824      	ldr	r0, [pc, #144]	@ (2000053c <L__rcc_cr>)
  mov   r1, 0xf00
200004ac:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
  str   r1, [r0]
200004b0:	6001      	str	r1, [r0, #0]
  ldr   r0, L__rcc_ccipr
200004b2:	4824      	ldr	r0, [pc, #144]	@ (20000544 <L__rcc_ccipr>)
  mov   r1, 0x2
200004b4:	f04f 0102 	mov.w	r1, #2
  str   r1, [r0]
200004b8:	6001      	str	r1, [r0, #0]
  ldr   r0, L__rcc_apb2enr
200004ba:	4823      	ldr	r0, [pc, #140]	@ (20000548 <L__rcc_apb2enr>)
  mov   r1, 0x4000
200004bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  str   r1, [r0]
200004c0:	6001      	str	r1, [r0, #0]
  ldr   r0, L__gpio_moder
200004c2:	4822      	ldr	r0, [pc, #136]	@ (2000054c <L__gpio_moder>)
  mov   r1, 0xa000
200004c4:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
  str   r1, [r0]
200004c8:	6001      	str	r1, [r0, #0]
  ldr   r0, L__gpio_afrl
200004ca:	4821      	ldr	r0, [pc, #132]	@ (20000550 <L__gpio_afrl>)
  mov   r1, 0x77000000
200004cc:	f04f 41ee 	mov.w	r1, #1996488704	@ 0x77000000
  str   r1, [r0]
200004d0:	6001      	str	r1, [r0, #0]
  ldr   r0, L__usart_cr1
200004d2:	4822      	ldr	r0, [pc, #136]	@ (2000055c <L__usart_cr1>)
  mov   r1, 0xd
200004d4:	f04f 010d 	mov.w	r1, #13
  str   r1, [r0]
200004d8:	6001      	str	r1, [r0, #0]
  ldr   r0, L__usart_brr
200004da:	4822      	ldr	r0, [pc, #136]	@ (20000564 <L__usart_brr>)
  mov   r1, 0x8b
200004dc:	f04f 018b 	mov.w	r1, #139	@ 0x8b
  str   r1, [r0]
200004e0:	6001      	str	r1, [r0, #0]
  ldr   r0, L__usart_isr
200004e2:	4821      	ldr	r0, [pc, #132]	@ (20000568 <L__usart_isr>)
  ldr   r1, [r0]
200004e4:	6801      	ldr	r1, [r0, #0]
  and   r1,  1<<7
200004e6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
  cmp   r1,  1<<7
200004ea:	2980      	cmp	r1, #128	@ 0x80
  bne   1b
200004ec:	d1fa      	bne.n	200004e4 <Reset_Handler+0x58>
  ldr   r0, L__usart_tdr
200004ee:	481f      	ldr	r0, [pc, #124]	@ (2000056c <L__usart_tdr>)
  mov   r1, 0x0A  // Changed from 0x59 (Y) to 0x0A (newline)
200004f0:	f04f 010a 	mov.w	r1, #10
  str   r1, [r0]
200004f4:	6001      	str	r1, [r0, #0]
  ldr   r0, L__usart_isr
200004f6:	481c      	ldr	r0, [pc, #112]	@ (20000568 <L__usart_isr>)
  ldr   r1, [r0]
200004f8:	6801      	ldr	r1, [r0, #0]
  and   r1, 1<<7
200004fa:	f001 0180 	and.w	r1, r1, #128	@ 0x80
  cmp   r1, 1<<7
200004fe:	2980      	cmp	r1, #128	@ 0x80
  bne   1b
20000500:	d1fa      	bne.n	200004f8 <Reset_Handler+0x6c>
  mov r0, #1
20000502:	f04f 0001 	mov.w	r0, #1
  mov r1, #2
20000506:	f04f 0102 	mov.w	r1, #2

2000050a <compute>:
  add r2, r1, r0
2000050a:	eb01 0200 	add.w	r2, r1, r0
  mov r0, r2
2000050e:	4610      	mov	r0, r2
  add r1, r1, #1
20000510:	f101 0101 	add.w	r1, r1, #1
  cmp r1, #101
20000514:	2965      	cmp	r1, #101	@ 0x65
  bne compute
20000516:	d1f8      	bne.n	2000050a <compute>
bl sts_main
20000518:	f000 fcea 	bl	20000ef0 <sts_main>

2000051c <start>:
    ldr   r1, [r0]
2000051c:	6801      	ldr	r1, [r0, #0]
    ands  r1, r1, 1<<7
2000051e:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
    beq   start
20000522:	d0fb      	beq.n	2000051c <start>
    ldr   r0, L__usart_tdr
20000524:	4811      	ldr	r0, [pc, #68]	@ (2000056c <L__usart_tdr>)
    mov   r1, #48
20000526:	f04f 0130 	mov.w	r1, #48	@ 0x30
    str   r1, [r0]
2000052a:	6001      	str	r1, [r0, #0]

2000052c <stop>:
    ldr   r1, [r0]
2000052c:	6801      	ldr	r1, [r0, #0]
    ands  r1, r1, 1<<7
2000052e:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
    beq   stop
20000532:	d0fb      	beq.n	2000052c <stop>
    ldr   r0, L__usart_tdr
20000534:	480d      	ldr	r0, [pc, #52]	@ (2000056c <L__usart_tdr>)
    mov   r1, #49
20000536:	f04f 0131 	mov.w	r1, #49	@ 0x31
    str   r1, [r0]
2000053a:	6001      	str	r1, [r0, #0]

2000053c <L__rcc_cr>:
2000053c:	40021000 	.word	0x40021000

20000540 <L__rcc_ahb2enr>:
20000540:	4002104c 	.word	0x4002104c

20000544 <L__rcc_ccipr>:
20000544:	40021088 	.word	0x40021088

20000548 <L__rcc_apb2enr>:
20000548:	40021060 	.word	0x40021060

2000054c <L__gpio_moder>:
2000054c:	48000400 	.word	0x48000400

20000550 <L__gpio_afrl>:
20000550:	48000420 	.word	0x48000420

20000554 <L__gpio_ospeedr>:
20000554:	48000408 	.word	0x48000408

20000558 <L__gpio_pupdr>:
20000558:	4800040c 	.word	0x4800040c

2000055c <L__usart_cr1>:
2000055c:	40013800 	.word	0x40013800

20000560 <L__usart_otyper>:
20000560:	40013804 	.word	0x40013804

20000564 <L__usart_brr>:
20000564:	4001380c 	.word	0x4001380c

20000568 <L__usart_isr>:
20000568:	4001381c 	.word	0x4001381c

2000056c <L__usart_tdr>:
2000056c:	40013828 	.word	0x40013828
 ldr   sp, =_estack    /* Set stack pointer */
20000570:	20018000 	.word	0x20018000
  ldr r2, =_sbss
20000574:	2000236c 	.word	0x2000236c
  ldr r4, =_ebss
20000578:	2000271c 	.word	0x2000271c

2000057c <__atox>:
    *  Return Value:
    *      number of digits placed in output buffer
    ********************************************************************* */
static int __atox(char *buf,unsigned int num,unsigned int radix,int width,
		     const char *digits)
{
2000057c:	b480      	push	{r7}
2000057e:	b08b      	sub	sp, #44	@ 0x2c
20000580:	af00      	add	r7, sp, #0
20000582:	60f8      	str	r0, [r7, #12]
20000584:	60b9      	str	r1, [r7, #8]
20000586:	607a      	str	r2, [r7, #4]
20000588:	603b      	str	r3, [r7, #0]
    char buffer[16];
    char *op;
    int retval;

    op = &buffer[0];
2000058a:	f107 0310 	add.w	r3, r7, #16
2000058e:	627b      	str	r3, [r7, #36]	@ 0x24
    retval = 0;
20000590:	2300      	movs	r3, #0
20000592:	623b      	str	r3, [r7, #32]

    do {
	*op++ = digits[num % radix];
20000594:	68bb      	ldr	r3, [r7, #8]
20000596:	687a      	ldr	r2, [r7, #4]
20000598:	fbb3 f2f2 	udiv	r2, r3, r2
2000059c:	6879      	ldr	r1, [r7, #4]
2000059e:	fb01 f202 	mul.w	r2, r1, r2
200005a2:	1a9b      	subs	r3, r3, r2
200005a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
200005a6:	441a      	add	r2, r3
200005a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200005aa:	1c59      	adds	r1, r3, #1
200005ac:	6279      	str	r1, [r7, #36]	@ 0x24
200005ae:	7812      	ldrb	r2, [r2, #0]
200005b0:	701a      	strb	r2, [r3, #0]
	retval++;
200005b2:	6a3b      	ldr	r3, [r7, #32]
200005b4:	3301      	adds	r3, #1
200005b6:	623b      	str	r3, [r7, #32]
	num /= radix;
200005b8:	68ba      	ldr	r2, [r7, #8]
200005ba:	687b      	ldr	r3, [r7, #4]
200005bc:	fbb2 f3f3 	udiv	r3, r2, r3
200005c0:	60bb      	str	r3, [r7, #8]
	} while (num != 0);
200005c2:	68bb      	ldr	r3, [r7, #8]
200005c4:	2b00      	cmp	r3, #0
200005c6:	d1e5      	bne.n	20000594 <__atox+0x18>

    if (width && (width > retval)) {
200005c8:	683b      	ldr	r3, [r7, #0]
200005ca:	2b00      	cmp	r3, #0
200005cc:	d020      	beq.n	20000610 <__atox+0x94>
200005ce:	683a      	ldr	r2, [r7, #0]
200005d0:	6a3b      	ldr	r3, [r7, #32]
200005d2:	429a      	cmp	r2, r3
200005d4:	dd1c      	ble.n	20000610 <__atox+0x94>
	width = width - retval;
200005d6:	683a      	ldr	r2, [r7, #0]
200005d8:	6a3b      	ldr	r3, [r7, #32]
200005da:	1ad3      	subs	r3, r2, r3
200005dc:	603b      	str	r3, [r7, #0]
	while (width) {
200005de:	e00a      	b.n	200005f6 <__atox+0x7a>
	    *op++ = '0';
200005e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200005e2:	1c5a      	adds	r2, r3, #1
200005e4:	627a      	str	r2, [r7, #36]	@ 0x24
200005e6:	2230      	movs	r2, #48	@ 0x30
200005e8:	701a      	strb	r2, [r3, #0]
	    retval++;
200005ea:	6a3b      	ldr	r3, [r7, #32]
200005ec:	3301      	adds	r3, #1
200005ee:	623b      	str	r3, [r7, #32]
	    width--;
200005f0:	683b      	ldr	r3, [r7, #0]
200005f2:	3b01      	subs	r3, #1
200005f4:	603b      	str	r3, [r7, #0]
	while (width) {
200005f6:	683b      	ldr	r3, [r7, #0]
200005f8:	2b00      	cmp	r3, #0
200005fa:	d1f1      	bne.n	200005e0 <__atox+0x64>
	    }
	}

    while (op != buffer) {
200005fc:	e008      	b.n	20000610 <__atox+0x94>
	op--;
200005fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20000600:	3b01      	subs	r3, #1
20000602:	627b      	str	r3, [r7, #36]	@ 0x24
	*buf++ = *op;
20000604:	68fb      	ldr	r3, [r7, #12]
20000606:	1c5a      	adds	r2, r3, #1
20000608:	60fa      	str	r2, [r7, #12]
2000060a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000060c:	7812      	ldrb	r2, [r2, #0]
2000060e:	701a      	strb	r2, [r3, #0]
    while (op != buffer) {
20000610:	f107 0310 	add.w	r3, r7, #16
20000614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20000616:	429a      	cmp	r2, r3
20000618:	d1f1      	bne.n	200005fe <__atox+0x82>
	}

    return retval;
2000061a:	6a3b      	ldr	r3, [r7, #32]
}
2000061c:	4618      	mov	r0, r3
2000061e:	372c      	adds	r7, #44	@ 0x2c
20000620:	46bd      	mov	sp, r7
20000622:	f85d 7b04 	ldr.w	r7, [sp], #4
20000626:	4770      	bx	lr

20000628 <__llatox>:
    *  Return Value:
    *      number of digits placed in output buffer
    ********************************************************************* */
static int __llatox(char *buf,unsigned long long num,unsigned int radix,
		    int width,const char *digits)
{
20000628:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
2000062c:	b08a      	sub	sp, #40	@ 0x28
2000062e:	af00      	add	r7, sp, #0
20000630:	60f8      	str	r0, [r7, #12]
20000632:	e9c7 2300 	strd	r2, r3, [r7]
    char buffer[16];
    char *op;
    int retval;

    op = &buffer[0];
20000636:	f107 0310 	add.w	r3, r7, #16
2000063a:	627b      	str	r3, [r7, #36]	@ 0x24
    retval = 0;
2000063c:	2300      	movs	r3, #0
2000063e:	623b      	str	r3, [r7, #32]
	retval++;
	num >>= 4;
	} while (num != 0);
#else
    do {
	*op++ = digits[num % radix];
20000640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20000642:	2200      	movs	r2, #0
20000644:	4698      	mov	r8, r3
20000646:	4691      	mov	r9, r2
20000648:	e9d7 0100 	ldrd	r0, r1, [r7]
2000064c:	4642      	mov	r2, r8
2000064e:	464b      	mov	r3, r9
20000650:	f7ff fda4 	bl	2000019c <__aeabi_uldivmod>
20000654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000656:	441a      	add	r2, r3
20000658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000065a:	1c59      	adds	r1, r3, #1
2000065c:	6279      	str	r1, [r7, #36]	@ 0x24
2000065e:	7812      	ldrb	r2, [r2, #0]
20000660:	701a      	strb	r2, [r3, #0]
	retval++;
20000662:	6a3b      	ldr	r3, [r7, #32]
20000664:	3301      	adds	r3, #1
20000666:	623b      	str	r3, [r7, #32]
	num /= radix;
20000668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2000066a:	2200      	movs	r2, #0
2000066c:	461c      	mov	r4, r3
2000066e:	4615      	mov	r5, r2
20000670:	4622      	mov	r2, r4
20000672:	462b      	mov	r3, r5
20000674:	e9d7 0100 	ldrd	r0, r1, [r7]
20000678:	f7ff fd90 	bl	2000019c <__aeabi_uldivmod>
2000067c:	4602      	mov	r2, r0
2000067e:	460b      	mov	r3, r1
20000680:	e9c7 2300 	strd	r2, r3, [r7]
	} while (num != 0);
20000684:	e9d7 2300 	ldrd	r2, r3, [r7]
20000688:	4313      	orrs	r3, r2
2000068a:	d1d9      	bne.n	20000640 <__llatox+0x18>
#endif

    if (width && (width > retval)) {
2000068c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
2000068e:	2b00      	cmp	r3, #0
20000690:	d020      	beq.n	200006d4 <__llatox+0xac>
20000692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
20000694:	6a3b      	ldr	r3, [r7, #32]
20000696:	429a      	cmp	r2, r3
20000698:	dd1c      	ble.n	200006d4 <__llatox+0xac>
	width = width - retval;
2000069a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
2000069c:	6a3b      	ldr	r3, [r7, #32]
2000069e:	1ad3      	subs	r3, r2, r3
200006a0:	647b      	str	r3, [r7, #68]	@ 0x44
	while (width) {
200006a2:	e00a      	b.n	200006ba <__llatox+0x92>
	    *op++ = '0';
200006a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200006a6:	1c5a      	adds	r2, r3, #1
200006a8:	627a      	str	r2, [r7, #36]	@ 0x24
200006aa:	2230      	movs	r2, #48	@ 0x30
200006ac:	701a      	strb	r2, [r3, #0]
	    retval++;
200006ae:	6a3b      	ldr	r3, [r7, #32]
200006b0:	3301      	adds	r3, #1
200006b2:	623b      	str	r3, [r7, #32]
	    width--;
200006b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
200006b6:	3b01      	subs	r3, #1
200006b8:	647b      	str	r3, [r7, #68]	@ 0x44
	while (width) {
200006ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
200006bc:	2b00      	cmp	r3, #0
200006be:	d1f1      	bne.n	200006a4 <__llatox+0x7c>
	    }
	}

    while (op != buffer) {
200006c0:	e008      	b.n	200006d4 <__llatox+0xac>
	op--;
200006c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200006c4:	3b01      	subs	r3, #1
200006c6:	627b      	str	r3, [r7, #36]	@ 0x24
	*buf++ = *op;
200006c8:	68fb      	ldr	r3, [r7, #12]
200006ca:	1c5a      	adds	r2, r3, #1
200006cc:	60fa      	str	r2, [r7, #12]
200006ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200006d0:	7812      	ldrb	r2, [r2, #0]
200006d2:	701a      	strb	r2, [r3, #0]
    while (op != buffer) {
200006d4:	f107 0310 	add.w	r3, r7, #16
200006d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200006da:	429a      	cmp	r2, r3
200006dc:	d1f1      	bne.n	200006c2 <__llatox+0x9a>
	}

    return retval;
200006de:	6a3b      	ldr	r3, [r7, #32]
}
200006e0:	4618      	mov	r0, r3
200006e2:	3728      	adds	r7, #40	@ 0x28
200006e4:	46bd      	mov	sp, r7
200006e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

200006ec <xvsprintf>:
    *  Return Value:
    *      number of characters copied
    ********************************************************************* */
#define isdigit(x) (((x) >= '0') && ((x) <= '9'))
int xvsprintf(char *outbuf,const char *templat,va_list marker)
{
200006ec:	b5b0      	push	{r4, r5, r7, lr}
200006ee:	b09a      	sub	sp, #104	@ 0x68
200006f0:	af04      	add	r7, sp, #16
200006f2:	60f8      	str	r0, [r7, #12]
200006f4:	60b9      	str	r1, [r7, #8]
200006f6:	607a      	str	r2, [r7, #4]
    long long ll;
    int leadingzero;
    int leadingnegsign;
    int islong;
    int width;
    int width2 = 0;
200006f8:	2300      	movs	r3, #0
200006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int hashash = 0;
200006fc:	2300      	movs	r3, #0
200006fe:	62bb      	str	r3, [r7, #40]	@ 0x28

    optr = outbuf;
20000700:	68fb      	ldr	r3, [r7, #12]
20000702:	657b      	str	r3, [r7, #84]	@ 0x54
    iptr = templat;
20000704:	68bb      	ldr	r3, [r7, #8]
20000706:	653b      	str	r3, [r7, #80]	@ 0x50

    while (*iptr) {
20000708:	e326      	b.n	20000d58 <xvsprintf+0x66c>
	if (*iptr != '%') {*optr++ = *iptr++; continue;}
2000070a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000070c:	781b      	ldrb	r3, [r3, #0]
2000070e:	2b25      	cmp	r3, #37	@ 0x25
20000710:	d008      	beq.n	20000724 <xvsprintf+0x38>
20000712:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
20000714:	1c53      	adds	r3, r2, #1
20000716:	653b      	str	r3, [r7, #80]	@ 0x50
20000718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
2000071a:	1c59      	adds	r1, r3, #1
2000071c:	6579      	str	r1, [r7, #84]	@ 0x54
2000071e:	7812      	ldrb	r2, [r2, #0]
20000720:	701a      	strb	r2, [r3, #0]
20000722:	e319      	b.n	20000d58 <xvsprintf+0x66c>

	iptr++;
20000724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000726:	3301      	adds	r3, #1
20000728:	653b      	str	r3, [r7, #80]	@ 0x50

	if (*iptr == '#') { hashash = 1; iptr++; }
2000072a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000072c:	781b      	ldrb	r3, [r3, #0]
2000072e:	2b23      	cmp	r3, #35	@ 0x23
20000730:	d104      	bne.n	2000073c <xvsprintf+0x50>
20000732:	2301      	movs	r3, #1
20000734:	62bb      	str	r3, [r7, #40]	@ 0x28
20000736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000738:	3301      	adds	r3, #1
2000073a:	653b      	str	r3, [r7, #80]	@ 0x50
	if (*iptr == '-') {
2000073c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000073e:	781b      	ldrb	r3, [r3, #0]
20000740:	2b2d      	cmp	r3, #45	@ 0x2d
20000742:	d105      	bne.n	20000750 <xvsprintf+0x64>
	    leadingnegsign = 1;
20000744:	2301      	movs	r3, #1
20000746:	627b      	str	r3, [r7, #36]	@ 0x24
	    iptr++;
20000748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000074a:	3301      	adds	r3, #1
2000074c:	653b      	str	r3, [r7, #80]	@ 0x50
2000074e:	e001      	b.n	20000754 <xvsprintf+0x68>
	    }
	else leadingnegsign = 0;
20000750:	2300      	movs	r3, #0
20000752:	627b      	str	r3, [r7, #36]	@ 0x24

	if (*iptr == '0') leadingzero = 1;
20000754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000756:	781b      	ldrb	r3, [r3, #0]
20000758:	2b30      	cmp	r3, #48	@ 0x30
2000075a:	d102      	bne.n	20000762 <xvsprintf+0x76>
2000075c:	2301      	movs	r3, #1
2000075e:	623b      	str	r3, [r7, #32]
20000760:	e001      	b.n	20000766 <xvsprintf+0x7a>
	else leadingzero = 0;
20000762:	2300      	movs	r3, #0
20000764:	623b      	str	r3, [r7, #32]

	width = 0;
20000766:	2300      	movs	r3, #0
20000768:	633b      	str	r3, [r7, #48]	@ 0x30
	while (*iptr && isdigit(*iptr)) {
2000076a:	e016      	b.n	2000079a <xvsprintf+0xae>
	    width += (*iptr - '0');
2000076c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000076e:	781b      	ldrb	r3, [r3, #0]
20000770:	3b30      	subs	r3, #48	@ 0x30
20000772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20000774:	4413      	add	r3, r2
20000776:	633b      	str	r3, [r7, #48]	@ 0x30
	    iptr++;
20000778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000077a:	3301      	adds	r3, #1
2000077c:	653b      	str	r3, [r7, #80]	@ 0x50
	    if (isdigit(*iptr)) width *= 10;
2000077e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000780:	781b      	ldrb	r3, [r3, #0]
20000782:	2b2f      	cmp	r3, #47	@ 0x2f
20000784:	d909      	bls.n	2000079a <xvsprintf+0xae>
20000786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000788:	781b      	ldrb	r3, [r3, #0]
2000078a:	2b39      	cmp	r3, #57	@ 0x39
2000078c:	d805      	bhi.n	2000079a <xvsprintf+0xae>
2000078e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20000790:	4613      	mov	r3, r2
20000792:	009b      	lsls	r3, r3, #2
20000794:	4413      	add	r3, r2
20000796:	005b      	lsls	r3, r3, #1
20000798:	633b      	str	r3, [r7, #48]	@ 0x30
	while (*iptr && isdigit(*iptr)) {
2000079a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000079c:	781b      	ldrb	r3, [r3, #0]
2000079e:	2b00      	cmp	r3, #0
200007a0:	d007      	beq.n	200007b2 <xvsprintf+0xc6>
200007a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007a4:	781b      	ldrb	r3, [r3, #0]
200007a6:	2b2f      	cmp	r3, #47	@ 0x2f
200007a8:	d903      	bls.n	200007b2 <xvsprintf+0xc6>
200007aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007ac:	781b      	ldrb	r3, [r3, #0]
200007ae:	2b39      	cmp	r3, #57	@ 0x39
200007b0:	d9dc      	bls.n	2000076c <xvsprintf+0x80>
	    }
	if (*iptr == '.') {
200007b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007b4:	781b      	ldrb	r3, [r3, #0]
200007b6:	2b2e      	cmp	r3, #46	@ 0x2e
200007b8:	d128      	bne.n	2000080c <xvsprintf+0x120>
	    iptr++;
200007ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007bc:	3301      	adds	r3, #1
200007be:	653b      	str	r3, [r7, #80]	@ 0x50
	    width2 = 0;
200007c0:	2300      	movs	r3, #0
200007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    while (*iptr && isdigit(*iptr)) {
200007c4:	e016      	b.n	200007f4 <xvsprintf+0x108>
		width2 += (*iptr - '0');
200007c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007c8:	781b      	ldrb	r3, [r3, #0]
200007ca:	3b30      	subs	r3, #48	@ 0x30
200007cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200007ce:	4413      	add	r3, r2
200007d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		iptr++;
200007d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007d4:	3301      	adds	r3, #1
200007d6:	653b      	str	r3, [r7, #80]	@ 0x50
		if (isdigit(*iptr)) width2 *= 10;
200007d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007da:	781b      	ldrb	r3, [r3, #0]
200007dc:	2b2f      	cmp	r3, #47	@ 0x2f
200007de:	d909      	bls.n	200007f4 <xvsprintf+0x108>
200007e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007e2:	781b      	ldrb	r3, [r3, #0]
200007e4:	2b39      	cmp	r3, #57	@ 0x39
200007e6:	d805      	bhi.n	200007f4 <xvsprintf+0x108>
200007e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200007ea:	4613      	mov	r3, r2
200007ec:	009b      	lsls	r3, r3, #2
200007ee:	4413      	add	r3, r2
200007f0:	005b      	lsls	r3, r3, #1
200007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    while (*iptr && isdigit(*iptr)) {
200007f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007f6:	781b      	ldrb	r3, [r3, #0]
200007f8:	2b00      	cmp	r3, #0
200007fa:	d007      	beq.n	2000080c <xvsprintf+0x120>
200007fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007fe:	781b      	ldrb	r3, [r3, #0]
20000800:	2b2f      	cmp	r3, #47	@ 0x2f
20000802:	d903      	bls.n	2000080c <xvsprintf+0x120>
20000804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000806:	781b      	ldrb	r3, [r3, #0]
20000808:	2b39      	cmp	r3, #57	@ 0x39
2000080a:	d9dc      	bls.n	200007c6 <xvsprintf+0xda>
		}
	    }

	islong = 0;
2000080c:	2300      	movs	r3, #0
2000080e:	637b      	str	r3, [r7, #52]	@ 0x34
	if (*iptr == 'l') { islong++; iptr++; }
20000810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000812:	781b      	ldrb	r3, [r3, #0]
20000814:	2b6c      	cmp	r3, #108	@ 0x6c
20000816:	d105      	bne.n	20000824 <xvsprintf+0x138>
20000818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000081a:	3301      	adds	r3, #1
2000081c:	637b      	str	r3, [r7, #52]	@ 0x34
2000081e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000820:	3301      	adds	r3, #1
20000822:	653b      	str	r3, [r7, #80]	@ 0x50
	if (*iptr == 'l') { islong++; iptr++; }
20000824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000826:	781b      	ldrb	r3, [r3, #0]
20000828:	2b6c      	cmp	r3, #108	@ 0x6c
2000082a:	d105      	bne.n	20000838 <xvsprintf+0x14c>
2000082c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000082e:	3301      	adds	r3, #1
20000830:	637b      	str	r3, [r7, #52]	@ 0x34
20000832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000834:	3301      	adds	r3, #1
20000836:	653b      	str	r3, [r7, #80]	@ 0x50

	switch (*iptr) {
20000838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000083a:	781b      	ldrb	r3, [r3, #0]
2000083c:	3b49      	subs	r3, #73	@ 0x49
2000083e:	2b2f      	cmp	r3, #47	@ 0x2f
20000840:	f200 8280 	bhi.w	20000d44 <xvsprintf+0x658>
20000844:	a201      	add	r2, pc, #4	@ (adr r2, 2000084c <xvsprintf+0x160>)
20000846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000084a:	bf00      	nop
2000084c:	2000090d 	.word	0x2000090d
20000850:	20000d45 	.word	0x20000d45
20000854:	20000d45 	.word	0x20000d45
20000858:	20000d45 	.word	0x20000d45
2000085c:	20000d45 	.word	0x20000d45
20000860:	20000d45 	.word	0x20000d45
20000864:	20000d45 	.word	0x20000d45
20000868:	20000c5d 	.word	0x20000c5d
2000086c:	20000d45 	.word	0x20000d45
20000870:	20000d45 	.word	0x20000d45
20000874:	20000d45 	.word	0x20000d45
20000878:	20000d45 	.word	0x20000d45
2000087c:	20000d45 	.word	0x20000d45
20000880:	20000d45 	.word	0x20000d45
20000884:	20000d45 	.word	0x20000d45
20000888:	20000bcf 	.word	0x20000bcf
2000088c:	20000d45 	.word	0x20000d45
20000890:	20000ce7 	.word	0x20000ce7
20000894:	20000d45 	.word	0x20000d45
20000898:	20000d45 	.word	0x20000d45
2000089c:	20000d45 	.word	0x20000d45
200008a0:	20000d45 	.word	0x20000d45
200008a4:	20000d45 	.word	0x20000d45
200008a8:	20000d45 	.word	0x20000d45
200008ac:	20000a37 	.word	0x20000a37
200008b0:	20000cbb 	.word	0x20000cbb
200008b4:	20000d2d 	.word	0x20000d2d
200008b8:	20000aa3 	.word	0x20000aa3
200008bc:	20000d45 	.word	0x20000d45
200008c0:	20000d45 	.word	0x20000d45
200008c4:	20000d45 	.word	0x20000d45
200008c8:	20000d45 	.word	0x20000d45
200008cc:	20000d45 	.word	0x20000d45
200008d0:	20000d45 	.word	0x20000d45
200008d4:	20000d45 	.word	0x20000d45
200008d8:	20000d45 	.word	0x20000d45
200008dc:	20000d45 	.word	0x20000d45
200008e0:	20000d45 	.word	0x20000d45
200008e4:	20000d45 	.word	0x20000d45
200008e8:	20000c5d 	.word	0x20000c5d
200008ec:	20000d45 	.word	0x20000d45
200008f0:	20000d45 	.word	0x20000d45
200008f4:	200009bf 	.word	0x200009bf
200008f8:	20000d45 	.word	0x20000d45
200008fc:	20000b51 	.word	0x20000b51
20000900:	20000d45 	.word	0x20000d45
20000904:	20000c8f 	.word	0x20000c8f
20000908:	20000bcf 	.word	0x20000bcf
	    case 'I':
		tmpptr = (unsigned char *) va_arg(marker,unsigned char *);
2000090c:	687b      	ldr	r3, [r7, #4]
2000090e:	1d1a      	adds	r2, r3, #4
20000910:	607a      	str	r2, [r7, #4]
20000912:	681b      	ldr	r3, [r3, #0]
20000914:	64fb      	str	r3, [r7, #76]	@ 0x4c
		optr += __atox(optr,*tmpptr++,10,0,digits);
20000916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000918:	1c5a      	adds	r2, r3, #1
2000091a:	64fa      	str	r2, [r7, #76]	@ 0x4c
2000091c:	781b      	ldrb	r3, [r3, #0]
2000091e:	4619      	mov	r1, r3
20000920:	4b9a      	ldr	r3, [pc, #616]	@ (20000b8c <xvsprintf+0x4a0>)
20000922:	9300      	str	r3, [sp, #0]
20000924:	2300      	movs	r3, #0
20000926:	220a      	movs	r2, #10
20000928:	6d78      	ldr	r0, [r7, #84]	@ 0x54
2000092a:	f7ff fe27 	bl	2000057c <__atox>
2000092e:	4603      	mov	r3, r0
20000930:	461a      	mov	r2, r3
20000932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000934:	4413      	add	r3, r2
20000936:	657b      	str	r3, [r7, #84]	@ 0x54
		*optr++ = '.';
20000938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
2000093a:	1c5a      	adds	r2, r3, #1
2000093c:	657a      	str	r2, [r7, #84]	@ 0x54
2000093e:	222e      	movs	r2, #46	@ 0x2e
20000940:	701a      	strb	r2, [r3, #0]
		optr += __atox(optr,*tmpptr++,10,0,digits);
20000942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000944:	1c5a      	adds	r2, r3, #1
20000946:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000948:	781b      	ldrb	r3, [r3, #0]
2000094a:	4619      	mov	r1, r3
2000094c:	4b8f      	ldr	r3, [pc, #572]	@ (20000b8c <xvsprintf+0x4a0>)
2000094e:	9300      	str	r3, [sp, #0]
20000950:	2300      	movs	r3, #0
20000952:	220a      	movs	r2, #10
20000954:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000956:	f7ff fe11 	bl	2000057c <__atox>
2000095a:	4603      	mov	r3, r0
2000095c:	461a      	mov	r2, r3
2000095e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000960:	4413      	add	r3, r2
20000962:	657b      	str	r3, [r7, #84]	@ 0x54
		*optr++ = '.';
20000964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000966:	1c5a      	adds	r2, r3, #1
20000968:	657a      	str	r2, [r7, #84]	@ 0x54
2000096a:	222e      	movs	r2, #46	@ 0x2e
2000096c:	701a      	strb	r2, [r3, #0]
		optr += __atox(optr,*tmpptr++,10,0,digits);
2000096e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000970:	1c5a      	adds	r2, r3, #1
20000972:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000974:	781b      	ldrb	r3, [r3, #0]
20000976:	4619      	mov	r1, r3
20000978:	4b84      	ldr	r3, [pc, #528]	@ (20000b8c <xvsprintf+0x4a0>)
2000097a:	9300      	str	r3, [sp, #0]
2000097c:	2300      	movs	r3, #0
2000097e:	220a      	movs	r2, #10
20000980:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000982:	f7ff fdfb 	bl	2000057c <__atox>
20000986:	4603      	mov	r3, r0
20000988:	461a      	mov	r2, r3
2000098a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
2000098c:	4413      	add	r3, r2
2000098e:	657b      	str	r3, [r7, #84]	@ 0x54
		*optr++ = '.';
20000990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000992:	1c5a      	adds	r2, r3, #1
20000994:	657a      	str	r2, [r7, #84]	@ 0x54
20000996:	222e      	movs	r2, #46	@ 0x2e
20000998:	701a      	strb	r2, [r3, #0]
		optr += __atox(optr,*tmpptr++,10,0,digits);
2000099a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000099c:	1c5a      	adds	r2, r3, #1
2000099e:	64fa      	str	r2, [r7, #76]	@ 0x4c
200009a0:	781b      	ldrb	r3, [r3, #0]
200009a2:	4619      	mov	r1, r3
200009a4:	4b79      	ldr	r3, [pc, #484]	@ (20000b8c <xvsprintf+0x4a0>)
200009a6:	9300      	str	r3, [sp, #0]
200009a8:	2300      	movs	r3, #0
200009aa:	220a      	movs	r2, #10
200009ac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
200009ae:	f7ff fde5 	bl	2000057c <__atox>
200009b2:	4603      	mov	r3, r0
200009b4:	461a      	mov	r2, r3
200009b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200009b8:	4413      	add	r3, r2
200009ba:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
200009bc:	e1c9      	b.n	20000d52 <xvsprintf+0x666>
	    case 's':
		tmpptr = (unsigned char *) va_arg(marker,unsigned char *);
200009be:	687b      	ldr	r3, [r7, #4]
200009c0:	1d1a      	adds	r2, r3, #4
200009c2:	607a      	str	r2, [r7, #4]
200009c4:	681b      	ldr	r3, [r3, #0]
200009c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (!tmpptr) tmpptr = (unsigned char *) "(null)";
200009c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200009ca:	2b00      	cmp	r3, #0
200009cc:	d101      	bne.n	200009d2 <xvsprintf+0x2e6>
200009ce:	4b70      	ldr	r3, [pc, #448]	@ (20000b90 <xvsprintf+0x4a4>)
200009d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if ((width == 0) & (width2 == 0)) {
200009d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
200009d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200009d6:	4313      	orrs	r3, r2
200009d8:	2b00      	cmp	r3, #0
200009da:	d118      	bne.n	20000a0e <xvsprintf+0x322>
		    while (*tmpptr) *optr++ = *tmpptr++;
200009dc:	e007      	b.n	200009ee <xvsprintf+0x302>
200009de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
200009e0:	1c53      	adds	r3, r2, #1
200009e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
200009e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200009e6:	1c59      	adds	r1, r3, #1
200009e8:	6579      	str	r1, [r7, #84]	@ 0x54
200009ea:	7812      	ldrb	r2, [r2, #0]
200009ec:	701a      	strb	r2, [r3, #0]
200009ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200009f0:	781b      	ldrb	r3, [r3, #0]
200009f2:	2b00      	cmp	r3, #0
200009f4:	d1f3      	bne.n	200009de <xvsprintf+0x2f2>
		    break;
200009f6:	e1ac      	b.n	20000d52 <xvsprintf+0x666>
		    }
		while (width && *tmpptr) {
		    *optr++ = *tmpptr++;
200009f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
200009fa:	1c53      	adds	r3, r2, #1
200009fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
200009fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a00:	1c59      	adds	r1, r3, #1
20000a02:	6579      	str	r1, [r7, #84]	@ 0x54
20000a04:	7812      	ldrb	r2, [r2, #0]
20000a06:	701a      	strb	r2, [r3, #0]
		    width--;
20000a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000a0a:	3b01      	subs	r3, #1
20000a0c:	633b      	str	r3, [r7, #48]	@ 0x30
		while (width && *tmpptr) {
20000a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000a10:	2b00      	cmp	r3, #0
20000a12:	d00c      	beq.n	20000a2e <xvsprintf+0x342>
20000a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000a16:	781b      	ldrb	r3, [r3, #0]
20000a18:	2b00      	cmp	r3, #0
20000a1a:	d1ed      	bne.n	200009f8 <xvsprintf+0x30c>
		    }
		while (width) {
20000a1c:	e007      	b.n	20000a2e <xvsprintf+0x342>
		    *optr++ = ' ';
20000a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a20:	1c5a      	adds	r2, r3, #1
20000a22:	657a      	str	r2, [r7, #84]	@ 0x54
20000a24:	2220      	movs	r2, #32
20000a26:	701a      	strb	r2, [r3, #0]
		    width--;
20000a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000a2a:	3b01      	subs	r3, #1
20000a2c:	633b      	str	r3, [r7, #48]	@ 0x30
		while (width) {
20000a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000a30:	2b00      	cmp	r3, #0
20000a32:	d1f4      	bne.n	20000a1e <xvsprintf+0x332>
		    }
		break;
20000a34:	e18d      	b.n	20000d52 <xvsprintf+0x666>
	    case 'a':
		tmpptr = (unsigned char *) va_arg(marker,unsigned char *);
20000a36:	687b      	ldr	r3, [r7, #4]
20000a38:	1d1a      	adds	r2, r3, #4
20000a3a:	607a      	str	r2, [r7, #4]
20000a3c:	681b      	ldr	r3, [r3, #0]
20000a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		for (x = 0; x < 5; x++) {
20000a40:	2300      	movs	r3, #0
20000a42:	64bb      	str	r3, [r7, #72]	@ 0x48
20000a44:	e018      	b.n	20000a78 <xvsprintf+0x38c>
		    optr += __atox(optr,*tmpptr++,16,2,digits);
20000a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000a48:	1c5a      	adds	r2, r3, #1
20000a4a:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000a4c:	781b      	ldrb	r3, [r3, #0]
20000a4e:	4619      	mov	r1, r3
20000a50:	4b4e      	ldr	r3, [pc, #312]	@ (20000b8c <xvsprintf+0x4a0>)
20000a52:	9300      	str	r3, [sp, #0]
20000a54:	2302      	movs	r3, #2
20000a56:	2210      	movs	r2, #16
20000a58:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000a5a:	f7ff fd8f 	bl	2000057c <__atox>
20000a5e:	4603      	mov	r3, r0
20000a60:	461a      	mov	r2, r3
20000a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a64:	4413      	add	r3, r2
20000a66:	657b      	str	r3, [r7, #84]	@ 0x54
		    *optr++ = '-';
20000a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a6a:	1c5a      	adds	r2, r3, #1
20000a6c:	657a      	str	r2, [r7, #84]	@ 0x54
20000a6e:	222d      	movs	r2, #45	@ 0x2d
20000a70:	701a      	strb	r2, [r3, #0]
		for (x = 0; x < 5; x++) {
20000a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000a74:	3301      	adds	r3, #1
20000a76:	64bb      	str	r3, [r7, #72]	@ 0x48
20000a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000a7a:	2b04      	cmp	r3, #4
20000a7c:	dde3      	ble.n	20000a46 <xvsprintf+0x35a>
		    }
		optr += __atox(optr,*tmpptr++,16,2,digits);
20000a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000a80:	1c5a      	adds	r2, r3, #1
20000a82:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000a84:	781b      	ldrb	r3, [r3, #0]
20000a86:	4619      	mov	r1, r3
20000a88:	4b40      	ldr	r3, [pc, #256]	@ (20000b8c <xvsprintf+0x4a0>)
20000a8a:	9300      	str	r3, [sp, #0]
20000a8c:	2302      	movs	r3, #2
20000a8e:	2210      	movs	r2, #16
20000a90:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000a92:	f7ff fd73 	bl	2000057c <__atox>
20000a96:	4603      	mov	r3, r0
20000a98:	461a      	mov	r2, r3
20000a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a9c:	4413      	add	r3, r2
20000a9e:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
20000aa0:	e157      	b.n	20000d52 <xvsprintf+0x666>
20000aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000aa4:	2b01      	cmp	r3, #1
20000aa6:	dc03      	bgt.n	20000ab0 <xvsprintf+0x3c4>
20000aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000aaa:	2b00      	cmp	r3, #0
20000aac:	da04      	bge.n	20000ab8 <xvsprintf+0x3cc>
			ll = va_arg(marker,long long int);
			if (ll < 0) { *optr++='-'; ll = -ll;}
			optr += __llatox(optr,ll,10,width,digits);
			break;
		    }
		break;
20000aae:	e150      	b.n	20000d52 <xvsprintf+0x666>
20000ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000ab2:	2b02      	cmp	r3, #2
20000ab4:	d01e      	beq.n	20000af4 <xvsprintf+0x408>
20000ab6:	e14c      	b.n	20000d52 <xvsprintf+0x666>
			i = va_arg(marker,int);
20000ab8:	687b      	ldr	r3, [r7, #4]
20000aba:	1d1a      	adds	r2, r3, #4
20000abc:	607a      	str	r2, [r7, #4]
20000abe:	681b      	ldr	r3, [r3, #0]
20000ac0:	647b      	str	r3, [r7, #68]	@ 0x44
			if (i < 0) { *optr++='-'; i = -i;}
20000ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000ac4:	2b00      	cmp	r3, #0
20000ac6:	da07      	bge.n	20000ad8 <xvsprintf+0x3ec>
20000ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000aca:	1c5a      	adds	r2, r3, #1
20000acc:	657a      	str	r2, [r7, #84]	@ 0x54
20000ace:	222d      	movs	r2, #45	@ 0x2d
20000ad0:	701a      	strb	r2, [r3, #0]
20000ad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000ad4:	425b      	negs	r3, r3
20000ad6:	647b      	str	r3, [r7, #68]	@ 0x44
			optr += __atox(optr,i,10,width,digits);
20000ad8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
20000ada:	4b2c      	ldr	r3, [pc, #176]	@ (20000b8c <xvsprintf+0x4a0>)
20000adc:	9300      	str	r3, [sp, #0]
20000ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000ae0:	220a      	movs	r2, #10
20000ae2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000ae4:	f7ff fd4a 	bl	2000057c <__atox>
20000ae8:	4603      	mov	r3, r0
20000aea:	461a      	mov	r2, r3
20000aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000aee:	4413      	add	r3, r2
20000af0:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000af2:	e02c      	b.n	20000b4e <xvsprintf+0x462>
			ll = va_arg(marker,long long int);
20000af4:	687b      	ldr	r3, [r7, #4]
20000af6:	3307      	adds	r3, #7
20000af8:	f023 0307 	bic.w	r3, r3, #7
20000afc:	f103 0208 	add.w	r2, r3, #8
20000b00:	607a      	str	r2, [r7, #4]
20000b02:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b06:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			if (ll < 0) { *optr++='-'; ll = -ll;}
20000b0a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
20000b0e:	2b00      	cmp	r3, #0
20000b10:	da0c      	bge.n	20000b2c <xvsprintf+0x440>
20000b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000b14:	1c5a      	adds	r2, r3, #1
20000b16:	657a      	str	r2, [r7, #84]	@ 0x54
20000b18:	222d      	movs	r2, #45	@ 0x2d
20000b1a:	701a      	strb	r2, [r3, #0]
20000b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
20000b20:	2100      	movs	r1, #0
20000b22:	4254      	negs	r4, r2
20000b24:	eb61 0503 	sbc.w	r5, r1, r3
20000b28:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
			optr += __llatox(optr,ll,10,width,digits);
20000b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
20000b30:	4916      	ldr	r1, [pc, #88]	@ (20000b8c <xvsprintf+0x4a0>)
20000b32:	9102      	str	r1, [sp, #8]
20000b34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
20000b36:	9101      	str	r1, [sp, #4]
20000b38:	210a      	movs	r1, #10
20000b3a:	9100      	str	r1, [sp, #0]
20000b3c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000b3e:	f7ff fd73 	bl	20000628 <__llatox>
20000b42:	4603      	mov	r3, r0
20000b44:	461a      	mov	r2, r3
20000b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000b48:	4413      	add	r3, r2
20000b4a:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000b4c:	bf00      	nop
		break;
20000b4e:	e100      	b.n	20000d52 <xvsprintf+0x666>
20000b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000b52:	2b01      	cmp	r3, #1
20000b54:	dc03      	bgt.n	20000b5e <xvsprintf+0x472>
20000b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000b58:	2b00      	cmp	r3, #0
20000b5a:	da04      	bge.n	20000b66 <xvsprintf+0x47a>
		    case 2:
			ulx = va_arg(marker,unsigned long long);
			optr += __llatox(optr,ulx,10,width,digits);
			break;
		    }
		break;
20000b5c:	e0f9      	b.n	20000d52 <xvsprintf+0x666>
20000b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000b60:	2b02      	cmp	r3, #2
20000b62:	d017      	beq.n	20000b94 <xvsprintf+0x4a8>
20000b64:	e0f5      	b.n	20000d52 <xvsprintf+0x666>
			ux = va_arg(marker,unsigned int);
20000b66:	687b      	ldr	r3, [r7, #4]
20000b68:	1d1a      	adds	r2, r3, #4
20000b6a:	607a      	str	r2, [r7, #4]
20000b6c:	681b      	ldr	r3, [r3, #0]
20000b6e:	617b      	str	r3, [r7, #20]
			optr += __atox(optr,ux,10,width,digits);
20000b70:	4b06      	ldr	r3, [pc, #24]	@ (20000b8c <xvsprintf+0x4a0>)
20000b72:	9300      	str	r3, [sp, #0]
20000b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000b76:	220a      	movs	r2, #10
20000b78:	6979      	ldr	r1, [r7, #20]
20000b7a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000b7c:	f7ff fcfe 	bl	2000057c <__atox>
20000b80:	4603      	mov	r3, r0
20000b82:	461a      	mov	r2, r3
20000b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000b86:	4413      	add	r3, r2
20000b88:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000b8a:	e01f      	b.n	20000bcc <xvsprintf+0x4e0>
20000b8c:	200021e4 	.word	0x200021e4
20000b90:	20001df0 	.word	0x20001df0
			ulx = va_arg(marker,unsigned long long);
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	3307      	adds	r3, #7
20000b98:	f023 0307 	bic.w	r3, r3, #7
20000b9c:	f103 0208 	add.w	r2, r3, #8
20000ba0:	607a      	str	r2, [r7, #4]
20000ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
20000ba6:	e9c7 2306 	strd	r2, r3, [r7, #24]
			optr += __llatox(optr,ulx,10,width,digits);
20000baa:	4b73      	ldr	r3, [pc, #460]	@ (20000d78 <xvsprintf+0x68c>)
20000bac:	9302      	str	r3, [sp, #8]
20000bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000bb0:	9301      	str	r3, [sp, #4]
20000bb2:	230a      	movs	r3, #10
20000bb4:	9300      	str	r3, [sp, #0]
20000bb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20000bba:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000bbc:	f7ff fd34 	bl	20000628 <__llatox>
20000bc0:	4603      	mov	r3, r0
20000bc2:	461a      	mov	r2, r3
20000bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000bc6:	4413      	add	r3, r2
20000bc8:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000bca:	bf00      	nop
		break;
20000bcc:	e0c1      	b.n	20000d52 <xvsprintf+0x666>
20000bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000bd0:	2b01      	cmp	r3, #1
20000bd2:	dc03      	bgt.n	20000bdc <xvsprintf+0x4f0>
20000bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000bd6:	2b00      	cmp	r3, #0
20000bd8:	da04      	bge.n	20000be4 <xvsprintf+0x4f8>
			ulx = va_arg(marker,unsigned long long);
			optr += __llatox(optr,ulx,16,width,
				       (*iptr == 'X') ? digits : ldigits);
			break;
		    }
		break;
20000bda:	e0ba      	b.n	20000d52 <xvsprintf+0x666>
20000bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000bde:	2b02      	cmp	r3, #2
20000be0:	d019      	beq.n	20000c16 <xvsprintf+0x52a>
20000be2:	e0b6      	b.n	20000d52 <xvsprintf+0x666>
			ux = va_arg(marker,unsigned int);
20000be4:	687b      	ldr	r3, [r7, #4]
20000be6:	1d1a      	adds	r2, r3, #4
20000be8:	607a      	str	r2, [r7, #4]
20000bea:	681b      	ldr	r3, [r3, #0]
20000bec:	617b      	str	r3, [r7, #20]
				       (*iptr == 'X') ? digits : ldigits);
20000bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000bf0:	781b      	ldrb	r3, [r3, #0]
			optr += __atox(optr,ux,16,width,
20000bf2:	2b58      	cmp	r3, #88	@ 0x58
20000bf4:	d101      	bne.n	20000bfa <xvsprintf+0x50e>
20000bf6:	4b60      	ldr	r3, [pc, #384]	@ (20000d78 <xvsprintf+0x68c>)
20000bf8:	e000      	b.n	20000bfc <xvsprintf+0x510>
20000bfa:	4b60      	ldr	r3, [pc, #384]	@ (20000d7c <xvsprintf+0x690>)
20000bfc:	9300      	str	r3, [sp, #0]
20000bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000c00:	2210      	movs	r2, #16
20000c02:	6979      	ldr	r1, [r7, #20]
20000c04:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000c06:	f7ff fcb9 	bl	2000057c <__atox>
20000c0a:	4603      	mov	r3, r0
20000c0c:	461a      	mov	r2, r3
20000c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000c10:	4413      	add	r3, r2
20000c12:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000c14:	e021      	b.n	20000c5a <xvsprintf+0x56e>
			ulx = va_arg(marker,unsigned long long);
20000c16:	687b      	ldr	r3, [r7, #4]
20000c18:	3307      	adds	r3, #7
20000c1a:	f023 0307 	bic.w	r3, r3, #7
20000c1e:	f103 0208 	add.w	r2, r3, #8
20000c22:	607a      	str	r2, [r7, #4]
20000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
20000c28:	e9c7 2306 	strd	r2, r3, [r7, #24]
				       (*iptr == 'X') ? digits : ldigits);
20000c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000c2e:	781b      	ldrb	r3, [r3, #0]
			optr += __llatox(optr,ulx,16,width,
20000c30:	2b58      	cmp	r3, #88	@ 0x58
20000c32:	d101      	bne.n	20000c38 <xvsprintf+0x54c>
20000c34:	4b50      	ldr	r3, [pc, #320]	@ (20000d78 <xvsprintf+0x68c>)
20000c36:	e000      	b.n	20000c3a <xvsprintf+0x54e>
20000c38:	4b50      	ldr	r3, [pc, #320]	@ (20000d7c <xvsprintf+0x690>)
20000c3a:	9302      	str	r3, [sp, #8]
20000c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000c3e:	9301      	str	r3, [sp, #4]
20000c40:	2310      	movs	r3, #16
20000c42:	9300      	str	r3, [sp, #0]
20000c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20000c48:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000c4a:	f7ff fced 	bl	20000628 <__llatox>
20000c4e:	4603      	mov	r3, r0
20000c50:	461a      	mov	r2, r3
20000c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000c54:	4413      	add	r3, r2
20000c56:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000c58:	bf00      	nop
		break;
20000c5a:	e07a      	b.n	20000d52 <xvsprintf+0x666>
#ifdef __long64
		lx = va_arg(marker,long long);
		optr += __llatox(optr,lx,16,16,
				 (*iptr == 'P') ? digits : ldigits);
#else
		x = va_arg(marker,long);
20000c5c:	687b      	ldr	r3, [r7, #4]
20000c5e:	1d1a      	adds	r2, r3, #4
20000c60:	607a      	str	r2, [r7, #4]
20000c62:	681b      	ldr	r3, [r3, #0]
20000c64:	64bb      	str	r3, [r7, #72]	@ 0x48
		optr += __atox(optr,x,16,8,
20000c66:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
			       (*iptr == 'P') ? digits : ldigits);
20000c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000c6a:	781b      	ldrb	r3, [r3, #0]
		optr += __atox(optr,x,16,8,
20000c6c:	2b50      	cmp	r3, #80	@ 0x50
20000c6e:	d101      	bne.n	20000c74 <xvsprintf+0x588>
20000c70:	4b41      	ldr	r3, [pc, #260]	@ (20000d78 <xvsprintf+0x68c>)
20000c72:	e000      	b.n	20000c76 <xvsprintf+0x58a>
20000c74:	4b41      	ldr	r3, [pc, #260]	@ (20000d7c <xvsprintf+0x690>)
20000c76:	9300      	str	r3, [sp, #0]
20000c78:	2308      	movs	r3, #8
20000c7a:	2210      	movs	r2, #16
20000c7c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000c7e:	f7ff fc7d 	bl	2000057c <__atox>
20000c82:	4603      	mov	r3, r0
20000c84:	461a      	mov	r2, r3
20000c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000c88:	4413      	add	r3, r2
20000c8a:	657b      	str	r3, [r7, #84]	@ 0x54
#endif
		break;
20000c8c:	e061      	b.n	20000d52 <xvsprintf+0x666>
	    case 'w':
		x = va_arg(marker,unsigned int);
20000c8e:	687b      	ldr	r3, [r7, #4]
20000c90:	1d1a      	adds	r2, r3, #4
20000c92:	607a      	str	r2, [r7, #4]
20000c94:	681b      	ldr	r3, [r3, #0]
20000c96:	64bb      	str	r3, [r7, #72]	@ 0x48
	        x &= 0x0000FFFF;
20000c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000c9a:	b29b      	uxth	r3, r3
20000c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
		optr += __atox(optr,x,16,4,digits);
20000c9e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
20000ca0:	4b35      	ldr	r3, [pc, #212]	@ (20000d78 <xvsprintf+0x68c>)
20000ca2:	9300      	str	r3, [sp, #0]
20000ca4:	2304      	movs	r3, #4
20000ca6:	2210      	movs	r2, #16
20000ca8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000caa:	f7ff fc67 	bl	2000057c <__atox>
20000cae:	4603      	mov	r3, r0
20000cb0:	461a      	mov	r2, r3
20000cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000cb4:	4413      	add	r3, r2
20000cb6:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
20000cb8:	e04b      	b.n	20000d52 <xvsprintf+0x666>
	    case 'b':
		x = va_arg(marker,unsigned int);
20000cba:	687b      	ldr	r3, [r7, #4]
20000cbc:	1d1a      	adds	r2, r3, #4
20000cbe:	607a      	str	r2, [r7, #4]
20000cc0:	681b      	ldr	r3, [r3, #0]
20000cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
	        x &= 0x0000FF;
20000cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
		optr += __atox(optr,x,16,2,digits);
20000cca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
20000ccc:	4b2a      	ldr	r3, [pc, #168]	@ (20000d78 <xvsprintf+0x68c>)
20000cce:	9300      	str	r3, [sp, #0]
20000cd0:	2302      	movs	r3, #2
20000cd2:	2210      	movs	r2, #16
20000cd4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000cd6:	f7ff fc51 	bl	2000057c <__atox>
20000cda:	4603      	mov	r3, r0
20000cdc:	461a      	mov	r2, r3
20000cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000ce0:	4413      	add	r3, r2
20000ce2:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
20000ce4:	e035      	b.n	20000d52 <xvsprintf+0x666>
	    case 'Z':
		x = va_arg(marker,unsigned int);
20000ce6:	687b      	ldr	r3, [r7, #4]
20000ce8:	1d1a      	adds	r2, r3, #4
20000cea:	607a      	str	r2, [r7, #4]
20000cec:	681b      	ldr	r3, [r3, #0]
20000cee:	64bb      	str	r3, [r7, #72]	@ 0x48
		tmpptr = va_arg(marker,unsigned char *);
20000cf0:	687b      	ldr	r3, [r7, #4]
20000cf2:	1d1a      	adds	r2, r3, #4
20000cf4:	607a      	str	r2, [r7, #4]
20000cf6:	681b      	ldr	r3, [r3, #0]
20000cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		while (x) {
20000cfa:	e013      	b.n	20000d24 <xvsprintf+0x638>
		    optr += __atox(optr,*tmpptr++,16,2,digits);
20000cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000cfe:	1c5a      	adds	r2, r3, #1
20000d00:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000d02:	781b      	ldrb	r3, [r3, #0]
20000d04:	4619      	mov	r1, r3
20000d06:	4b1c      	ldr	r3, [pc, #112]	@ (20000d78 <xvsprintf+0x68c>)
20000d08:	9300      	str	r3, [sp, #0]
20000d0a:	2302      	movs	r3, #2
20000d0c:	2210      	movs	r2, #16
20000d0e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000d10:	f7ff fc34 	bl	2000057c <__atox>
20000d14:	4603      	mov	r3, r0
20000d16:	461a      	mov	r2, r3
20000d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000d1a:	4413      	add	r3, r2
20000d1c:	657b      	str	r3, [r7, #84]	@ 0x54
		    x--;
20000d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000d20:	3b01      	subs	r3, #1
20000d22:	64bb      	str	r3, [r7, #72]	@ 0x48
		while (x) {
20000d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000d26:	2b00      	cmp	r3, #0
20000d28:	d1e8      	bne.n	20000cfc <xvsprintf+0x610>
		    }
		break;
20000d2a:	e012      	b.n	20000d52 <xvsprintf+0x666>
	    case 'c':
		x = va_arg(marker, int);
20000d2c:	687b      	ldr	r3, [r7, #4]
20000d2e:	1d1a      	adds	r2, r3, #4
20000d30:	607a      	str	r2, [r7, #4]
20000d32:	681b      	ldr	r3, [r3, #0]
20000d34:	64bb      	str	r3, [r7, #72]	@ 0x48
		*optr++ = x & 0xff;
20000d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000d38:	1c5a      	adds	r2, r3, #1
20000d3a:	657a      	str	r2, [r7, #84]	@ 0x54
20000d3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
20000d3e:	b2d2      	uxtb	r2, r2
20000d40:	701a      	strb	r2, [r3, #0]
		break;
20000d42:	e006      	b.n	20000d52 <xvsprintf+0x666>

	    default:
		*optr++ = *iptr;
20000d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000d46:	1c5a      	adds	r2, r3, #1
20000d48:	657a      	str	r2, [r7, #84]	@ 0x54
20000d4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
20000d4c:	7812      	ldrb	r2, [r2, #0]
20000d4e:	701a      	strb	r2, [r3, #0]
		break;
20000d50:	bf00      	nop
	    }
	iptr++;
20000d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000d54:	3301      	adds	r3, #1
20000d56:	653b      	str	r3, [r7, #80]	@ 0x50
    while (*iptr) {
20000d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000d5a:	781b      	ldrb	r3, [r3, #0]
20000d5c:	2b00      	cmp	r3, #0
20000d5e:	f47f acd4 	bne.w	2000070a <xvsprintf+0x1e>
	}

 //   *optr++ = '\r';
 //   *optr++ = '\n';
    *optr = '\0';
20000d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000d64:	2200      	movs	r2, #0
20000d66:	701a      	strb	r2, [r3, #0]

    return (optr - outbuf);
20000d68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
20000d6a:	68fb      	ldr	r3, [r7, #12]
20000d6c:	1ad3      	subs	r3, r2, r3
}
20000d6e:	4618      	mov	r0, r3
20000d70:	3758      	adds	r7, #88	@ 0x58
20000d72:	46bd      	mov	sp, r7
20000d74:	bdb0      	pop	{r4, r5, r7, pc}
20000d76:	bf00      	nop
20000d78:	200021e4 	.word	0x200021e4
20000d7c:	200021f8 	.word	0x200021f8

20000d80 <printf>:
    *  Return value:
    *  	   number of bytes written
    ********************************************************************* */

int printf(const char *templat,...)
{
20000d80:	b40f      	push	{r0, r1, r2, r3}
20000d82:	b580      	push	{r7, lr}
20000d84:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
20000d88:	af00      	add	r7, sp, #0
    va_list marker;
    int count;
    char buffer[512];

    va_start(marker,templat);
20000d8a:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
20000d8e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
    count = xvsprintf(buffer,templat,marker);
20000d92:	1d3b      	adds	r3, r7, #4
20000d94:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
20000d98:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
20000d9c:	4618      	mov	r0, r3
20000d9e:	f7ff fca5 	bl	200006ec <xvsprintf>
20000da2:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
    va_end(marker);


    for(int i = 0; i< count; i++){
20000da6:	2300      	movs	r3, #0
20000da8:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
20000dac:	e00f      	b.n	20000dce <printf+0x4e>
    	putc(buffer[i]);
20000dae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
20000db2:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
20000db6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
20000dba:	4413      	add	r3, r2
20000dbc:	781b      	ldrb	r3, [r3, #0]
20000dbe:	4618      	mov	r0, r3
20000dc0:	f000 f816 	bl	20000df0 <putc>
    for(int i = 0; i< count; i++){
20000dc4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
20000dc8:	3301      	adds	r3, #1
20000dca:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
20000dce:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
20000dd2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
20000dd6:	429a      	cmp	r2, r3
20000dd8:	dbe9      	blt.n	20000dae <printf+0x2e>
    }

    //putc('\r');
    //putc('\n');

    return count;
20000dda:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
}
20000dde:	4618      	mov	r0, r3
20000de0:	f507 7704 	add.w	r7, r7, #528	@ 0x210
20000de4:	46bd      	mov	sp, r7
20000de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20000dea:	b004      	add	sp, #16
20000dec:	4770      	bx	lr
	...

20000df0 <putc>:
	for(int i = 0; i< strlen(str); i++)
		putc(*str++);
}


void putc(char c) {
20000df0:	b480      	push	{r7}
20000df2:	b085      	sub	sp, #20
20000df4:	af00      	add	r7, sp, #0
20000df6:	4603      	mov	r3, r0
20000df8:	71fb      	strb	r3, [r7, #7]

    //volatile uint32_t *usart_isr = &UART->USART_ISR;
    volatile uint32_t *usart_isr = (volatile uint32_t *)(0x40013800 + 0x1C);
20000dfa:	4b10      	ldr	r3, [pc, #64]	@ (20000e3c <putc+0x4c>)
20000dfc:	60fb      	str	r3, [r7, #12]

    //volatile uint32_t *usart_tdr = &UART->USART_TDR;
    volatile uint32_t *usart_tdr = (volatile uint32_t *)(0x40013800 + 0x28);
20000dfe:	4b10      	ldr	r3, [pc, #64]	@ (20000e40 <putc+0x50>)
20000e00:	60bb      	str	r3, [r7, #8]

    if (c == '\n'){
20000e02:	79fb      	ldrb	r3, [r7, #7]
20000e04:	2b0a      	cmp	r3, #10
20000e06:	d109      	bne.n	20000e1c <putc+0x2c>

		 while((*usart_isr & (1 << 7)) == 0);
20000e08:	bf00      	nop
20000e0a:	68fb      	ldr	r3, [r7, #12]
20000e0c:	681b      	ldr	r3, [r3, #0]
20000e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000e12:	2b00      	cmp	r3, #0
20000e14:	d0f9      	beq.n	20000e0a <putc+0x1a>
		 *usart_tdr = '\r';
20000e16:	68bb      	ldr	r3, [r7, #8]
20000e18:	220d      	movs	r2, #13
20000e1a:	601a      	str	r2, [r3, #0]
    }

    while((*usart_isr & (1 << 7)) == 0);
20000e1c:	bf00      	nop
20000e1e:	68fb      	ldr	r3, [r7, #12]
20000e20:	681b      	ldr	r3, [r3, #0]
20000e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000e26:	2b00      	cmp	r3, #0
20000e28:	d0f9      	beq.n	20000e1e <putc+0x2e>



    *usart_tdr = c;
20000e2a:	79fa      	ldrb	r2, [r7, #7]
20000e2c:	68bb      	ldr	r3, [r7, #8]
20000e2e:	601a      	str	r2, [r3, #0]
}
20000e30:	bf00      	nop
20000e32:	3714      	adds	r7, #20
20000e34:	46bd      	mov	sp, r7
20000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e3a:	4770      	bx	lr
20000e3c:	4001381c 	.word	0x4001381c
20000e40:	40013828 	.word	0x40013828

20000e44 <poll_for_input>:
char getc(); // Function to get a character from USART

#define BUFFER_SIZE 100


void poll_for_input(char *buffer, int size) {
20000e44:	b580      	push	{r7, lr}
20000e46:	b084      	sub	sp, #16
20000e48:	af00      	add	r7, sp, #0
20000e4a:	6078      	str	r0, [r7, #4]
20000e4c:	6039      	str	r1, [r7, #0]
    int index = 0;
20000e4e:	2300      	movs	r3, #0
20000e50:	60fb      	str	r3, [r7, #12]
    char ch;

    printf("STS>");
20000e52:	4822      	ldr	r0, [pc, #136]	@ (20000edc <poll_for_input+0x98>)
20000e54:	f7ff ff94 	bl	20000d80 <printf>

    while (1) {
        ch = getc();
20000e58:	f000 f868 	bl	20000f2c <getc>
20000e5c:	4603      	mov	r3, r0
20000e5e:	72fb      	strb	r3, [r7, #11]
        if (ch == '\r' || ch == '\n') {
20000e60:	7afb      	ldrb	r3, [r7, #11]
20000e62:	2b0d      	cmp	r3, #13
20000e64:	d002      	beq.n	20000e6c <poll_for_input+0x28>
20000e66:	7afb      	ldrb	r3, [r7, #11]
20000e68:	2b0a      	cmp	r3, #10
20000e6a:	d113      	bne.n	20000e94 <poll_for_input+0x50>

			if (index == 0) {
20000e6c:	68fb      	ldr	r3, [r7, #12]
20000e6e:	2b00      	cmp	r3, #0
20000e70:	d106      	bne.n	20000e80 <poll_for_input+0x3c>
				printf("\n");
20000e72:	481b      	ldr	r0, [pc, #108]	@ (20000ee0 <poll_for_input+0x9c>)
20000e74:	f7ff ff84 	bl	20000d80 <printf>
				printf("STS> ");
20000e78:	481a      	ldr	r0, [pc, #104]	@ (20000ee4 <poll_for_input+0xa0>)
20000e7a:	f7ff ff81 	bl	20000d80 <printf>
				continue;
20000e7e:	e027      	b.n	20000ed0 <poll_for_input+0x8c>
			}
            buffer[index] = '\0';
20000e80:	68fb      	ldr	r3, [r7, #12]
20000e82:	687a      	ldr	r2, [r7, #4]
20000e84:	4413      	add	r3, r2
20000e86:	2200      	movs	r2, #0
20000e88:	701a      	strb	r2, [r3, #0]
            printf("\nCaptured command: '%s'\n", buffer);
20000e8a:	6879      	ldr	r1, [r7, #4]
20000e8c:	4816      	ldr	r0, [pc, #88]	@ (20000ee8 <poll_for_input+0xa4>)
20000e8e:	f7ff ff77 	bl	20000d80 <printf>
            break;
20000e92:	e01e      	b.n	20000ed2 <poll_for_input+0x8e>
        } else if (ch == '\b' && index > 0) {
20000e94:	7afb      	ldrb	r3, [r7, #11]
20000e96:	2b08      	cmp	r3, #8
20000e98:	d109      	bne.n	20000eae <poll_for_input+0x6a>
20000e9a:	68fb      	ldr	r3, [r7, #12]
20000e9c:	2b00      	cmp	r3, #0
20000e9e:	dd06      	ble.n	20000eae <poll_for_input+0x6a>
            index--;
20000ea0:	68fb      	ldr	r3, [r7, #12]
20000ea2:	3b01      	subs	r3, #1
20000ea4:	60fb      	str	r3, [r7, #12]
            printf("\b \b");
20000ea6:	4811      	ldr	r0, [pc, #68]	@ (20000eec <poll_for_input+0xa8>)
20000ea8:	f7ff ff6a 	bl	20000d80 <printf>
20000eac:	e010      	b.n	20000ed0 <poll_for_input+0x8c>
        } else if (index < size - 1) {
20000eae:	683b      	ldr	r3, [r7, #0]
20000eb0:	3b01      	subs	r3, #1
20000eb2:	68fa      	ldr	r2, [r7, #12]
20000eb4:	429a      	cmp	r2, r3
20000eb6:	dacf      	bge.n	20000e58 <poll_for_input+0x14>
            buffer[index++] = ch;
20000eb8:	68fb      	ldr	r3, [r7, #12]
20000eba:	1c5a      	adds	r2, r3, #1
20000ebc:	60fa      	str	r2, [r7, #12]
20000ebe:	461a      	mov	r2, r3
20000ec0:	687b      	ldr	r3, [r7, #4]
20000ec2:	4413      	add	r3, r2
20000ec4:	7afa      	ldrb	r2, [r7, #11]
20000ec6:	701a      	strb	r2, [r3, #0]
            putc(ch);
20000ec8:	7afb      	ldrb	r3, [r7, #11]
20000eca:	4618      	mov	r0, r3
20000ecc:	f7ff ff90 	bl	20000df0 <putc>
        ch = getc();
20000ed0:	e7c2      	b.n	20000e58 <poll_for_input+0x14>
        }
    }
}
20000ed2:	bf00      	nop
20000ed4:	3710      	adds	r7, #16
20000ed6:	46bd      	mov	sp, r7
20000ed8:	bd80      	pop	{r7, pc}
20000eda:	bf00      	nop
20000edc:	20001e0c 	.word	0x20001e0c
20000ee0:	20001e14 	.word	0x20001e14
20000ee4:	20001e18 	.word	0x20001e18
20000ee8:	20001e20 	.word	0x20001e20
20000eec:	20001e3c 	.word	0x20001e3c

20000ef0 <sts_main>:

void sts_main(int a, int b) {
20000ef0:	b580      	push	{r7, lr}
20000ef2:	b09c      	sub	sp, #112	@ 0x70
20000ef4:	af00      	add	r7, sp, #0
20000ef6:	6078      	str	r0, [r7, #4]
20000ef8:	6039      	str	r1, [r7, #0]
    char input_buffer[BUFFER_SIZE];
    printf("STS Silicon Testing Software type help to see list of available commands\n");
20000efa:	480a      	ldr	r0, [pc, #40]	@ (20000f24 <sts_main+0x34>)
20000efc:	f7ff ff40 	bl	20000d80 <printf>

    register_ui_commands();
20000f00:	f000 f866 	bl	20000fd0 <register_ui_commands>
	while(1){

		poll_for_input(input_buffer, BUFFER_SIZE);
20000f04:	f107 030c 	add.w	r3, r7, #12
20000f08:	2164      	movs	r1, #100	@ 0x64
20000f0a:	4618      	mov	r0, r3
20000f0c:	f7ff ff9a 	bl	20000e44 <poll_for_input>


		//printf("\nYou entered: %s\n", input_buffer);

		execute_command(input_buffer);
20000f10:	f107 030c 	add.w	r3, r7, #12
20000f14:	4618      	mov	r0, r3
20000f16:	f000 f91d 	bl	20001154 <execute_command>

		printf("\n");
20000f1a:	4803      	ldr	r0, [pc, #12]	@ (20000f28 <sts_main+0x38>)
20000f1c:	f7ff ff30 	bl	20000d80 <printf>
	while(1){
20000f20:	bf00      	nop
20000f22:	e7ef      	b.n	20000f04 <sts_main+0x14>
20000f24:	20001e40 	.word	0x20001e40
20000f28:	20001e14 	.word	0x20001e14

20000f2c <getc>:
	}

}


char getc() {
20000f2c:	b480      	push	{r7}
20000f2e:	b083      	sub	sp, #12
20000f30:	af00      	add	r7, sp, #0
    volatile uint32_t *usart_isr = (volatile uint32_t *)(0x40013800 + 0x1C);
20000f32:	4b0a      	ldr	r3, [pc, #40]	@ (20000f5c <getc+0x30>)
20000f34:	607b      	str	r3, [r7, #4]
    volatile uint32_t *usart_rdr = (volatile uint32_t *)(0x40013800 + 0x24);
20000f36:	4b0a      	ldr	r3, [pc, #40]	@ (20000f60 <getc+0x34>)
20000f38:	603b      	str	r3, [r7, #0]


    while ((*usart_isr & (1 << 5)) == 0);
20000f3a:	bf00      	nop
20000f3c:	687b      	ldr	r3, [r7, #4]
20000f3e:	681b      	ldr	r3, [r3, #0]
20000f40:	f003 0320 	and.w	r3, r3, #32
20000f44:	2b00      	cmp	r3, #0
20000f46:	d0f9      	beq.n	20000f3c <getc+0x10>

    return (char)(*usart_rdr & 0xFF);
20000f48:	683b      	ldr	r3, [r7, #0]
20000f4a:	681b      	ldr	r3, [r3, #0]
20000f4c:	b2db      	uxtb	r3, r3
}
20000f4e:	4618      	mov	r0, r3
20000f50:	370c      	adds	r7, #12
20000f52:	46bd      	mov	sp, r7
20000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f58:	4770      	bx	lr
20000f5a:	bf00      	nop
20000f5c:	4001381c 	.word	0x4001381c
20000f60:	40013824 	.word	0x40013824

20000f64 <add_cmd>:

#define MAX_COMMANDS 50
CommandWithArgs command_list[MAX_COMMANDS];
int command_count = 0;

int add_cmd(const char *name, void (*function)(int argc, char *argv[]), const char *description) {
20000f64:	b480      	push	{r7}
20000f66:	b085      	sub	sp, #20
20000f68:	af00      	add	r7, sp, #0
20000f6a:	60f8      	str	r0, [r7, #12]
20000f6c:	60b9      	str	r1, [r7, #8]
20000f6e:	607a      	str	r2, [r7, #4]
    command_list[command_count].name = name;
20000f70:	4b15      	ldr	r3, [pc, #84]	@ (20000fc8 <add_cmd+0x64>)
20000f72:	681a      	ldr	r2, [r3, #0]
20000f74:	4915      	ldr	r1, [pc, #84]	@ (20000fcc <add_cmd+0x68>)
20000f76:	4613      	mov	r3, r2
20000f78:	005b      	lsls	r3, r3, #1
20000f7a:	4413      	add	r3, r2
20000f7c:	009b      	lsls	r3, r3, #2
20000f7e:	440b      	add	r3, r1
20000f80:	68fa      	ldr	r2, [r7, #12]
20000f82:	601a      	str	r2, [r3, #0]
    command_list[command_count].function = function;
20000f84:	4b10      	ldr	r3, [pc, #64]	@ (20000fc8 <add_cmd+0x64>)
20000f86:	681a      	ldr	r2, [r3, #0]
20000f88:	4910      	ldr	r1, [pc, #64]	@ (20000fcc <add_cmd+0x68>)
20000f8a:	4613      	mov	r3, r2
20000f8c:	005b      	lsls	r3, r3, #1
20000f8e:	4413      	add	r3, r2
20000f90:	009b      	lsls	r3, r3, #2
20000f92:	440b      	add	r3, r1
20000f94:	3304      	adds	r3, #4
20000f96:	68ba      	ldr	r2, [r7, #8]
20000f98:	601a      	str	r2, [r3, #0]
    command_list[command_count].description = description;
20000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (20000fc8 <add_cmd+0x64>)
20000f9c:	681a      	ldr	r2, [r3, #0]
20000f9e:	490b      	ldr	r1, [pc, #44]	@ (20000fcc <add_cmd+0x68>)
20000fa0:	4613      	mov	r3, r2
20000fa2:	005b      	lsls	r3, r3, #1
20000fa4:	4413      	add	r3, r2
20000fa6:	009b      	lsls	r3, r3, #2
20000fa8:	440b      	add	r3, r1
20000faa:	3308      	adds	r3, #8
20000fac:	687a      	ldr	r2, [r7, #4]
20000fae:	601a      	str	r2, [r3, #0]
    command_count++;
20000fb0:	4b05      	ldr	r3, [pc, #20]	@ (20000fc8 <add_cmd+0x64>)
20000fb2:	681b      	ldr	r3, [r3, #0]
20000fb4:	3301      	adds	r3, #1
20000fb6:	4a04      	ldr	r2, [pc, #16]	@ (20000fc8 <add_cmd+0x64>)
20000fb8:	6013      	str	r3, [r2, #0]

    return 0;
20000fba:	2300      	movs	r3, #0
}
20000fbc:	4618      	mov	r0, r3
20000fbe:	3714      	adds	r7, #20
20000fc0:	46bd      	mov	sp, r7
20000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
20000fc6:	4770      	bx	lr
20000fc8:	200025e0 	.word	0x200025e0
20000fcc:	20002388 	.word	0x20002388

20000fd0 <register_ui_commands>:

void register_ui_commands() {
20000fd0:	b580      	push	{r7, lr}
20000fd2:	af00      	add	r7, sp, #0
    add_cmd("simple", simple_command, "Executes a simple command.");
20000fd4:	4a1c      	ldr	r2, [pc, #112]	@ (20001048 <register_ui_commands+0x78>)
20000fd6:	491d      	ldr	r1, [pc, #116]	@ (2000104c <register_ui_commands+0x7c>)
20000fd8:	481d      	ldr	r0, [pc, #116]	@ (20001050 <register_ui_commands+0x80>)
20000fda:	f7ff ffc3 	bl	20000f64 <add_cmd>
    add_cmd("help", help_command, "Displays help information.");
20000fde:	4a1d      	ldr	r2, [pc, #116]	@ (20001054 <register_ui_commands+0x84>)
20000fe0:	491d      	ldr	r1, [pc, #116]	@ (20001058 <register_ui_commands+0x88>)
20000fe2:	481e      	ldr	r0, [pc, #120]	@ (2000105c <register_ui_commands+0x8c>)
20000fe4:	f7ff ffbe 	bl	20000f64 <add_cmd>
    add_cmd("display", ui_cmd_display, "Displays memory contents.");
20000fe8:	4a1d      	ldr	r2, [pc, #116]	@ (20001060 <register_ui_commands+0x90>)
20000fea:	491e      	ldr	r1, [pc, #120]	@ (20001064 <register_ui_commands+0x94>)
20000fec:	481e      	ldr	r0, [pc, #120]	@ (20001068 <register_ui_commands+0x98>)
20000fee:	f7ff ffb9 	bl	20000f64 <add_cmd>
    add_cmd("edit", ui_cmd_edit, "Edits a memory location.");
20000ff2:	4a1e      	ldr	r2, [pc, #120]	@ (2000106c <register_ui_commands+0x9c>)
20000ff4:	491e      	ldr	r1, [pc, #120]	@ (20001070 <register_ui_commands+0xa0>)
20000ff6:	481f      	ldr	r0, [pc, #124]	@ (20001074 <register_ui_commands+0xa4>)
20000ff8:	f7ff ffb4 	bl	20000f64 <add_cmd>
    add_cmd("ledr", LEDR_Init, "Red LED.");
20000ffc:	4a1e      	ldr	r2, [pc, #120]	@ (20001078 <register_ui_commands+0xa8>)
20000ffe:	491f      	ldr	r1, [pc, #124]	@ (2000107c <register_ui_commands+0xac>)
20001000:	481f      	ldr	r0, [pc, #124]	@ (20001080 <register_ui_commands+0xb0>)
20001002:	f7ff ffaf 	bl	20000f64 <add_cmd>
    add_cmd("i2c", ui_cmd_I2C, "Executes an I2C command.");
20001006:	4a1f      	ldr	r2, [pc, #124]	@ (20001084 <register_ui_commands+0xb4>)
20001008:	491f      	ldr	r1, [pc, #124]	@ (20001088 <register_ui_commands+0xb8>)
2000100a:	4820      	ldr	r0, [pc, #128]	@ (2000108c <register_ui_commands+0xbc>)
2000100c:	f7ff ffaa 	bl	20000f64 <add_cmd>
    add_cmd("joystick", ui_cmd_joystick, "Handles joystick input.");
20001010:	4a1f      	ldr	r2, [pc, #124]	@ (20001090 <register_ui_commands+0xc0>)
20001012:	4920      	ldr	r1, [pc, #128]	@ (20001094 <register_ui_commands+0xc4>)
20001014:	4820      	ldr	r0, [pc, #128]	@ (20001098 <register_ui_commands+0xc8>)
20001016:	f7ff ffa5 	bl	20000f64 <add_cmd>
    add_cmd("uart", uart_handler, "Handles UART communication.");
2000101a:	4a20      	ldr	r2, [pc, #128]	@ (2000109c <register_ui_commands+0xcc>)
2000101c:	4920      	ldr	r1, [pc, #128]	@ (200010a0 <register_ui_commands+0xd0>)
2000101e:	4821      	ldr	r0, [pc, #132]	@ (200010a4 <register_ui_commands+0xd4>)
20001020:	f7ff ffa0 	bl	20000f64 <add_cmd>
    add_cmd("i2cwrite", ui_cmd_write_I2C, "Writes to I2C.");
20001024:	4a20      	ldr	r2, [pc, #128]	@ (200010a8 <register_ui_commands+0xd8>)
20001026:	4921      	ldr	r1, [pc, #132]	@ (200010ac <register_ui_commands+0xdc>)
20001028:	4821      	ldr	r0, [pc, #132]	@ (200010b0 <register_ui_commands+0xe0>)
2000102a:	f7ff ff9b 	bl	20000f64 <add_cmd>
    add_cmd("measureclock", ui_clock_measure, "measure clock" );
2000102e:	4a21      	ldr	r2, [pc, #132]	@ (200010b4 <register_ui_commands+0xe4>)
20001030:	4921      	ldr	r1, [pc, #132]	@ (200010b8 <register_ui_commands+0xe8>)
20001032:	4822      	ldr	r0, [pc, #136]	@ (200010bc <register_ui_commands+0xec>)
20001034:	f7ff ff96 	bl	20000f64 <add_cmd>
    add_cmd("ledg", ui_cmd_LEDG, "Green LED" );
20001038:	4a21      	ldr	r2, [pc, #132]	@ (200010c0 <register_ui_commands+0xf0>)
2000103a:	4922      	ldr	r1, [pc, #136]	@ (200010c4 <register_ui_commands+0xf4>)
2000103c:	4822      	ldr	r0, [pc, #136]	@ (200010c8 <register_ui_commands+0xf8>)
2000103e:	f7ff ff91 	bl	20000f64 <add_cmd>
}
20001042:	bf00      	nop
20001044:	bd80      	pop	{r7, pc}
20001046:	bf00      	nop
20001048:	20001e8c 	.word	0x20001e8c
2000104c:	20001259 	.word	0x20001259
20001050:	20001ea8 	.word	0x20001ea8
20001054:	20001eb0 	.word	0x20001eb0
20001058:	2000129d 	.word	0x2000129d
2000105c:	20001ecc 	.word	0x20001ecc
20001060:	20001ed4 	.word	0x20001ed4
20001064:	20001309 	.word	0x20001309
20001068:	20001ef0 	.word	0x20001ef0
2000106c:	20001ef8 	.word	0x20001ef8
20001070:	20001369 	.word	0x20001369
20001074:	20001f14 	.word	0x20001f14
20001078:	20001f1c 	.word	0x20001f1c
2000107c:	200013d5 	.word	0x200013d5
20001080:	20001f28 	.word	0x20001f28
20001084:	20001f30 	.word	0x20001f30
20001088:	20001695 	.word	0x20001695
2000108c:	20001f4c 	.word	0x20001f4c
20001090:	20001f50 	.word	0x20001f50
20001094:	20001a21 	.word	0x20001a21
20001098:	20001f68 	.word	0x20001f68
2000109c:	20001f74 	.word	0x20001f74
200010a0:	20001ac9 	.word	0x20001ac9
200010a4:	20001f90 	.word	0x20001f90
200010a8:	20001f98 	.word	0x20001f98
200010ac:	200018f1 	.word	0x200018f1
200010b0:	20001fa8 	.word	0x20001fa8
200010b4:	20001fb4 	.word	0x20001fb4
200010b8:	20001b35 	.word	0x20001b35
200010bc:	20001fc4 	.word	0x20001fc4
200010c0:	20001fd4 	.word	0x20001fd4
200010c4:	200014dd 	.word	0x200014dd
200010c8:	20001fe0 	.word	0x20001fe0

200010cc <split_string>:


#define COMMAND_COUNT (sizeof(command_list) / sizeof(CommandWithArgs))


char* split_string(char* str, char delimiter, int* current_position) {
200010cc:	b480      	push	{r7}
200010ce:	b087      	sub	sp, #28
200010d0:	af00      	add	r7, sp, #0
200010d2:	60f8      	str	r0, [r7, #12]
200010d4:	460b      	mov	r3, r1
200010d6:	607a      	str	r2, [r7, #4]
200010d8:	72fb      	strb	r3, [r7, #11]
    if (str[*current_position] == '\0') {
200010da:	687b      	ldr	r3, [r7, #4]
200010dc:	681b      	ldr	r3, [r3, #0]
200010de:	461a      	mov	r2, r3
200010e0:	68fb      	ldr	r3, [r7, #12]
200010e2:	4413      	add	r3, r2
200010e4:	781b      	ldrb	r3, [r3, #0]
200010e6:	2b00      	cmp	r3, #0
200010e8:	d101      	bne.n	200010ee <split_string+0x22>
        return NULL;
200010ea:	2300      	movs	r3, #0
200010ec:	e02b      	b.n	20001146 <split_string+0x7a>
    }

    char* token = &str[*current_position];
200010ee:	687b      	ldr	r3, [r7, #4]
200010f0:	681b      	ldr	r3, [r3, #0]
200010f2:	461a      	mov	r2, r3
200010f4:	68fb      	ldr	r3, [r7, #12]
200010f6:	4413      	add	r3, r2
200010f8:	617b      	str	r3, [r7, #20]
    while (str[*current_position] != '\0') {
200010fa:	e01b      	b.n	20001134 <split_string+0x68>
        if (str[*current_position] == delimiter) {
200010fc:	687b      	ldr	r3, [r7, #4]
200010fe:	681b      	ldr	r3, [r3, #0]
20001100:	461a      	mov	r2, r3
20001102:	68fb      	ldr	r3, [r7, #12]
20001104:	4413      	add	r3, r2
20001106:	781b      	ldrb	r3, [r3, #0]
20001108:	7afa      	ldrb	r2, [r7, #11]
2000110a:	429a      	cmp	r2, r3
2000110c:	d10d      	bne.n	2000112a <split_string+0x5e>
            str[*current_position] = '\0';
2000110e:	687b      	ldr	r3, [r7, #4]
20001110:	681b      	ldr	r3, [r3, #0]
20001112:	461a      	mov	r2, r3
20001114:	68fb      	ldr	r3, [r7, #12]
20001116:	4413      	add	r3, r2
20001118:	2200      	movs	r2, #0
2000111a:	701a      	strb	r2, [r3, #0]
            (*current_position)++;
2000111c:	687b      	ldr	r3, [r7, #4]
2000111e:	681b      	ldr	r3, [r3, #0]
20001120:	1c5a      	adds	r2, r3, #1
20001122:	687b      	ldr	r3, [r7, #4]
20001124:	601a      	str	r2, [r3, #0]
            return token;
20001126:	697b      	ldr	r3, [r7, #20]
20001128:	e00d      	b.n	20001146 <split_string+0x7a>
        }
        (*current_position)++;
2000112a:	687b      	ldr	r3, [r7, #4]
2000112c:	681b      	ldr	r3, [r3, #0]
2000112e:	1c5a      	adds	r2, r3, #1
20001130:	687b      	ldr	r3, [r7, #4]
20001132:	601a      	str	r2, [r3, #0]
    while (str[*current_position] != '\0') {
20001134:	687b      	ldr	r3, [r7, #4]
20001136:	681b      	ldr	r3, [r3, #0]
20001138:	461a      	mov	r2, r3
2000113a:	68fb      	ldr	r3, [r7, #12]
2000113c:	4413      	add	r3, r2
2000113e:	781b      	ldrb	r3, [r3, #0]
20001140:	2b00      	cmp	r3, #0
20001142:	d1db      	bne.n	200010fc <split_string+0x30>
    }

    return token;
20001144:	697b      	ldr	r3, [r7, #20]
}
20001146:	4618      	mov	r0, r3
20001148:	371c      	adds	r7, #28
2000114a:	46bd      	mov	sp, r7
2000114c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001150:	4770      	bx	lr
	...

20001154 <execute_command>:


void execute_command(char *input_buffer) {
20001154:	b580      	push	{r7, lr}
20001156:	b0ea      	sub	sp, #424	@ 0x1a8
20001158:	af00      	add	r7, sp, #0
2000115a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
2000115e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
20001162:	6018      	str	r0, [r3, #0]
    char *argv[BUFFER_SIZE];
    int argc = 0;
20001164:	2300      	movs	r3, #0
20001166:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    int current_position = 0;
2000116a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
2000116e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
20001172:	2200      	movs	r2, #0
20001174:	601a      	str	r2, [r3, #0]

    char *token = split_string(input_buffer, ' ', &current_position);
20001176:	f107 0208 	add.w	r2, r7, #8
2000117a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
2000117e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
20001182:	2120      	movs	r1, #32
20001184:	6818      	ldr	r0, [r3, #0]
20001186:	f7ff ffa1 	bl	200010cc <split_string>
2000118a:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
    while (token != NULL && argc < BUFFER_SIZE) {
2000118e:	e018      	b.n	200011c2 <execute_command+0x6e>
        argv[argc++] = token;
20001190:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
20001194:	1c5a      	adds	r2, r3, #1
20001196:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
2000119a:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
2000119e:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
200011a2:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
200011a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        token = split_string(input_buffer, ' ', &current_position);
200011aa:	f107 0208 	add.w	r2, r7, #8
200011ae:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
200011b2:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
200011b6:	2120      	movs	r1, #32
200011b8:	6818      	ldr	r0, [r3, #0]
200011ba:	f7ff ff87 	bl	200010cc <split_string>
200011be:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
    while (token != NULL && argc < BUFFER_SIZE) {
200011c2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
200011c6:	2b00      	cmp	r3, #0
200011c8:	d003      	beq.n	200011d2 <execute_command+0x7e>
200011ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
200011ce:	2b63      	cmp	r3, #99	@ 0x63
200011d0:	ddde      	ble.n	20001190 <execute_command+0x3c>
    }

    for (int i = 0; i < COMMAND_COUNT; i++) {
200011d2:	2300      	movs	r3, #0
200011d4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
200011d8:	e029      	b.n	2000122e <execute_command+0xda>
        if (strcmp(argv[0], command_list[i].name) == 0) {
200011da:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
200011de:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
200011e2:	6818      	ldr	r0, [r3, #0]
200011e4:	491a      	ldr	r1, [pc, #104]	@ (20001250 <execute_command+0xfc>)
200011e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
200011ea:	4613      	mov	r3, r2
200011ec:	005b      	lsls	r3, r3, #1
200011ee:	4413      	add	r3, r2
200011f0:	009b      	lsls	r3, r3, #2
200011f2:	440b      	add	r3, r1
200011f4:	681b      	ldr	r3, [r3, #0]
200011f6:	4619      	mov	r1, r3
200011f8:	f7fe ffc6 	bl	20000188 <strcmp>
200011fc:	4603      	mov	r3, r0
200011fe:	2b00      	cmp	r3, #0
20001200:	d110      	bne.n	20001224 <execute_command+0xd0>
            command_list[i].function(argc, argv);
20001202:	4913      	ldr	r1, [pc, #76]	@ (20001250 <execute_command+0xfc>)
20001204:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
20001208:	4613      	mov	r3, r2
2000120a:	005b      	lsls	r3, r3, #1
2000120c:	4413      	add	r3, r2
2000120e:	009b      	lsls	r3, r3, #2
20001210:	440b      	add	r3, r1
20001212:	3304      	adds	r3, #4
20001214:	681b      	ldr	r3, [r3, #0]
20001216:	f107 020c 	add.w	r2, r7, #12
2000121a:	4611      	mov	r1, r2
2000121c:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
20001220:	4798      	blx	r3
20001222:	e011      	b.n	20001248 <execute_command+0xf4>
    for (int i = 0; i < COMMAND_COUNT; i++) {
20001224:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
20001228:	3301      	adds	r3, #1
2000122a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
2000122e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
20001232:	2b31      	cmp	r3, #49	@ 0x31
20001234:	d9d1      	bls.n	200011da <execute_command+0x86>
            return;
        }
    }
    printf("Unknown command: %s\n", argv[0]);
20001236:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
2000123a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
2000123e:	681b      	ldr	r3, [r3, #0]
20001240:	4619      	mov	r1, r3
20001242:	4804      	ldr	r0, [pc, #16]	@ (20001254 <execute_command+0x100>)
20001244:	f7ff fd9c 	bl	20000d80 <printf>
}
20001248:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
2000124c:	46bd      	mov	sp, r7
2000124e:	bd80      	pop	{r7, pc}
20001250:	20002388 	.word	0x20002388
20001254:	20001fe8 	.word	0x20001fe8

20001258 <simple_command>:


void simple_command(int argc, char *argv[]) {
20001258:	b580      	push	{r7, lr}
2000125a:	b082      	sub	sp, #8
2000125c:	af00      	add	r7, sp, #0
2000125e:	6078      	str	r0, [r7, #4]
20001260:	6039      	str	r1, [r7, #0]
    printf("Executing simple command.\n");
20001262:	480c      	ldr	r0, [pc, #48]	@ (20001294 <simple_command+0x3c>)
20001264:	f7ff fd8c 	bl	20000d80 <printf>
    if (argc > 1) {
20001268:	687b      	ldr	r3, [r7, #4]
2000126a:	2b01      	cmp	r3, #1
2000126c:	dd0d      	ble.n	2000128a <simple_command+0x32>
        printf("Argument: %s\n", argv[1]);
2000126e:	683b      	ldr	r3, [r7, #0]
20001270:	3304      	adds	r3, #4
20001272:	681b      	ldr	r3, [r3, #0]
20001274:	4619      	mov	r1, r3
20001276:	4808      	ldr	r0, [pc, #32]	@ (20001298 <simple_command+0x40>)
20001278:	f7ff fd82 	bl	20000d80 <printf>
        printf("Argument: %s\n", argv[2]);
2000127c:	683b      	ldr	r3, [r7, #0]
2000127e:	3308      	adds	r3, #8
20001280:	681b      	ldr	r3, [r3, #0]
20001282:	4619      	mov	r1, r3
20001284:	4804      	ldr	r0, [pc, #16]	@ (20001298 <simple_command+0x40>)
20001286:	f7ff fd7b 	bl	20000d80 <printf>

    }
}
2000128a:	bf00      	nop
2000128c:	3708      	adds	r7, #8
2000128e:	46bd      	mov	sp, r7
20001290:	bd80      	pop	{r7, pc}
20001292:	bf00      	nop
20001294:	20002000 	.word	0x20002000
20001298:	2000201c 	.word	0x2000201c

2000129c <help_command>:

void help_command(int argc, char *argv[]) {
2000129c:	b580      	push	{r7, lr}
2000129e:	b084      	sub	sp, #16
200012a0:	af00      	add	r7, sp, #0
200012a2:	6078      	str	r0, [r7, #4]
200012a4:	6039      	str	r1, [r7, #0]
    printf("Available commands:\n");
200012a6:	4814      	ldr	r0, [pc, #80]	@ (200012f8 <help_command+0x5c>)
200012a8:	f7ff fd6a 	bl	20000d80 <printf>
    for (int i = 0; i < command_count; i++) {
200012ac:	2300      	movs	r3, #0
200012ae:	60fb      	str	r3, [r7, #12]
200012b0:	e017      	b.n	200012e2 <help_command+0x46>
        printf("- %s: %s\n", command_list[i].name, command_list[i].description);
200012b2:	4912      	ldr	r1, [pc, #72]	@ (200012fc <help_command+0x60>)
200012b4:	68fa      	ldr	r2, [r7, #12]
200012b6:	4613      	mov	r3, r2
200012b8:	005b      	lsls	r3, r3, #1
200012ba:	4413      	add	r3, r2
200012bc:	009b      	lsls	r3, r3, #2
200012be:	440b      	add	r3, r1
200012c0:	6819      	ldr	r1, [r3, #0]
200012c2:	480e      	ldr	r0, [pc, #56]	@ (200012fc <help_command+0x60>)
200012c4:	68fa      	ldr	r2, [r7, #12]
200012c6:	4613      	mov	r3, r2
200012c8:	005b      	lsls	r3, r3, #1
200012ca:	4413      	add	r3, r2
200012cc:	009b      	lsls	r3, r3, #2
200012ce:	4403      	add	r3, r0
200012d0:	3308      	adds	r3, #8
200012d2:	681b      	ldr	r3, [r3, #0]
200012d4:	461a      	mov	r2, r3
200012d6:	480a      	ldr	r0, [pc, #40]	@ (20001300 <help_command+0x64>)
200012d8:	f7ff fd52 	bl	20000d80 <printf>
    for (int i = 0; i < command_count; i++) {
200012dc:	68fb      	ldr	r3, [r7, #12]
200012de:	3301      	adds	r3, #1
200012e0:	60fb      	str	r3, [r7, #12]
200012e2:	4b08      	ldr	r3, [pc, #32]	@ (20001304 <help_command+0x68>)
200012e4:	681b      	ldr	r3, [r3, #0]
200012e6:	68fa      	ldr	r2, [r7, #12]
200012e8:	429a      	cmp	r2, r3
200012ea:	dbe2      	blt.n	200012b2 <help_command+0x16>
    }
}
200012ec:	bf00      	nop
200012ee:	bf00      	nop
200012f0:	3710      	adds	r7, #16
200012f2:	46bd      	mov	sp, r7
200012f4:	bd80      	pop	{r7, pc}
200012f6:	bf00      	nop
200012f8:	2000202c 	.word	0x2000202c
200012fc:	20002388 	.word	0x20002388
20001300:	20002044 	.word	0x20002044
20001304:	200025e0 	.word	0x200025e0

20001308 <ui_cmd_display>:

#include <stdint.h>
void ui_cmd_display(int argc, char *argv[]) {
20001308:	b580      	push	{r7, lr}
2000130a:	b088      	sub	sp, #32
2000130c:	af00      	add	r7, sp, #0
2000130e:	6078      	str	r0, [r7, #4]
20001310:	6039      	str	r1, [r7, #0]

    printf("Printing out Memory Contents:\n");
20001312:	4813      	ldr	r0, [pc, #76]	@ (20001360 <ui_cmd_display+0x58>)
20001314:	f7ff fd34 	bl	20000d80 <printf>

    char *addr_str = argv[1];
20001318:	683b      	ldr	r3, [r7, #0]
2000131a:	685b      	ldr	r3, [r3, #4]
2000131c:	61bb      	str	r3, [r7, #24]
    uint32_t address = (uint32_t)strtoul(addr_str, NULL, 0);
2000131e:	2200      	movs	r2, #0
20001320:	2100      	movs	r1, #0
20001322:	69b8      	ldr	r0, [r7, #24]
20001324:	f000 fd48 	bl	20001db8 <strtoul>
20001328:	4603      	mov	r3, r0
2000132a:	61fb      	str	r3, [r7, #28]

    volatile uint32_t *ptr;
    uint32_t value;

    volatile uint32_t *ADDRESS_END = (uint32_t *)(address + 0x32);
2000132c:	69fb      	ldr	r3, [r7, #28]
2000132e:	3332      	adds	r3, #50	@ 0x32
20001330:	617b      	str	r3, [r7, #20]

    for (; address <= (uint32_t)ADDRESS_END; address += 0x4) {
20001332:	e00c      	b.n	2000134e <ui_cmd_display+0x46>
        ptr = (volatile uint32_t *)address;
20001334:	69fb      	ldr	r3, [r7, #28]
20001336:	613b      	str	r3, [r7, #16]
        value = *ptr;
20001338:	693b      	ldr	r3, [r7, #16]
2000133a:	681b      	ldr	r3, [r3, #0]
2000133c:	60fb      	str	r3, [r7, #12]

        printf("0x%08X: 0x%08X\n", address, value);
2000133e:	68fa      	ldr	r2, [r7, #12]
20001340:	69f9      	ldr	r1, [r7, #28]
20001342:	4808      	ldr	r0, [pc, #32]	@ (20001364 <ui_cmd_display+0x5c>)
20001344:	f7ff fd1c 	bl	20000d80 <printf>
    for (; address <= (uint32_t)ADDRESS_END; address += 0x4) {
20001348:	69fb      	ldr	r3, [r7, #28]
2000134a:	3304      	adds	r3, #4
2000134c:	61fb      	str	r3, [r7, #28]
2000134e:	697b      	ldr	r3, [r7, #20]
20001350:	69fa      	ldr	r2, [r7, #28]
20001352:	429a      	cmp	r2, r3
20001354:	d9ee      	bls.n	20001334 <ui_cmd_display+0x2c>
    }
}
20001356:	bf00      	nop
20001358:	bf00      	nop
2000135a:	3720      	adds	r7, #32
2000135c:	46bd      	mov	sp, r7
2000135e:	bd80      	pop	{r7, pc}
20001360:	20002050 	.word	0x20002050
20001364:	20002070 	.word	0x20002070

20001368 <ui_cmd_edit>:


void ui_cmd_edit(int argc, char *argv[])
{
20001368:	b580      	push	{r7, lr}
2000136a:	b088      	sub	sp, #32
2000136c:	af00      	add	r7, sp, #0
2000136e:	6078      	str	r0, [r7, #4]
20001370:	6039      	str	r1, [r7, #0]

	volatile uint32_t *ptr;
	uint32_t value;

	char *addr_str = argv[1];
20001372:	683b      	ldr	r3, [r7, #0]
20001374:	685b      	ldr	r3, [r3, #4]
20001376:	61fb      	str	r3, [r7, #28]
    uint32_t address = (uint32_t)strtoul(addr_str, NULL, 0);
20001378:	2200      	movs	r2, #0
2000137a:	2100      	movs	r1, #0
2000137c:	69f8      	ldr	r0, [r7, #28]
2000137e:	f000 fd1b 	bl	20001db8 <strtoul>
20001382:	4603      	mov	r3, r0
20001384:	61bb      	str	r3, [r7, #24]

    ptr = (volatile uint32_t *)address;
20001386:	69bb      	ldr	r3, [r7, #24]
20001388:	617b      	str	r3, [r7, #20]
    value = *ptr;
2000138a:	697b      	ldr	r3, [r7, #20]
2000138c:	681b      	ldr	r3, [r3, #0]
2000138e:	613b      	str	r3, [r7, #16]

    printf("original value 0x%08X: 0x%08X\n", address, value);
20001390:	693a      	ldr	r2, [r7, #16]
20001392:	69b9      	ldr	r1, [r7, #24]
20001394:	480d      	ldr	r0, [pc, #52]	@ (200013cc <ui_cmd_edit+0x64>)
20001396:	f7ff fcf3 	bl	20000d80 <printf>


	char *value_str = argv[2];
2000139a:	683b      	ldr	r3, [r7, #0]
2000139c:	689b      	ldr	r3, [r3, #8]
2000139e:	60fb      	str	r3, [r7, #12]
	uint32_t value2 = (uint32_t)strtoul(value_str, NULL, 0);
200013a0:	2200      	movs	r2, #0
200013a2:	2100      	movs	r1, #0
200013a4:	68f8      	ldr	r0, [r7, #12]
200013a6:	f000 fd07 	bl	20001db8 <strtoul>
200013aa:	4603      	mov	r3, r0
200013ac:	60bb      	str	r3, [r7, #8]




    ptr = (volatile uint32_t *)address;
200013ae:	69bb      	ldr	r3, [r7, #24]
200013b0:	617b      	str	r3, [r7, #20]
    *ptr = value;
200013b2:	697b      	ldr	r3, [r7, #20]
200013b4:	693a      	ldr	r2, [r7, #16]
200013b6:	601a      	str	r2, [r3, #0]

    printf("new value 0x%08X: 0x%08X\n", address, value2);
200013b8:	68ba      	ldr	r2, [r7, #8]
200013ba:	69b9      	ldr	r1, [r7, #24]
200013bc:	4804      	ldr	r0, [pc, #16]	@ (200013d0 <ui_cmd_edit+0x68>)
200013be:	f7ff fcdf 	bl	20000d80 <printf>

}
200013c2:	bf00      	nop
200013c4:	3720      	adds	r7, #32
200013c6:	46bd      	mov	sp, r7
200013c8:	bd80      	pop	{r7, pc}
200013ca:	bf00      	nop
200013cc:	20002080 	.word	0x20002080
200013d0:	200020a0 	.word	0x200020a0

200013d4 <LEDR_Init>:

#define GPIOC_BASE 0x48000800

void LEDR_Init(int argc, char *argv[])

{
200013d4:	b580      	push	{r7, lr}
200013d6:	b084      	sub	sp, #16
200013d8:	af00      	add	r7, sp, #0
200013da:	6078      	str	r0, [r7, #4]
200013dc:	6039      	str	r1, [r7, #0]

	*(volatile uint32_t *)(0x40007004) |= 0x200;
200013de:	4b21      	ldr	r3, [pc, #132]	@ (20001464 <LEDR_Init+0x90>)
200013e0:	681b      	ldr	r3, [r3, #0]
200013e2:	4a20      	ldr	r2, [pc, #128]	@ (20001464 <LEDR_Init+0x90>)
200013e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
200013e8:	6013      	str	r3, [r2, #0]



    //RCC->AHB2ENR |= (1 << 2);
    RCC->AHB2ENR |= 0xF;
200013ea:	4b1f      	ldr	r3, [pc, #124]	@ (20001468 <LEDR_Init+0x94>)
200013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
200013ee:	4a1e      	ldr	r2, [pc, #120]	@ (20001468 <LEDR_Init+0x94>)
200013f0:	f043 030f 	orr.w	r3, r3, #15
200013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= (1 << 28);
200013f6:	4b1c      	ldr	r3, [pc, #112]	@ (20001468 <LEDR_Init+0x94>)
200013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
200013fa:	4a1b      	ldr	r2, [pc, #108]	@ (20001468 <LEDR_Init+0x94>)
200013fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20001400:	6593      	str	r3, [r2, #88]	@ 0x58
    //RCC->APB2ENR |= (1 << 28);
    *(volatile uint32_t *)(GPIOC_BASE) = 0x4;
20001402:	4b1a      	ldr	r3, [pc, #104]	@ (2000146c <LEDR_Init+0x98>)
20001404:	2204      	movs	r2, #4
20001406:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(GPIOC_BASE + 0x14) = 0x0; // turn off
20001408:	4b19      	ldr	r3, [pc, #100]	@ (20001470 <LEDR_Init+0x9c>)
2000140a:	2200      	movs	r2, #0
2000140c:	601a      	str	r2, [r3, #0]

    //GPIOC->GPIOx_MODER &= ~(0x3 << (1 * 2));
    //GPIOC->GPIOx_MODER |= (0x1 << (1 * 2));

    int state = atoi(argv[1]);
2000140e:	683b      	ldr	r3, [r7, #0]
20001410:	3304      	adds	r3, #4
20001412:	681b      	ldr	r3, [r3, #0]
20001414:	4618      	mov	r0, r3
20001416:	f000 fbd9 	bl	20001bcc <atoi>
2000141a:	60f8      	str	r0, [r7, #12]
    volatile uint32_t *GPIOC_ODR = (uint32_t *)(GPIOC_BASE + 0x14);
2000141c:	4b14      	ldr	r3, [pc, #80]	@ (20001470 <LEDR_Init+0x9c>)
2000141e:	60bb      	str	r3, [r7, #8]
    if (state == 1) {
20001420:	68fb      	ldr	r3, [r7, #12]
20001422:	2b01      	cmp	r3, #1
20001424:	d109      	bne.n	2000143a <LEDR_Init+0x66>
        GPIOC->GPIOx_ODR &= ~(1 << 1);
20001426:	4b11      	ldr	r3, [pc, #68]	@ (2000146c <LEDR_Init+0x98>)
20001428:	695b      	ldr	r3, [r3, #20]
2000142a:	4a10      	ldr	r2, [pc, #64]	@ (2000146c <LEDR_Init+0x98>)
2000142c:	f023 0302 	bic.w	r3, r3, #2
20001430:	6153      	str	r3, [r2, #20]
        printf("LED is ON\n");
20001432:	4810      	ldr	r0, [pc, #64]	@ (20001474 <LEDR_Init+0xa0>)
20001434:	f7ff fca4 	bl	20000d80 <printf>
        GPIOC->GPIOx_ODR |= (1 << 1);
        printf("LED is OFF\n");
    } else {
        printf("Invalid state. Use 0 for OFF and 1 for ON.\n");
    }
}
20001438:	e00f      	b.n	2000145a <LEDR_Init+0x86>
    } else if (state == 0) {
2000143a:	68fb      	ldr	r3, [r7, #12]
2000143c:	2b00      	cmp	r3, #0
2000143e:	d109      	bne.n	20001454 <LEDR_Init+0x80>
        GPIOC->GPIOx_ODR |= (1 << 1);
20001440:	4b0a      	ldr	r3, [pc, #40]	@ (2000146c <LEDR_Init+0x98>)
20001442:	695b      	ldr	r3, [r3, #20]
20001444:	4a09      	ldr	r2, [pc, #36]	@ (2000146c <LEDR_Init+0x98>)
20001446:	f043 0302 	orr.w	r3, r3, #2
2000144a:	6153      	str	r3, [r2, #20]
        printf("LED is OFF\n");
2000144c:	480a      	ldr	r0, [pc, #40]	@ (20001478 <LEDR_Init+0xa4>)
2000144e:	f7ff fc97 	bl	20000d80 <printf>
}
20001452:	e002      	b.n	2000145a <LEDR_Init+0x86>
        printf("Invalid state. Use 0 for OFF and 1 for ON.\n");
20001454:	4809      	ldr	r0, [pc, #36]	@ (2000147c <LEDR_Init+0xa8>)
20001456:	f7ff fc93 	bl	20000d80 <printf>
}
2000145a:	bf00      	nop
2000145c:	3710      	adds	r7, #16
2000145e:	46bd      	mov	sp, r7
20001460:	bd80      	pop	{r7, pc}
20001462:	bf00      	nop
20001464:	40007004 	.word	0x40007004
20001468:	40021000 	.word	0x40021000
2000146c:	48000800 	.word	0x48000800
20001470:	48000814 	.word	0x48000814
20001474:	200020bc 	.word	0x200020bc
20001478:	200020c8 	.word	0x200020c8
2000147c:	200020d4 	.word	0x200020d4

20001480 <LEDG_Init>:

void LEDG_Init(void) {
20001480:	b480      	push	{r7}
20001482:	b083      	sub	sp, #12
20001484:	af00      	add	r7, sp, #0

    *(volatile uint32_t *)(0x40007004) = 0x200;
20001486:	4b10      	ldr	r3, [pc, #64]	@ (200014c8 <LEDG_Init+0x48>)
20001488:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000148c:	601a      	str	r2, [r3, #0]

    volatile uint32_t *RCC_AHB2ENR = (uint32_t *)(0x40021000 + 0x4C);
2000148e:	4b0f      	ldr	r3, [pc, #60]	@ (200014cc <LEDG_Init+0x4c>)
20001490:	607b      	str	r3, [r7, #4]
    *RCC_AHB2ENR = 0xf;
20001492:	687b      	ldr	r3, [r7, #4]
20001494:	220f      	movs	r2, #15
20001496:	601a      	str	r2, [r3, #0]

    volatile uint32_t *RCC_APB1ENR1 = (uint32_t *)(0x40021000 + 0x58);
20001498:	4b0d      	ldr	r3, [pc, #52]	@ (200014d0 <LEDG_Init+0x50>)
2000149a:	603b      	str	r3, [r7, #0]
    *RCC_APB1ENR1 |= (1 << 28);
2000149c:	683b      	ldr	r3, [r7, #0]
2000149e:	681b      	ldr	r3, [r3, #0]
200014a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
200014a4:	683b      	ldr	r3, [r7, #0]
200014a6:	601a      	str	r2, [r3, #0]


    *(volatile uint32_t *)(GPIOB_BASE + 0)  |= 0x10; //
200014a8:	4b0a      	ldr	r3, [pc, #40]	@ (200014d4 <LEDG_Init+0x54>)
200014aa:	681b      	ldr	r3, [r3, #0]
200014ac:	4a09      	ldr	r2, [pc, #36]	@ (200014d4 <LEDG_Init+0x54>)
200014ae:	f043 0310 	orr.w	r3, r3, #16
200014b2:	6013      	str	r3, [r2, #0]

    *(volatile uint32_t *)(GPIOB_BASE + 0x14) = 0x0;
200014b4:	4b08      	ldr	r3, [pc, #32]	@ (200014d8 <LEDG_Init+0x58>)
200014b6:	2200      	movs	r2, #0
200014b8:	601a      	str	r2, [r3, #0]
}
200014ba:	bf00      	nop
200014bc:	370c      	adds	r7, #12
200014be:	46bd      	mov	sp, r7
200014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200014c4:	4770      	bx	lr
200014c6:	bf00      	nop
200014c8:	40007004 	.word	0x40007004
200014cc:	4002104c 	.word	0x4002104c
200014d0:	40021058 	.word	0x40021058
200014d4:	48000400 	.word	0x48000400
200014d8:	48000414 	.word	0x48000414

200014dc <ui_cmd_LEDG>:


static int ui_cmd_LEDG(int argc, char *argv[]) {
200014dc:	b580      	push	{r7, lr}
200014de:	b084      	sub	sp, #16
200014e0:	af00      	add	r7, sp, #0
200014e2:	6078      	str	r0, [r7, #4]
200014e4:	6039      	str	r1, [r7, #0]

    int state = atoi(argv[1]);
200014e6:	683b      	ldr	r3, [r7, #0]
200014e8:	3304      	adds	r3, #4
200014ea:	681b      	ldr	r3, [r3, #0]
200014ec:	4618      	mov	r0, r3
200014ee:	f000 fb6d 	bl	20001bcc <atoi>
200014f2:	60f8      	str	r0, [r7, #12]


    LEDG_Init();
200014f4:	f7ff ffc4 	bl	20001480 <LEDG_Init>
    volatile uint32_t *GPIOB_ODR = (uint32_t *)(GPIOB_BASE + 0x14);
200014f8:	4b11      	ldr	r3, [pc, #68]	@ (20001540 <ui_cmd_LEDG+0x64>)
200014fa:	60bb      	str	r3, [r7, #8]

    if (state == 0) {
200014fc:	68fb      	ldr	r3, [r7, #12]
200014fe:	2b00      	cmp	r3, #0
20001500:	d109      	bne.n	20001516 <ui_cmd_LEDG+0x3a>
    	*GPIOB_ODR |= (1 << 2);
20001502:	68bb      	ldr	r3, [r7, #8]
20001504:	681b      	ldr	r3, [r3, #0]
20001506:	f043 0204 	orr.w	r2, r3, #4
2000150a:	68bb      	ldr	r3, [r7, #8]
2000150c:	601a      	str	r2, [r3, #0]
        printf("LED1 is OFF\n");
2000150e:	480d      	ldr	r0, [pc, #52]	@ (20001544 <ui_cmd_LEDG+0x68>)
20001510:	f7ff fc36 	bl	20000d80 <printf>
20001514:	e00f      	b.n	20001536 <ui_cmd_LEDG+0x5a>
    } else if (state == 1) {
20001516:	68fb      	ldr	r3, [r7, #12]
20001518:	2b01      	cmp	r3, #1
2000151a:	d109      	bne.n	20001530 <ui_cmd_LEDG+0x54>
        *GPIOB_ODR &= ~(1 << 2);
2000151c:	68bb      	ldr	r3, [r7, #8]
2000151e:	681b      	ldr	r3, [r3, #0]
20001520:	f023 0204 	bic.w	r2, r3, #4
20001524:	68bb      	ldr	r3, [r7, #8]
20001526:	601a      	str	r2, [r3, #0]
        printf("LED1 is ON\n");
20001528:	4807      	ldr	r0, [pc, #28]	@ (20001548 <ui_cmd_LEDG+0x6c>)
2000152a:	f7ff fc29 	bl	20000d80 <printf>
2000152e:	e002      	b.n	20001536 <ui_cmd_LEDG+0x5a>

    } else{
    	printf("Invalid state. Use 0 for OFF and 1 for ON.\n");
20001530:	4806      	ldr	r0, [pc, #24]	@ (2000154c <ui_cmd_LEDG+0x70>)
20001532:	f7ff fc25 	bl	20000d80 <printf>


    }

    return 0;
20001536:	2300      	movs	r3, #0
}
20001538:	4618      	mov	r0, r3
2000153a:	3710      	adds	r7, #16
2000153c:	46bd      	mov	sp, r7
2000153e:	bd80      	pop	{r7, pc}
20001540:	48000414 	.word	0x48000414
20001544:	20002100 	.word	0x20002100
20001548:	20002110 	.word	0x20002110
2000154c:	200020d4 	.word	0x200020d4

20001550 <I2C_Init>:



void I2C_Init(void) {
20001550:	b480      	push	{r7}
20001552:	af00      	add	r7, sp, #0

    // Transmit
    I2C->I2C_CR1 = 0; // I2C_CR1, clear
20001554:	4b0e      	ldr	r3, [pc, #56]	@ (20001590 <I2C_Init+0x40>)
20001556:	2200      	movs	r2, #0
20001558:	601a      	str	r2, [r3, #0]
    I2C->I2C_TIMINGR = 0x20303e5d; // I2C timing configuration
2000155a:	4b0d      	ldr	r3, [pc, #52]	@ (20001590 <I2C_Init+0x40>)
2000155c:	4a0d      	ldr	r2, [pc, #52]	@ (20001594 <I2C_Init+0x44>)
2000155e:	611a      	str	r2, [r3, #16]
    I2C->I2C_OAR1 = 0; // I2C OAR1 configuration
20001560:	4b0b      	ldr	r3, [pc, #44]	@ (20001590 <I2C_Init+0x40>)
20001562:	2200      	movs	r2, #0
20001564:	609a      	str	r2, [r3, #8]
    I2C->I2C_OAR1 = 0x8000; // Ack own address1 mode
20001566:	4b0a      	ldr	r3, [pc, #40]	@ (20001590 <I2C_Init+0x40>)
20001568:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
2000156c:	609a      	str	r2, [r3, #8]
    I2C->I2C_CR2 = 0; // I2C CR2 configuration
2000156e:	4b08      	ldr	r3, [pc, #32]	@ (20001590 <I2C_Init+0x40>)
20001570:	2200      	movs	r2, #0
20001572:	605a      	str	r2, [r3, #4]
    USART -> USART_CR2 = 0x2008000; // Auto end, bit 15, NACK
20001574:	4b08      	ldr	r3, [pc, #32]	@ (20001598 <I2C_Init+0x48>)
20001576:	4a09      	ldr	r2, [pc, #36]	@ (2000159c <I2C_Init+0x4c>)
20001578:	605a      	str	r2, [r3, #4]
    I2C->I2C_OAR2 = 0; // I2C OAR2 configuration
2000157a:	4b05      	ldr	r3, [pc, #20]	@ (20001590 <I2C_Init+0x40>)
2000157c:	2200      	movs	r2, #0
2000157e:	60da      	str	r2, [r3, #12]
    I2C->I2C_CR1 = 1; // Enable the selected I2C peripheral
20001580:	4b03      	ldr	r3, [pc, #12]	@ (20001590 <I2C_Init+0x40>)
20001582:	2201      	movs	r2, #1
20001584:	601a      	str	r2, [r3, #0]
}
20001586:	bf00      	nop
20001588:	46bd      	mov	sp, r7
2000158a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000158e:	4770      	bx	lr
20001590:	40005400 	.word	0x40005400
20001594:	20303e5d 	.word	0x20303e5d
20001598:	40004400 	.word	0x40004400
2000159c:	02008000 	.word	0x02008000

200015a0 <I2C_Init_INIT>:


void I2C_Init_INIT(void) {
200015a0:	b480      	push	{r7}
200015a2:	af00      	add	r7, sp, #0
    // Initialization and clock configuration
    RCC->APB2ENR = 0x4001; // __HAL_RCC_SYSCFG_CLK_ENABLE();
200015a4:	4b2f      	ldr	r3, [pc, #188]	@ (20001664 <I2C_Init_INIT+0xc4>)
200015a6:	f244 0201 	movw	r2, #16385	@ 0x4001
200015aa:	661a      	str	r2, [r3, #96]	@ 0x60
    RCC->APB1ENR1 = 0x10000000; // __HAL_RCC_PWR_CLK_ENABLE();
200015ac:	4b2d      	ldr	r3, [pc, #180]	@ (20001664 <I2C_Init_INIT+0xc4>)
200015ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
200015b2:	659a      	str	r2, [r3, #88]	@ 0x58
    // RCC->CCIPR = 0; // RCC I2C clock selection (commented out as it was in the original code)
    PWR->PWR_CR2 = 0x200; // PWR_CR2 enable
200015b4:	4b2c      	ldr	r3, [pc, #176]	@ (20001668 <I2C_Init_INIT+0xc8>)
200015b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
200015ba:	605a      	str	r2, [r3, #4]
    RCC->AHB2ENR = 0x20ff; // GPIOG_CLK_ENABLE
200015bc:	4b29      	ldr	r3, [pc, #164]	@ (20001664 <I2C_Init_INIT+0xc4>)
200015be:	f242 02ff 	movw	r2, #8447	@ 0x20ff
200015c2:	64da      	str	r2, [r3, #76]	@ 0x4c
    RCC->APB1ENR1 = 0x32200000;
200015c4:	4b27      	ldr	r3, [pc, #156]	@ (20001664 <I2C_Init_INIT+0xc4>)
200015c6:	4a29      	ldr	r2, [pc, #164]	@ (2000166c <I2C_Init_INIT+0xcc>)
200015c8:	659a      	str	r2, [r3, #88]	@ 0x58

    // GPIO configuration
    GPIOG->GPIOx_OSPEEDR = 0xc3c0fff; // GPIOx_OSPEEDR
200015ca:	4b29      	ldr	r3, [pc, #164]	@ (20001670 <I2C_Init_INIT+0xd0>)
200015cc:	4a29      	ldr	r2, [pc, #164]	@ (20001674 <I2C_Init_INIT+0xd4>)
200015ce:	609a      	str	r2, [r3, #8]
    GPIOG->GPIOx_OTYPER = 0x2000; // GPIO port output type register (GPIOx_OTYPER)
200015d0:	4b27      	ldr	r3, [pc, #156]	@ (20001670 <I2C_Init_INIT+0xd0>)
200015d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
200015d6:	605a      	str	r2, [r3, #4]
    GPIOG->GPIOx_PUPDR = 0x4000000; // GPIOG_PUPDR
200015d8:	4b25      	ldr	r3, [pc, #148]	@ (20001670 <I2C_Init_INIT+0xd0>)
200015da:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
200015de:	60da      	str	r2, [r3, #12]
    GPIOG->GPIOx_AFRL = 0x400cc0; // Configure Alternate function mapped with the current IO
200015e0:	4b23      	ldr	r3, [pc, #140]	@ (20001670 <I2C_Init_INIT+0xd0>)
200015e2:	4a25      	ldr	r2, [pc, #148]	@ (20001678 <I2C_Init_INIT+0xd8>)
200015e4:	621a      	str	r2, [r3, #32]
    GPIOG->GPIOx_MODER = 0x3bebcaaa; // Configure IO Direction mode (Input, Output, Alternate or Analog)
200015e6:	4b22      	ldr	r3, [pc, #136]	@ (20001670 <I2C_Init_INIT+0xd0>)
200015e8:	4a24      	ldr	r2, [pc, #144]	@ (2000167c <I2C_Init_INIT+0xdc>)
200015ea:	601a      	str	r2, [r3, #0]
    GPIOG->GPIOx_OSPEEDR = 0x3c3c0fff; // Configure the IO Speed
200015ec:	4b20      	ldr	r3, [pc, #128]	@ (20001670 <I2C_Init_INIT+0xd0>)
200015ee:	4a24      	ldr	r2, [pc, #144]	@ (20001680 <I2C_Init_INIT+0xe0>)
200015f0:	609a      	str	r2, [r3, #8]
    GPIOG->GPIOx_OTYPER = 0x6000; // GPIO_OTYPER
200015f2:	4b1f      	ldr	r3, [pc, #124]	@ (20001670 <I2C_Init_INIT+0xd0>)
200015f4:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
200015f8:	605a      	str	r2, [r3, #4]
    GPIOA->GPIOx_PUPDR = 0x4000000; // Activate pull up or pull down GPIO_PUPDR
200015fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
200015fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
20001602:	60da      	str	r2, [r3, #12]
    GPIOG->GPIOx_AFRL = 0x4400cc0; // Configure Alternate function mapped with the current IO
20001604:	4b1a      	ldr	r3, [pc, #104]	@ (20001670 <I2C_Init_INIT+0xd0>)
20001606:	4a1f      	ldr	r2, [pc, #124]	@ (20001684 <I2C_Init_INIT+0xe4>)
20001608:	621a      	str	r2, [r3, #32]
    GPIOG->GPIOx_MODER = 0x2bebcaaa; // Configure IO Direction mode (Input, Output, Alternate or Analog)
2000160a:	4b19      	ldr	r3, [pc, #100]	@ (20001670 <I2C_Init_INIT+0xd0>)
2000160c:	4a1e      	ldr	r2, [pc, #120]	@ (20001688 <I2C_Init_INIT+0xe8>)
2000160e:	601a      	str	r2, [r3, #0]
    GPIOG->GPIOx_OSPEEDR = 0x3c3c0fff; // Configure the IO Speed
20001610:	4b17      	ldr	r3, [pc, #92]	@ (20001670 <I2C_Init_INIT+0xd0>)
20001612:	4a1b      	ldr	r2, [pc, #108]	@ (20001680 <I2C_Init_INIT+0xe0>)
20001614:	609a      	str	r2, [r3, #8]
    GPIOG->GPIOx_OTYPER = 0x6000; // GPIO_OTYPER
20001616:	4b16      	ldr	r3, [pc, #88]	@ (20001670 <I2C_Init_INIT+0xd0>)
20001618:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
2000161c:	605a      	str	r2, [r3, #4]
    GPIOA->GPIOx_PUPDR = 0x0; // Activate pull up or pull down GPIO_PUPDR
2000161e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20001622:	2200      	movs	r2, #0
20001624:	60da      	str	r2, [r3, #12]
    //*(volatile uint8_t *)(0x48001841) = 0x24; // hi2c->State = HAL_I2C_STATE_BUSY (specific address not covered by provided structures)

    I2C->I2C_CR1 = 0; // Disable the selected I2C peripheral
20001626:	4b19      	ldr	r3, [pc, #100]	@ (2000168c <I2C_Init_INIT+0xec>)
20001628:	2200      	movs	r2, #0
2000162a:	601a      	str	r2, [r3, #0]
    I2C->I2C_TIMINGR = 0x20303E5D; // Configure I2Cx: Frequency range
2000162c:	4b17      	ldr	r3, [pc, #92]	@ (2000168c <I2C_Init_INIT+0xec>)
2000162e:	4a18      	ldr	r2, [pc, #96]	@ (20001690 <I2C_Init_INIT+0xf0>)
20001630:	611a      	str	r2, [r3, #16]
    I2C->I2C_OAR1 = 0; // I2Cx OAR1 Configuration
20001632:	4b16      	ldr	r3, [pc, #88]	@ (2000168c <I2C_Init_INIT+0xec>)
20001634:	2200      	movs	r2, #0
20001636:	609a      	str	r2, [r3, #8]
    I2C->I2C_OAR1 = 0x8000; // Ack own address1 mode
20001638:	4b14      	ldr	r3, [pc, #80]	@ (2000168c <I2C_Init_INIT+0xec>)
2000163a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
2000163e:	609a      	str	r2, [r3, #8]
    I2C->I2C_CR2 = 0; // Clear the I2C ADD10 bit
20001640:	4b12      	ldr	r3, [pc, #72]	@ (2000168c <I2C_Init_INIT+0xec>)
20001642:	2200      	movs	r2, #0
20001644:	605a      	str	r2, [r3, #4]
    I2C->I2C_OAR2 = 0; // I2Cx OAR2 Configuration
20001646:	4b11      	ldr	r3, [pc, #68]	@ (2000168c <I2C_Init_INIT+0xec>)
20001648:	2200      	movs	r2, #0
2000164a:	60da      	str	r2, [r3, #12]
    I2C->I2C_CR1 = 0; // Configure I2Cx: Generalcall and NoStretch mode
2000164c:	4b0f      	ldr	r3, [pc, #60]	@ (2000168c <I2C_Init_INIT+0xec>)
2000164e:	2200      	movs	r2, #0
20001650:	601a      	str	r2, [r3, #0]
    I2C->I2C_CR1 = 1; // Enable the selected I2C peripheral
20001652:	4b0e      	ldr	r3, [pc, #56]	@ (2000168c <I2C_Init_INIT+0xec>)
20001654:	2201      	movs	r2, #1
20001656:	601a      	str	r2, [r3, #0]
}
20001658:	bf00      	nop
2000165a:	46bd      	mov	sp, r7
2000165c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001660:	4770      	bx	lr
20001662:	bf00      	nop
20001664:	40021000 	.word	0x40021000
20001668:	40007000 	.word	0x40007000
2000166c:	32200000 	.word	0x32200000
20001670:	48001800 	.word	0x48001800
20001674:	0c3c0fff 	.word	0x0c3c0fff
20001678:	00400cc0 	.word	0x00400cc0
2000167c:	3bebcaaa 	.word	0x3bebcaaa
20001680:	3c3c0fff 	.word	0x3c3c0fff
20001684:	04400cc0 	.word	0x04400cc0
20001688:	2bebcaaa 	.word	0x2bebcaaa
2000168c:	40005400 	.word	0x40005400
20001690:	20303e5d 	.word	0x20303e5d

20001694 <ui_cmd_I2C>:


void ui_cmd_I2C(int argc, char *argv[])
{
20001694:	b580      	push	{r7, lr}
20001696:	b086      	sub	sp, #24
20001698:	af00      	add	r7, sp, #0
2000169a:	6078      	str	r0, [r7, #4]
2000169c:	6039      	str	r1, [r7, #0]
    RCC->APB2ENR = 0x4001;
2000169e:	4b5a      	ldr	r3, [pc, #360]	@ (20001808 <ui_cmd_I2C+0x174>)
200016a0:	f244 0201 	movw	r2, #16385	@ 0x4001
200016a4:	661a      	str	r2, [r3, #96]	@ 0x60
    // *(volatile uint32_t *)(0x40021060) = 0x4001; // __HAL_RCC_SYSCFG_CLK_ENABLE();

    RCC->APB1ENR1 = 0x10000000;
200016a6:	4b58      	ldr	r3, [pc, #352]	@ (20001808 <ui_cmd_I2C+0x174>)
200016a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
200016ac:	659a      	str	r2, [r3, #88]	@ 0x58
    //*(volatile uint32_t *)(0x40021058) = 0x10000000; // __HAL_RCC_PWR_CLK_ENABLE();

    RCC->CCIPR = 0;
200016ae:	4b56      	ldr	r3, [pc, #344]	@ (20001808 <ui_cmd_I2C+0x174>)
200016b0:	2200      	movs	r2, #0
200016b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    //*(volatile uint32_t *)(0x40021088) = 0; // RCC i2c clock selection

    PWR->PWR_CR2 = 0x200;
200016b6:	4b55      	ldr	r3, [pc, #340]	@ (2000180c <ui_cmd_I2C+0x178>)
200016b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
200016bc:	605a      	str	r2, [r3, #4]
    //*(volatile uint32_t *)(0x40007004) = 0x200; // PWR_CR2 enable

    RCC->AHB2ENR = 0x20ff;
200016be:	4b52      	ldr	r3, [pc, #328]	@ (20001808 <ui_cmd_I2C+0x174>)
200016c0:	f242 02ff 	movw	r2, #8447	@ 0x20ff
200016c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    //*(volatile uint32_t *)(0x4002104C) = 0x20ff; // GPIOG_CLK_ENABLE

    RCC->APB1ENR1 = 0x32200000;
200016c6:	4b50      	ldr	r3, [pc, #320]	@ (20001808 <ui_cmd_I2C+0x174>)
200016c8:	4a51      	ldr	r2, [pc, #324]	@ (20001810 <ui_cmd_I2C+0x17c>)
200016ca:	659a      	str	r2, [r3, #88]	@ 0x58
    //*(volatile uint32_t *)(0x40021058) = 0x32200000;

    GPIOG->GPIOx_OSPEEDR = 0xc3c0fff;
200016cc:	4b51      	ldr	r3, [pc, #324]	@ (20001814 <ui_cmd_I2C+0x180>)
200016ce:	4a52      	ldr	r2, [pc, #328]	@ (20001818 <ui_cmd_I2C+0x184>)
200016d0:	609a      	str	r2, [r3, #8]
    //*(volatile uint32_t *)(0x48001808) = 0xc3c0fff; // GPIOx_OSPEEDR

    GPIOG->GPIOx_OTYPER = 0x2000;
200016d2:	4b50      	ldr	r3, [pc, #320]	@ (20001814 <ui_cmd_I2C+0x180>)
200016d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
200016d8:	605a      	str	r2, [r3, #4]
    //*(volatile uint32_t *)(0x48001804) = 0x2000; // GPIO port output type register (GPIOx_OTYPER)

    GPIOG->GPIOx_PUPDR = 0x4000000;
200016da:	4b4e      	ldr	r3, [pc, #312]	@ (20001814 <ui_cmd_I2C+0x180>)
200016dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
200016e0:	60da      	str	r2, [r3, #12]
    //*(volatile uint32_t *)(0x4800180C) = 0x4000000; // GPIOG_PUPDR

    GPIOG->GPIOx_AFRL = 0x400cc0;
200016e2:	4b4c      	ldr	r3, [pc, #304]	@ (20001814 <ui_cmd_I2C+0x180>)
200016e4:	4a4d      	ldr	r2, [pc, #308]	@ (2000181c <ui_cmd_I2C+0x188>)
200016e6:	621a      	str	r2, [r3, #32]
    //*(volatile uint32_t *)(0x48001824) = 0x400cc0; // Configure Alternate function mapped with the current IO

    GPIOG->GPIOx_MODER = 0x3bebcaaa;
200016e8:	4b4a      	ldr	r3, [pc, #296]	@ (20001814 <ui_cmd_I2C+0x180>)
200016ea:	4a4d      	ldr	r2, [pc, #308]	@ (20001820 <ui_cmd_I2C+0x18c>)
200016ec:	601a      	str	r2, [r3, #0]
    //*(volatile uint32_t *)(0x48001800) = 0x3bebcaaa; // Configure IO Direction mode (Input, Output, Alternate or Analog)

    GPIOG->GPIOx_OSPEEDR = 0x3c3c0fff;
200016ee:	4b49      	ldr	r3, [pc, #292]	@ (20001814 <ui_cmd_I2C+0x180>)
200016f0:	4a4c      	ldr	r2, [pc, #304]	@ (20001824 <ui_cmd_I2C+0x190>)
200016f2:	609a      	str	r2, [r3, #8]
    //*(volatile uint32_t *)(0x48001808) = 0x3c3c0fff; // Configure the IO Speed

    GPIOG->GPIOx_OTYPER = 0x6000;
200016f4:	4b47      	ldr	r3, [pc, #284]	@ (20001814 <ui_cmd_I2C+0x180>)
200016f6:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
200016fa:	605a      	str	r2, [r3, #4]
    //*(volatile uint32_t *)(0x48001804) = 0x6000; // GPIO_OTYPER

    GPIOA->GPIOx_PUPDR = 0x4000000;
200016fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20001700:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
20001704:	60da      	str	r2, [r3, #12]
    //*(volatile uint32_t *)(0x4800082C) = 0x4000000; // Activate pull up or pull down GPIO_PUPDR

    // GPIOG->GPIOx_AFRL = 0x4400cc0;
    *(volatile uint32_t *)(0x48001824) = 0x4400cc0; // Configure Alternate function mapped with the current IO
20001706:	4b48      	ldr	r3, [pc, #288]	@ (20001828 <ui_cmd_I2C+0x194>)
20001708:	4a48      	ldr	r2, [pc, #288]	@ (2000182c <ui_cmd_I2C+0x198>)
2000170a:	601a      	str	r2, [r3, #0]

    // GPIOG->GPIOx_MODER = 0x2bebcaaa;
    *(volatile uint32_t *)(0x48001800) = 0x2bebcaaa; // Configure IO Direction mode (Input, Output, Alternate or Analog)
2000170c:	4b41      	ldr	r3, [pc, #260]	@ (20001814 <ui_cmd_I2C+0x180>)
2000170e:	4a48      	ldr	r2, [pc, #288]	@ (20001830 <ui_cmd_I2C+0x19c>)
20001710:	601a      	str	r2, [r3, #0]

    // GPIOG->GPIOx_OSPEEDR = 0x3c3c0fff;
    *(volatile uint32_t *)(0x48001808) = 0x3c3c0fff; // Configure the IO Speed
20001712:	4b48      	ldr	r3, [pc, #288]	@ (20001834 <ui_cmd_I2C+0x1a0>)
20001714:	4a43      	ldr	r2, [pc, #268]	@ (20001824 <ui_cmd_I2C+0x190>)
20001716:	601a      	str	r2, [r3, #0]

    // GPIOG->GPIOx_OTYPER = 0x6000;
    *(volatile uint32_t *)(0x48001804) = 0x6000; // GPIO_OTYPER
20001718:	4b47      	ldr	r3, [pc, #284]	@ (20001838 <ui_cmd_I2C+0x1a4>)
2000171a:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
2000171e:	601a      	str	r2, [r3, #0]

    // GPIOA->GPIOx_PUPDR = 0x0;
    *(volatile uint32_t *)(0x4800082C) = 0x0; // Activate pull up or pull down GPIO_PUPDR
20001720:	4b46      	ldr	r3, [pc, #280]	@ (2000183c <ui_cmd_I2C+0x1a8>)
20001722:	2200      	movs	r2, #0
20001724:	601a      	str	r2, [r3, #0]

    // *(volatile uint8_t *)(0x48001841) = 0x24; (specific address not covered by provided structures)
    *(volatile uint8_t *)(0x48001841) = 0x24; // hi2c->State = HAL_I2C_STATE_BUSY;
20001726:	4b46      	ldr	r3, [pc, #280]	@ (20001840 <ui_cmd_I2C+0x1ac>)
20001728:	2224      	movs	r2, #36	@ 0x24
2000172a:	701a      	strb	r2, [r3, #0]

    // I2C->I2C_CR1 = 0;
    *(volatile uint32_t *)(0x40005400) = 0; // Disable the selected I2C peripheral
2000172c:	4b45      	ldr	r3, [pc, #276]	@ (20001844 <ui_cmd_I2C+0x1b0>)
2000172e:	2200      	movs	r2, #0
20001730:	601a      	str	r2, [r3, #0]

    // I2C->I2C_TIMINGR = 0x20303E5D;
    *(volatile uint32_t *)(0x40005410) = 0x20303E5D; // Configure I2Cx: Frequency range
20001732:	4b45      	ldr	r3, [pc, #276]	@ (20001848 <ui_cmd_I2C+0x1b4>)
20001734:	4a45      	ldr	r2, [pc, #276]	@ (2000184c <ui_cmd_I2C+0x1b8>)
20001736:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR1 = 0;
    *(volatile uint32_t *)(0x40005408) = 0; // I2Cx OAR1 Configuration
20001738:	4b45      	ldr	r3, [pc, #276]	@ (20001850 <ui_cmd_I2C+0x1bc>)
2000173a:	2200      	movs	r2, #0
2000173c:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR1 = 0x8000;
    *(volatile uint32_t *)(0x40005408) = 0x8000; // Ack own address1 mode
2000173e:	4b44      	ldr	r3, [pc, #272]	@ (20001850 <ui_cmd_I2C+0x1bc>)
20001740:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
20001744:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR2 = 0;
    *(volatile uint32_t *)(0x40005404) = 0; // Clear the I2C ADD10 bit
20001746:	4b43      	ldr	r3, [pc, #268]	@ (20001854 <ui_cmd_I2C+0x1c0>)
20001748:	2200      	movs	r2, #0
2000174a:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR2 = 0;
    *(volatile uint32_t *)(0x4000540C) = 0; // I2Cx OAR2 Configuration
2000174c:	4b42      	ldr	r3, [pc, #264]	@ (20001858 <ui_cmd_I2C+0x1c4>)
2000174e:	2200      	movs	r2, #0
20001750:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR1 = 0;
    *(volatile uint32_t *)(0x40005400) = 0; // Configure I2Cx: Generalcall and NoStretch mode
20001752:	4b3c      	ldr	r3, [pc, #240]	@ (20001844 <ui_cmd_I2C+0x1b0>)
20001754:	2200      	movs	r2, #0
20001756:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR1 = 1;
    *(volatile uint32_t *)(0x40005400) = 1; // Enable the selected I2C peripheral
20001758:	4b3a      	ldr	r3, [pc, #232]	@ (20001844 <ui_cmd_I2C+0x1b0>)
2000175a:	2201      	movs	r2, #1
2000175c:	601a      	str	r2, [r3, #0]

    // Transmit
    // I2C->I2C_CR1 = 0;
    *(volatile uint32_t *)(0x40005400) = 0; // I2C_CR1, clear
2000175e:	4b39      	ldr	r3, [pc, #228]	@ (20001844 <ui_cmd_I2C+0x1b0>)
20001760:	2200      	movs	r2, #0
20001762:	601a      	str	r2, [r3, #0]

    // I2C->I2C_TIMINGR = 0x20303e5d;
    *(volatile uint32_t *)(0x40005410) = 0x20303e5d; // 595, timing
20001764:	4b38      	ldr	r3, [pc, #224]	@ (20001848 <ui_cmd_I2C+0x1b4>)
20001766:	4a39      	ldr	r2, [pc, #228]	@ (2000184c <ui_cmd_I2C+0x1b8>)
20001768:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR1 = 0;
    *(volatile uint32_t *)(0x40005408) = 0; // 595, OAR1
2000176a:	4b39      	ldr	r3, [pc, #228]	@ (20001850 <ui_cmd_I2C+0x1bc>)
2000176c:	2200      	movs	r2, #0
2000176e:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR1 = 0x8000;
    *(volatile uint32_t *)(0x40005408) = 0x8000;
20001770:	4b37      	ldr	r3, [pc, #220]	@ (20001850 <ui_cmd_I2C+0x1bc>)
20001772:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
20001776:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR2 = 0;
    *(volatile uint32_t *)(0x40005404) = 0; // 616, CR2
20001778:	4b36      	ldr	r3, [pc, #216]	@ (20001854 <ui_cmd_I2C+0x1c0>)
2000177a:	2200      	movs	r2, #0
2000177c:	601a      	str	r2, [r3, #0]

    // USART->USART_CR2 = 0x2008000;
    *(volatile uint32_t *)(0x40004404) = 0x2008000; // 618, auto end, bit 15, NACK
2000177e:	4b37      	ldr	r3, [pc, #220]	@ (2000185c <ui_cmd_I2C+0x1c8>)
20001780:	4a37      	ldr	r2, [pc, #220]	@ (20001860 <ui_cmd_I2C+0x1cc>)
20001782:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR2 = 0;
    *(volatile uint32_t *)(0x4000540C) = 0; // 623, OAR2
20001784:	4b34      	ldr	r3, [pc, #208]	@ (20001858 <ui_cmd_I2C+0x1c4>)
20001786:	2200      	movs	r2, #0
20001788:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR1 = 1;
    *(volatile uint32_t *)(0x40005400) = 1; // 634, peripheral enable bit 0
2000178a:	4b2e      	ldr	r3, [pc, #184]	@ (20001844 <ui_cmd_I2C+0x1b0>)
2000178c:	2201      	movs	r2, #1
2000178e:	601a      	str	r2, [r3, #0]

    // I2C->I2C_TXDR = 0x0;
    *(volatile uint32_t *)(0x40005428) = 0x0; // 1162, TX reg
20001790:	4b34      	ldr	r3, [pc, #208]	@ (20001864 <ui_cmd_I2C+0x1d0>)
20001792:	2200      	movs	r2, #0
20001794:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR2 = 0x2012082;
    *(volatile uint32_t *)(0x40005404) = 0x2012082; // 7217, 82 device address
20001796:	4b2f      	ldr	r3, [pc, #188]	@ (20001854 <ui_cmd_I2C+0x1c0>)
20001798:	4a33      	ldr	r2, [pc, #204]	@ (20001868 <ui_cmd_I2C+0x1d4>)
2000179a:	601a      	str	r2, [r3, #0]

    // Receive
    uint32_t temp = 0; // I2C_ISR STOPF: STOP detection flag
2000179c:	2300      	movs	r3, #0
2000179e:	617b      	str	r3, [r7, #20]
    while (((temp = *(volatile uint32_t *)(0x40005418)) & 0x20) == 0) {}
200017a0:	bf00      	nop
200017a2:	4b32      	ldr	r3, [pc, #200]	@ (2000186c <ui_cmd_I2C+0x1d8>)
200017a4:	681b      	ldr	r3, [r3, #0]
200017a6:	617b      	str	r3, [r7, #20]
200017a8:	697b      	ldr	r3, [r7, #20]
200017aa:	f003 0320 	and.w	r3, r3, #32
200017ae:	2b00      	cmp	r3, #0
200017b0:	d0f7      	beq.n	200017a2 <ui_cmd_I2C+0x10e>

    // I2C->I2C_CR2 = 0x2012482;
    *(volatile uint32_t *)(0x40005404) = 0x2012482; // 7217 update CR2 register
200017b2:	4b28      	ldr	r3, [pc, #160]	@ (20001854 <ui_cmd_I2C+0x1c0>)
200017b4:	4a2e      	ldr	r2, [pc, #184]	@ (20001870 <ui_cmd_I2C+0x1dc>)
200017b6:	601a      	str	r2, [r3, #0]

    uint32_t busy = 0; // I2C_ISR BUSY: BUSY detection flag
200017b8:	2300      	movs	r3, #0
200017ba:	613b      	str	r3, [r7, #16]
    while (((busy = *(volatile uint32_t *)(0x40005400)) & 0x8000) == 1) {}
200017bc:	bf00      	nop
200017be:	4b21      	ldr	r3, [pc, #132]	@ (20001844 <ui_cmd_I2C+0x1b0>)
200017c0:	681b      	ldr	r3, [r3, #0]
200017c2:	613b      	str	r3, [r7, #16]
200017c4:	693b      	ldr	r3, [r7, #16]
200017c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
200017ca:	2b01      	cmp	r3, #1
200017cc:	d0f7      	beq.n	200017be <ui_cmd_I2C+0x12a>

    uint32_t RXNE_BUSY = 0; // RXNE: Receive data register
200017ce:	2300      	movs	r3, #0
200017d0:	60fb      	str	r3, [r7, #12]
    while (((RXNE_BUSY = *(volatile uint32_t *)(0x40005418)) & 0x4) == 0) {}
200017d2:	bf00      	nop
200017d4:	4b25      	ldr	r3, [pc, #148]	@ (2000186c <ui_cmd_I2C+0x1d8>)
200017d6:	681b      	ldr	r3, [r3, #0]
200017d8:	60fb      	str	r3, [r7, #12]
200017da:	68fb      	ldr	r3, [r7, #12]
200017dc:	f003 0304 	and.w	r3, r3, #4
200017e0:	2b00      	cmp	r3, #0
200017e2:	d0f7      	beq.n	200017d4 <ui_cmd_I2C+0x140>

    // Corrections for printing function
    // RCC->CCIPR = 0x2;
    *(volatile uint32_t *)(0x40021088) = 0x2;
200017e4:	4b23      	ldr	r3, [pc, #140]	@ (20001874 <ui_cmd_I2C+0x1e0>)
200017e6:	2202      	movs	r2, #2
200017e8:	601a      	str	r2, [r3, #0]

    uint32_t received_data = *(volatile uint32_t *)(0x40005424);
200017ea:	4b23      	ldr	r3, [pc, #140]	@ (20001878 <ui_cmd_I2C+0x1e4>)
200017ec:	681b      	ldr	r3, [r3, #0]
200017ee:	60bb      	str	r3, [r7, #8]
    printf("data");
200017f0:	4822      	ldr	r0, [pc, #136]	@ (2000187c <ui_cmd_I2C+0x1e8>)
200017f2:	f7ff fac5 	bl	20000d80 <printf>
    printf("Received data: 0x%08X\n", received_data);
200017f6:	68b9      	ldr	r1, [r7, #8]
200017f8:	4821      	ldr	r0, [pc, #132]	@ (20001880 <ui_cmd_I2C+0x1ec>)
200017fa:	f7ff fac1 	bl	20000d80 <printf>
}
200017fe:	bf00      	nop
20001800:	3718      	adds	r7, #24
20001802:	46bd      	mov	sp, r7
20001804:	bd80      	pop	{r7, pc}
20001806:	bf00      	nop
20001808:	40021000 	.word	0x40021000
2000180c:	40007000 	.word	0x40007000
20001810:	32200000 	.word	0x32200000
20001814:	48001800 	.word	0x48001800
20001818:	0c3c0fff 	.word	0x0c3c0fff
2000181c:	00400cc0 	.word	0x00400cc0
20001820:	3bebcaaa 	.word	0x3bebcaaa
20001824:	3c3c0fff 	.word	0x3c3c0fff
20001828:	48001824 	.word	0x48001824
2000182c:	04400cc0 	.word	0x04400cc0
20001830:	2bebcaaa 	.word	0x2bebcaaa
20001834:	48001808 	.word	0x48001808
20001838:	48001804 	.word	0x48001804
2000183c:	4800082c 	.word	0x4800082c
20001840:	48001841 	.word	0x48001841
20001844:	40005400 	.word	0x40005400
20001848:	40005410 	.word	0x40005410
2000184c:	20303e5d 	.word	0x20303e5d
20001850:	40005408 	.word	0x40005408
20001854:	40005404 	.word	0x40005404
20001858:	4000540c 	.word	0x4000540c
2000185c:	40004404 	.word	0x40004404
20001860:	02008000 	.word	0x02008000
20001864:	40005428 	.word	0x40005428
20001868:	02012082 	.word	0x02012082
2000186c:	40005418 	.word	0x40005418
20001870:	02012482 	.word	0x02012482
20001874:	40021088 	.word	0x40021088
20001878:	40005424 	.word	0x40005424
2000187c:	2000211c 	.word	0x2000211c
20001880:	20002124 	.word	0x20002124

20001884 <READ_I2C_IO2>:

static int READ_I2C_IO2(int reg_address)
{
20001884:	b580      	push	{r7, lr}
20001886:	b086      	sub	sp, #24
20001888:	af00      	add	r7, sp, #0
2000188a:	6078      	str	r0, [r7, #4]
    I2C_Init();
2000188c:	f7ff fe60 	bl	20001550 <I2C_Init>
    uint32_t temp = 0;
20001890:	2300      	movs	r3, #0
20001892:	617b      	str	r3, [r7, #20]

    I2C->I2C_TXDR = reg_address; // Register address
20001894:	4a13      	ldr	r2, [pc, #76]	@ (200018e4 <READ_I2C_IO2+0x60>)
20001896:	687b      	ldr	r3, [r7, #4]
20001898:	6293      	str	r3, [r2, #40]	@ 0x28
    // I2C->I2C_TXDR = value_to_send; // Data to send

    I2C->I2C_CR2 = 0x2012084; // 7217, 82 device address
2000189a:	4b12      	ldr	r3, [pc, #72]	@ (200018e4 <READ_I2C_IO2+0x60>)
2000189c:	4a12      	ldr	r2, [pc, #72]	@ (200018e8 <READ_I2C_IO2+0x64>)
2000189e:	605a      	str	r2, [r3, #4]

    //while (((temp = I2C->I2C_ISR) & 0x1) == 0) {}

    // Wait for STOPF
    temp = 0;
200018a0:	2300      	movs	r3, #0
200018a2:	617b      	str	r3, [r7, #20]
    while (((temp = I2C->I2C_ISR) & 0x20) == 0) {}
200018a4:	bf00      	nop
200018a6:	4b0f      	ldr	r3, [pc, #60]	@ (200018e4 <READ_I2C_IO2+0x60>)
200018a8:	699b      	ldr	r3, [r3, #24]
200018aa:	617b      	str	r3, [r7, #20]
200018ac:	697b      	ldr	r3, [r7, #20]
200018ae:	f003 0320 	and.w	r3, r3, #32
200018b2:	2b00      	cmp	r3, #0
200018b4:	d0f7      	beq.n	200018a6 <READ_I2C_IO2+0x22>

    I2C->I2C_CR2 = 0x2012484; // 7217 update CR2 register
200018b6:	4b0b      	ldr	r3, [pc, #44]	@ (200018e4 <READ_I2C_IO2+0x60>)
200018b8:	4a0c      	ldr	r2, [pc, #48]	@ (200018ec <READ_I2C_IO2+0x68>)
200018ba:	605a      	str	r2, [r3, #4]

    // Wait for RXNE
    uint32_t RXNE_BUSY = 0;
200018bc:	2300      	movs	r3, #0
200018be:	613b      	str	r3, [r7, #16]
    while (((RXNE_BUSY = I2C->I2C_ISR) & 0x4) == 0) {}
200018c0:	bf00      	nop
200018c2:	4b08      	ldr	r3, [pc, #32]	@ (200018e4 <READ_I2C_IO2+0x60>)
200018c4:	699b      	ldr	r3, [r3, #24]
200018c6:	613b      	str	r3, [r7, #16]
200018c8:	693b      	ldr	r3, [r7, #16]
200018ca:	f003 0304 	and.w	r3, r3, #4
200018ce:	2b00      	cmp	r3, #0
200018d0:	d0f7      	beq.n	200018c2 <READ_I2C_IO2+0x3e>

    uint32_t received_data = I2C->I2C_RXDR;
200018d2:	4b04      	ldr	r3, [pc, #16]	@ (200018e4 <READ_I2C_IO2+0x60>)
200018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200018d6:	60fb      	str	r3, [r7, #12]

    // Corrections for printing function
    // RCC->CCIPR = 0x2;
    // printf("Received data: 0x%08X\n", received_data);

    return received_data;
200018d8:	68fb      	ldr	r3, [r7, #12]
}
200018da:	4618      	mov	r0, r3
200018dc:	3718      	adds	r7, #24
200018de:	46bd      	mov	sp, r7
200018e0:	bd80      	pop	{r7, pc}
200018e2:	bf00      	nop
200018e4:	40005400 	.word	0x40005400
200018e8:	02012084 	.word	0x02012084
200018ec:	02012484 	.word	0x02012484

200018f0 <ui_cmd_write_I2C>:
static int ui_cmd_write_I2C(int argc, char *argv[])
{
200018f0:	b580      	push	{r7, lr}
200018f2:	b08a      	sub	sp, #40	@ 0x28
200018f4:	af00      	add	r7, sp, #0
200018f6:	6078      	str	r0, [r7, #4]
200018f8:	6039      	str	r1, [r7, #0]
    if (argc < 3) {
200018fa:	687b      	ldr	r3, [r7, #4]
200018fc:	2b02      	cmp	r3, #2
200018fe:	dc05      	bgt.n	2000190c <ui_cmd_write_I2C+0x1c>
        printf("Usage: write_I2C <reg_address> <value_to_send>\n");
20001900:	4840      	ldr	r0, [pc, #256]	@ (20001a04 <ui_cmd_write_I2C+0x114>)
20001902:	f7ff fa3d 	bl	20000d80 <printf>
        return -1;
20001906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
2000190a:	e077      	b.n	200019fc <ui_cmd_write_I2C+0x10c>
    }

    char *reg_input = argv[1];
2000190c:	683b      	ldr	r3, [r7, #0]
2000190e:	685b      	ldr	r3, [r3, #4]
20001910:	627b      	str	r3, [r7, #36]	@ 0x24
    char *val_input = argv[2];
20001912:	683b      	ldr	r3, [r7, #0]
20001914:	689b      	ldr	r3, [r3, #8]
20001916:	623b      	str	r3, [r7, #32]

    int reg_address = atoi(reg_input);
20001918:	6a78      	ldr	r0, [r7, #36]	@ 0x24
2000191a:	f000 f957 	bl	20001bcc <atoi>
2000191e:	61f8      	str	r0, [r7, #28]
    int value_to_send = atoi(val_input);
20001920:	6a38      	ldr	r0, [r7, #32]
20001922:	f000 f953 	bl	20001bcc <atoi>
20001926:	61b8      	str	r0, [r7, #24]

    // Initialization and clock configuration
    I2C_Init_INIT();
20001928:	f7ff fe3a 	bl	200015a0 <I2C_Init_INIT>
    I2C_Init();
2000192c:	f7ff fe10 	bl	20001550 <I2C_Init>

    // Write to I2C
    uint32_t temp = 0;
20001930:	2300      	movs	r3, #0
20001932:	617b      	str	r3, [r7, #20]

    while (((temp = I2C->I2C_ISR) & 0x1) == 0) {}
20001934:	bf00      	nop
20001936:	4b34      	ldr	r3, [pc, #208]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
20001938:	699b      	ldr	r3, [r3, #24]
2000193a:	617b      	str	r3, [r7, #20]
2000193c:	697b      	ldr	r3, [r7, #20]
2000193e:	f003 0301 	and.w	r3, r3, #1
20001942:	2b00      	cmp	r3, #0
20001944:	d0f7      	beq.n	20001936 <ui_cmd_write_I2C+0x46>

    I2C->I2C_TXDR = reg_address; // Register address
20001946:	4a30      	ldr	r2, [pc, #192]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
20001948:	69fb      	ldr	r3, [r7, #28]
2000194a:	6293      	str	r3, [r2, #40]	@ 0x28
    I2C->I2C_CR2 = 0x2022082; // I2C device address
2000194c:	4b2e      	ldr	r3, [pc, #184]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
2000194e:	4a2f      	ldr	r2, [pc, #188]	@ (20001a0c <ui_cmd_write_I2C+0x11c>)
20001950:	605a      	str	r2, [r3, #4]

    while (((temp = I2C->I2C_ISR) & 0x1) == 0) {}
20001952:	bf00      	nop
20001954:	4b2c      	ldr	r3, [pc, #176]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
20001956:	699b      	ldr	r3, [r3, #24]
20001958:	617b      	str	r3, [r7, #20]
2000195a:	697b      	ldr	r3, [r7, #20]
2000195c:	f003 0301 	and.w	r3, r3, #1
20001960:	2b00      	cmp	r3, #0
20001962:	d0f7      	beq.n	20001954 <ui_cmd_write_I2C+0x64>

    I2C->I2C_TXDR = value_to_send;
20001964:	4a28      	ldr	r2, [pc, #160]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
20001966:	69bb      	ldr	r3, [r7, #24]
20001968:	6293      	str	r3, [r2, #40]	@ 0x28

    // Wait for STOPF
    temp = 0;
2000196a:	2300      	movs	r3, #0
2000196c:	617b      	str	r3, [r7, #20]
    while (((temp = I2C->I2C_ISR) & 0x20) == 0) {}
2000196e:	bf00      	nop
20001970:	4b25      	ldr	r3, [pc, #148]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
20001972:	699b      	ldr	r3, [r3, #24]
20001974:	617b      	str	r3, [r7, #20]
20001976:	697b      	ldr	r3, [r7, #20]
20001978:	f003 0320 	and.w	r3, r3, #32
2000197c:	2b00      	cmp	r3, #0
2000197e:	d0f7      	beq.n	20001970 <ui_cmd_write_I2C+0x80>

    // Read back the written value to verify
    while (((temp = I2C->I2C_ISR) & 0x1) == 0) {}
20001980:	bf00      	nop
20001982:	4b21      	ldr	r3, [pc, #132]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
20001984:	699b      	ldr	r3, [r3, #24]
20001986:	617b      	str	r3, [r7, #20]
20001988:	697b      	ldr	r3, [r7, #20]
2000198a:	f003 0301 	and.w	r3, r3, #1
2000198e:	2b00      	cmp	r3, #0
20001990:	d0f7      	beq.n	20001982 <ui_cmd_write_I2C+0x92>

    I2C->I2C_TXDR = reg_address; // Register address
20001992:	4a1d      	ldr	r2, [pc, #116]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
20001994:	69fb      	ldr	r3, [r7, #28]
20001996:	6293      	str	r3, [r2, #40]	@ 0x28
    I2C->I2C_CR2 = 0x2012082; // I2C device address
20001998:	4b1b      	ldr	r3, [pc, #108]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
2000199a:	4a1d      	ldr	r2, [pc, #116]	@ (20001a10 <ui_cmd_write_I2C+0x120>)
2000199c:	605a      	str	r2, [r3, #4]

    while (((temp = I2C->I2C_ISR) & 0x1) == 0) {}
2000199e:	bf00      	nop
200019a0:	4b19      	ldr	r3, [pc, #100]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
200019a2:	699b      	ldr	r3, [r3, #24]
200019a4:	617b      	str	r3, [r7, #20]
200019a6:	697b      	ldr	r3, [r7, #20]
200019a8:	f003 0301 	and.w	r3, r3, #1
200019ac:	2b00      	cmp	r3, #0
200019ae:	d0f7      	beq.n	200019a0 <ui_cmd_write_I2C+0xb0>

    // Wait for STOPF
    temp = 0;
200019b0:	2300      	movs	r3, #0
200019b2:	617b      	str	r3, [r7, #20]
    while (((temp = I2C->I2C_ISR) & 0x20) == 0) {}
200019b4:	bf00      	nop
200019b6:	4b14      	ldr	r3, [pc, #80]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
200019b8:	699b      	ldr	r3, [r3, #24]
200019ba:	617b      	str	r3, [r7, #20]
200019bc:	697b      	ldr	r3, [r7, #20]
200019be:	f003 0320 	and.w	r3, r3, #32
200019c2:	2b00      	cmp	r3, #0
200019c4:	d0f7      	beq.n	200019b6 <ui_cmd_write_I2C+0xc6>

    I2C->I2C_CR2 = 0x2012482; // Update CR2 register
200019c6:	4b10      	ldr	r3, [pc, #64]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
200019c8:	4a12      	ldr	r2, [pc, #72]	@ (20001a14 <ui_cmd_write_I2C+0x124>)
200019ca:	605a      	str	r2, [r3, #4]

    // Wait for RXNE
    uint32_t RXNE_BUSY = 0;
200019cc:	2300      	movs	r3, #0
200019ce:	613b      	str	r3, [r7, #16]
    while (((RXNE_BUSY = I2C->I2C_ISR) & 0x4) == 0) {}
200019d0:	bf00      	nop
200019d2:	4b0d      	ldr	r3, [pc, #52]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
200019d4:	699b      	ldr	r3, [r3, #24]
200019d6:	613b      	str	r3, [r7, #16]
200019d8:	693b      	ldr	r3, [r7, #16]
200019da:	f003 0304 	and.w	r3, r3, #4
200019de:	2b00      	cmp	r3, #0
200019e0:	d0f7      	beq.n	200019d2 <ui_cmd_write_I2C+0xe2>

    uint32_t received_data = I2C->I2C_RXDR;
200019e2:	4b09      	ldr	r3, [pc, #36]	@ (20001a08 <ui_cmd_write_I2C+0x118>)
200019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200019e6:	60fb      	str	r3, [r7, #12]

    // Print results
    printf("Writing 0x%02X to register 0x%02X\n", value_to_send, reg_address);
200019e8:	69fa      	ldr	r2, [r7, #28]
200019ea:	69b9      	ldr	r1, [r7, #24]
200019ec:	480a      	ldr	r0, [pc, #40]	@ (20001a18 <ui_cmd_write_I2C+0x128>)
200019ee:	f7ff f9c7 	bl	20000d80 <printf>
    printf("Received data: 0x%08X\n", received_data);
200019f2:	68f9      	ldr	r1, [r7, #12]
200019f4:	4809      	ldr	r0, [pc, #36]	@ (20001a1c <ui_cmd_write_I2C+0x12c>)
200019f6:	f7ff f9c3 	bl	20000d80 <printf>

    return 0;
200019fa:	2300      	movs	r3, #0
}
200019fc:	4618      	mov	r0, r3
200019fe:	3728      	adds	r7, #40	@ 0x28
20001a00:	46bd      	mov	sp, r7
20001a02:	bd80      	pop	{r7, pc}
20001a04:	2000213c 	.word	0x2000213c
20001a08:	40005400 	.word	0x40005400
20001a0c:	02022082 	.word	0x02022082
20001a10:	02012082 	.word	0x02012082
20001a14:	02012482 	.word	0x02012482
20001a18:	2000216c 	.word	0x2000216c
20001a1c:	20002124 	.word	0x20002124

20001a20 <ui_cmd_joystick>:


static int ui_cmd_joystick(int argc, char *argv[])
{
20001a20:	b580      	push	{r7, lr}
20001a22:	b082      	sub	sp, #8
20001a24:	af00      	add	r7, sp, #0
20001a26:	6078      	str	r0, [r7, #4]
20001a28:	6039      	str	r1, [r7, #0]
    state_str = cmd_getarg(cmd, 0);
    state = atoi(state_str);

*/
    // *(volatile uint32_t *)(0x40005404) = 0x12084;
	I2C_Init_INIT();
20001a2a:	f7ff fdb9 	bl	200015a0 <I2C_Init_INIT>
	//*(volatile uint32_t *)(0x40021088) = 0x2;


    while(1){

    	if((READ_I2C_IO2(0x10) & 1) == 0){
20001a2e:	2010      	movs	r0, #16
20001a30:	f7ff ff28 	bl	20001884 <READ_I2C_IO2>
20001a34:	4603      	mov	r3, r0
20001a36:	f003 0301 	and.w	r3, r3, #1
20001a3a:	2b00      	cmp	r3, #0
20001a3c:	d103      	bne.n	20001a46 <ui_cmd_joystick+0x26>
    		printf("SEL\r");
20001a3e:	481c      	ldr	r0, [pc, #112]	@ (20001ab0 <ui_cmd_joystick+0x90>)
20001a40:	f7ff f99e 	bl	20000d80 <printf>
    		break;
20001a44:	e02c      	b.n	20001aa0 <ui_cmd_joystick+0x80>
    	}
    	if((READ_I2C_IO2(0x10) & 2) == 0){
20001a46:	2010      	movs	r0, #16
20001a48:	f7ff ff1c 	bl	20001884 <READ_I2C_IO2>
20001a4c:	4603      	mov	r3, r0
20001a4e:	f003 0302 	and.w	r3, r3, #2
20001a52:	2b00      	cmp	r3, #0
20001a54:	d102      	bne.n	20001a5c <ui_cmd_joystick+0x3c>
    		printf("DOWN   \r");
20001a56:	4817      	ldr	r0, [pc, #92]	@ (20001ab4 <ui_cmd_joystick+0x94>)
20001a58:	f7ff f992 	bl	20000d80 <printf>
    	}
    	if((READ_I2C_IO2(0x10) & 4) == 0){
20001a5c:	2010      	movs	r0, #16
20001a5e:	f7ff ff11 	bl	20001884 <READ_I2C_IO2>
20001a62:	4603      	mov	r3, r0
20001a64:	f003 0304 	and.w	r3, r3, #4
20001a68:	2b00      	cmp	r3, #0
20001a6a:	d102      	bne.n	20001a72 <ui_cmd_joystick+0x52>
    		printf("LEFT \r");
20001a6c:	4812      	ldr	r0, [pc, #72]	@ (20001ab8 <ui_cmd_joystick+0x98>)
20001a6e:	f7ff f987 	bl	20000d80 <printf>
    	}
    	if((READ_I2C_IO2(0x10) & 8) == 0){
20001a72:	2010      	movs	r0, #16
20001a74:	f7ff ff06 	bl	20001884 <READ_I2C_IO2>
20001a78:	4603      	mov	r3, r0
20001a7a:	f003 0308 	and.w	r3, r3, #8
20001a7e:	2b00      	cmp	r3, #0
20001a80:	d102      	bne.n	20001a88 <ui_cmd_joystick+0x68>
    		printf("RIGHT \r");
20001a82:	480e      	ldr	r0, [pc, #56]	@ (20001abc <ui_cmd_joystick+0x9c>)
20001a84:	f7ff f97c 	bl	20000d80 <printf>
    	}
    	if((READ_I2C_IO2(0x10) & 16) == 0){
20001a88:	2010      	movs	r0, #16
20001a8a:	f7ff fefb 	bl	20001884 <READ_I2C_IO2>
20001a8e:	4603      	mov	r3, r0
20001a90:	f003 0310 	and.w	r3, r3, #16
20001a94:	2b00      	cmp	r3, #0
20001a96:	d1ca      	bne.n	20001a2e <ui_cmd_joystick+0xe>
    		printf("UP      \r");
20001a98:	4809      	ldr	r0, [pc, #36]	@ (20001ac0 <ui_cmd_joystick+0xa0>)
20001a9a:	f7ff f971 	bl	20000d80 <printf>
    	if((READ_I2C_IO2(0x10) & 1) == 0){
20001a9e:	e7c6      	b.n	20001a2e <ui_cmd_joystick+0xe>
    	}

    }
    printf("joystick end");
20001aa0:	4808      	ldr	r0, [pc, #32]	@ (20001ac4 <ui_cmd_joystick+0xa4>)
20001aa2:	f7ff f96d 	bl	20000d80 <printf>

    return 0;
20001aa6:	2300      	movs	r3, #0
}
20001aa8:	4618      	mov	r0, r3
20001aaa:	3708      	adds	r7, #8
20001aac:	46bd      	mov	sp, r7
20001aae:	bd80      	pop	{r7, pc}
20001ab0:	20002190 	.word	0x20002190
20001ab4:	20002198 	.word	0x20002198
20001ab8:	200021a4 	.word	0x200021a4
20001abc:	200021ac 	.word	0x200021ac
20001ac0:	200021b4 	.word	0x200021b4
20001ac4:	200021c0 	.word	0x200021c0

20001ac8 <uart_handler>:


static int uart_handler(int argc, char *argv[]){
20001ac8:	b580      	push	{r7, lr}
20001aca:	b082      	sub	sp, #8
20001acc:	af00      	add	r7, sp, #0
20001ace:	6078      	str	r0, [r7, #4]
20001ad0:	6039      	str	r1, [r7, #0]

	*(volatile uint32_t *)0xE000ED08 = 0x20000000;
20001ad2:	4b08      	ldr	r3, [pc, #32]	@ (20001af4 <uart_handler+0x2c>)
20001ad4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
20001ad8:	601a      	str	r2, [r3, #0]

	*(volatile uint32_t *)0xE000E104 = 0x20;
20001ada:	4b07      	ldr	r3, [pc, #28]	@ (20001af8 <uart_handler+0x30>)
20001adc:	2220      	movs	r2, #32
20001ade:	601a      	str	r2, [r3, #0]
//	(*(volatile uint32_t *)0x40021058)|= (1 << 17); //RCC->APB1ENR1

	//(*(volatile uint32_t *)0x4000440C) = 0xD0;
	(*(volatile uint32_t *)0x40013800) |= 0x2D; //10 1101
20001ae0:	4b06      	ldr	r3, [pc, #24]	@ (20001afc <uart_handler+0x34>)
20001ae2:	681b      	ldr	r3, [r3, #0]
20001ae4:	4a05      	ldr	r2, [pc, #20]	@ (20001afc <uart_handler+0x34>)
20001ae6:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
20001aea:	6013      	str	r3, [r2, #0]
//	(*(volatile uint32_t *)0x40004400) |= 0x2D;


	//(*(volatile uint32_t *)0xE000E104) = 0x7;
	while(1){
		printf("hello\n");
20001aec:	4804      	ldr	r0, [pc, #16]	@ (20001b00 <uart_handler+0x38>)
20001aee:	f7ff f947 	bl	20000d80 <printf>
20001af2:	e7fb      	b.n	20001aec <uart_handler+0x24>
20001af4:	e000ed08 	.word	0xe000ed08
20001af8:	e000e104 	.word	0xe000e104
20001afc:	40013800 	.word	0x40013800
20001b00:	200021d0 	.word	0x200021d0

20001b04 <mytest_1>:

	return 0;

}

void mytest_1(){
20001b04:	b580      	push	{r7, lr}
20001b06:	b082      	sub	sp, #8
20001b08:	af00      	add	r7, sp, #0
	printf("hello");
20001b0a:	4807      	ldr	r0, [pc, #28]	@ (20001b28 <mytest_1+0x24>)
20001b0c:	f7ff f938 	bl	20000d80 <printf>
    // Clear the USART interrupt flag
    //volatile uint32_t *USART1_ICR = (volatile uint32_t *)(0x40013800 + 0x1C);

    // Clear the RXNE interrupt flag
    //volatile uint32_t *USART1_ISR = (volatile uint32_t *)(0x40013800 + 0x1C); // USART_ISR register
    volatile uint32_t USART1_ICR = *(volatile uint32_t *)(0x40013800 + 0x24); // USART_ICR register
20001b10:	4b06      	ldr	r3, [pc, #24]	@ (20001b2c <mytest_1+0x28>)
20001b12:	681b      	ldr	r3, [r3, #0]
20001b14:	607b      	str	r3, [r7, #4]

    //printf("%c", USART1_ISR );
    printf("%c", USART1_ICR );
20001b16:	687b      	ldr	r3, [r7, #4]
20001b18:	4619      	mov	r1, r3
20001b1a:	4805      	ldr	r0, [pc, #20]	@ (20001b30 <mytest_1+0x2c>)
20001b1c:	f7ff f930 	bl	20000d80 <printf>
	volatile uint32_t *LPUART_ISR = (uint32_t *)(0x40013800 + 0x1C);
	printf("%c", LPUART_ISR);
	*LPUART_ISR = 0xFFFFFFFF;

	*/
}
20001b20:	bf00      	nop
20001b22:	3708      	adds	r7, #8
20001b24:	46bd      	mov	sp, r7
20001b26:	bd80      	pop	{r7, pc}
20001b28:	200021d8 	.word	0x200021d8
20001b2c:	40013824 	.word	0x40013824
20001b30:	200021e0 	.word	0x200021e0

20001b34 <ui_clock_measure>:


static int ui_clock_measure(int argc, char *argv[]){
20001b34:	b480      	push	{r7}
20001b36:	b085      	sub	sp, #20
20001b38:	af00      	add	r7, sp, #0
20001b3a:	6078      	str	r0, [r7, #4]
20001b3c:	6039      	str	r1, [r7, #0]

	*(volatile uint32_t *)(0x40007000) = 0x200;
20001b3e:	4b1f      	ldr	r3, [pc, #124]	@ (20001bbc <ui_clock_measure+0x88>)
20001b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
20001b44:	601a      	str	r2, [r3, #0]

    RCC->AHB2ENR |= 1;
20001b46:	4b1e      	ldr	r3, [pc, #120]	@ (20001bc0 <ui_clock_measure+0x8c>)
20001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20001b4a:	4a1d      	ldr	r2, [pc, #116]	@ (20001bc0 <ui_clock_measure+0x8c>)
20001b4c:	f043 0301 	orr.w	r3, r3, #1
20001b50:	64d3      	str	r3, [r2, #76]	@ 0x4c

    RCC->APB1ENR1 |= (1 << 28);
20001b52:	4b1b      	ldr	r3, [pc, #108]	@ (20001bc0 <ui_clock_measure+0x8c>)
20001b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20001b56:	4a1a      	ldr	r2, [pc, #104]	@ (20001bc0 <ui_clock_measure+0x8c>)
20001b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20001b5c:	6593      	str	r3, [r2, #88]	@ 0x58

	volatile uint32_t val;

	val = *(volatile uint32_t *)(0x48000000);
20001b5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20001b62:	681b      	ldr	r3, [r3, #0]
20001b64:	60fb      	str	r3, [r7, #12]
	val &= 0xFFFCFFFF;
20001b66:	68fb      	ldr	r3, [r7, #12]
20001b68:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
20001b6c:	60fb      	str	r3, [r7, #12]
	val |= 0x10000;
20001b6e:	68fb      	ldr	r3, [r7, #12]
20001b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20001b74:	60fb      	str	r3, [r7, #12]
	*(volatile uint32_t *)(0x48000000) = val;
20001b76:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
20001b7a:	68fb      	ldr	r3, [r7, #12]
20001b7c:	6013      	str	r3, [r2, #0]
	//convert to function
	val = *(volatile uint32_t *)(0x4800000C);
20001b7e:	4b11      	ldr	r3, [pc, #68]	@ (20001bc4 <ui_clock_measure+0x90>)
20001b80:	681b      	ldr	r3, [r3, #0]
20001b82:	60fb      	str	r3, [r7, #12]
	val &= 0xFFFCFFFF;
20001b84:	68fb      	ldr	r3, [r7, #12]
20001b86:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
20001b8a:	60fb      	str	r3, [r7, #12]

	*(volatile uint32_t *)(0x4800000C) = val;
20001b8c:	4a0d      	ldr	r2, [pc, #52]	@ (20001bc4 <ui_clock_measure+0x90>)
20001b8e:	68fb      	ldr	r3, [r7, #12]
20001b90:	6013      	str	r3, [r2, #0]

	val = *(volatile uint32_t *)(0x48000014);
20001b92:	4b0d      	ldr	r3, [pc, #52]	@ (20001bc8 <ui_clock_measure+0x94>)
20001b94:	681b      	ldr	r3, [r3, #0]
20001b96:	60fb      	str	r3, [r7, #12]
	val &= 0xFFFCFFFF;
20001b98:	68fb      	ldr	r3, [r7, #12]
20001b9a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
20001b9e:	60fb      	str	r3, [r7, #12]
	val |= 0x10000;
20001ba0:	68fb      	ldr	r3, [r7, #12]
20001ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20001ba6:	60fb      	str	r3, [r7, #12]
	*(volatile uint32_t *)(0x48000014) = val;
20001ba8:	4a07      	ldr	r2, [pc, #28]	@ (20001bc8 <ui_clock_measure+0x94>)
20001baa:	68fb      	ldr	r3, [r7, #12]
20001bac:	6013      	str	r3, [r2, #0]



	return 0;
20001bae:	2300      	movs	r3, #0


}
20001bb0:	4618      	mov	r0, r3
20001bb2:	3714      	adds	r7, #20
20001bb4:	46bd      	mov	sp, r7
20001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
20001bba:	4770      	bx	lr
20001bbc:	40007000 	.word	0x40007000
20001bc0:	40021000 	.word	0x40021000
20001bc4:	4800000c 	.word	0x4800000c
20001bc8:	48000014 	.word	0x48000014

20001bcc <atoi>:
20001bcc:	220a      	movs	r2, #10
20001bce:	2100      	movs	r1, #0
20001bd0:	f000 b87a 	b.w	20001cc8 <strtol>

20001bd4 <_strtol_l.constprop.0>:
20001bd4:	2b24      	cmp	r3, #36	@ 0x24
20001bd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20001bda:	4686      	mov	lr, r0
20001bdc:	4690      	mov	r8, r2
20001bde:	d801      	bhi.n	20001be4 <_strtol_l.constprop.0+0x10>
20001be0:	2b01      	cmp	r3, #1
20001be2:	d106      	bne.n	20001bf2 <_strtol_l.constprop.0+0x1e>
20001be4:	f000 f8f2 	bl	20001dcc <__errno>
20001be8:	2316      	movs	r3, #22
20001bea:	6003      	str	r3, [r0, #0]
20001bec:	2000      	movs	r0, #0
20001bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20001bf2:	4834      	ldr	r0, [pc, #208]	@ (20001cc4 <_strtol_l.constprop.0+0xf0>)
20001bf4:	460d      	mov	r5, r1
20001bf6:	462a      	mov	r2, r5
20001bf8:	f815 4b01 	ldrb.w	r4, [r5], #1
20001bfc:	5d06      	ldrb	r6, [r0, r4]
20001bfe:	f016 0608 	ands.w	r6, r6, #8
20001c02:	d1f8      	bne.n	20001bf6 <_strtol_l.constprop.0+0x22>
20001c04:	2c2d      	cmp	r4, #45	@ 0x2d
20001c06:	d12d      	bne.n	20001c64 <_strtol_l.constprop.0+0x90>
20001c08:	782c      	ldrb	r4, [r5, #0]
20001c0a:	2601      	movs	r6, #1
20001c0c:	1c95      	adds	r5, r2, #2
20001c0e:	f033 0210 	bics.w	r2, r3, #16
20001c12:	d109      	bne.n	20001c28 <_strtol_l.constprop.0+0x54>
20001c14:	2c30      	cmp	r4, #48	@ 0x30
20001c16:	d12a      	bne.n	20001c6e <_strtol_l.constprop.0+0x9a>
20001c18:	782a      	ldrb	r2, [r5, #0]
20001c1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
20001c1e:	2a58      	cmp	r2, #88	@ 0x58
20001c20:	d125      	bne.n	20001c6e <_strtol_l.constprop.0+0x9a>
20001c22:	786c      	ldrb	r4, [r5, #1]
20001c24:	2310      	movs	r3, #16
20001c26:	3502      	adds	r5, #2
20001c28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
20001c2c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
20001c30:	2200      	movs	r2, #0
20001c32:	fbbc f9f3 	udiv	r9, ip, r3
20001c36:	4610      	mov	r0, r2
20001c38:	fb03 ca19 	mls	sl, r3, r9, ip
20001c3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
20001c40:	2f09      	cmp	r7, #9
20001c42:	d81b      	bhi.n	20001c7c <_strtol_l.constprop.0+0xa8>
20001c44:	463c      	mov	r4, r7
20001c46:	42a3      	cmp	r3, r4
20001c48:	dd27      	ble.n	20001c9a <_strtol_l.constprop.0+0xc6>
20001c4a:	1c57      	adds	r7, r2, #1
20001c4c:	d007      	beq.n	20001c5e <_strtol_l.constprop.0+0x8a>
20001c4e:	4581      	cmp	r9, r0
20001c50:	d320      	bcc.n	20001c94 <_strtol_l.constprop.0+0xc0>
20001c52:	d101      	bne.n	20001c58 <_strtol_l.constprop.0+0x84>
20001c54:	45a2      	cmp	sl, r4
20001c56:	db1d      	blt.n	20001c94 <_strtol_l.constprop.0+0xc0>
20001c58:	fb00 4003 	mla	r0, r0, r3, r4
20001c5c:	2201      	movs	r2, #1
20001c5e:	f815 4b01 	ldrb.w	r4, [r5], #1
20001c62:	e7eb      	b.n	20001c3c <_strtol_l.constprop.0+0x68>
20001c64:	2c2b      	cmp	r4, #43	@ 0x2b
20001c66:	bf04      	itt	eq
20001c68:	782c      	ldrbeq	r4, [r5, #0]
20001c6a:	1c95      	addeq	r5, r2, #2
20001c6c:	e7cf      	b.n	20001c0e <_strtol_l.constprop.0+0x3a>
20001c6e:	2b00      	cmp	r3, #0
20001c70:	d1da      	bne.n	20001c28 <_strtol_l.constprop.0+0x54>
20001c72:	2c30      	cmp	r4, #48	@ 0x30
20001c74:	bf0c      	ite	eq
20001c76:	2308      	moveq	r3, #8
20001c78:	230a      	movne	r3, #10
20001c7a:	e7d5      	b.n	20001c28 <_strtol_l.constprop.0+0x54>
20001c7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
20001c80:	2f19      	cmp	r7, #25
20001c82:	d801      	bhi.n	20001c88 <_strtol_l.constprop.0+0xb4>
20001c84:	3c37      	subs	r4, #55	@ 0x37
20001c86:	e7de      	b.n	20001c46 <_strtol_l.constprop.0+0x72>
20001c88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
20001c8c:	2f19      	cmp	r7, #25
20001c8e:	d804      	bhi.n	20001c9a <_strtol_l.constprop.0+0xc6>
20001c90:	3c57      	subs	r4, #87	@ 0x57
20001c92:	e7d8      	b.n	20001c46 <_strtol_l.constprop.0+0x72>
20001c94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
20001c98:	e7e1      	b.n	20001c5e <_strtol_l.constprop.0+0x8a>
20001c9a:	1c53      	adds	r3, r2, #1
20001c9c:	d108      	bne.n	20001cb0 <_strtol_l.constprop.0+0xdc>
20001c9e:	2322      	movs	r3, #34	@ 0x22
20001ca0:	f8ce 3000 	str.w	r3, [lr]
20001ca4:	4660      	mov	r0, ip
20001ca6:	f1b8 0f00 	cmp.w	r8, #0
20001caa:	d0a0      	beq.n	20001bee <_strtol_l.constprop.0+0x1a>
20001cac:	1e69      	subs	r1, r5, #1
20001cae:	e006      	b.n	20001cbe <_strtol_l.constprop.0+0xea>
20001cb0:	b106      	cbz	r6, 20001cb4 <_strtol_l.constprop.0+0xe0>
20001cb2:	4240      	negs	r0, r0
20001cb4:	f1b8 0f00 	cmp.w	r8, #0
20001cb8:	d099      	beq.n	20001bee <_strtol_l.constprop.0+0x1a>
20001cba:	2a00      	cmp	r2, #0
20001cbc:	d1f6      	bne.n	20001cac <_strtol_l.constprop.0+0xd8>
20001cbe:	f8c8 1000 	str.w	r1, [r8]
20001cc2:	e794      	b.n	20001bee <_strtol_l.constprop.0+0x1a>
20001cc4:	2000220a 	.word	0x2000220a

20001cc8 <strtol>:
20001cc8:	4613      	mov	r3, r2
20001cca:	460a      	mov	r2, r1
20001ccc:	4601      	mov	r1, r0
20001cce:	4802      	ldr	r0, [pc, #8]	@ (20001cd8 <strtol+0x10>)
20001cd0:	6800      	ldr	r0, [r0, #0]
20001cd2:	f7ff bf7f 	b.w	20001bd4 <_strtol_l.constprop.0>
20001cd6:	bf00      	nop
20001cd8:	2000231c 	.word	0x2000231c

20001cdc <_strtoul_l.constprop.0>:
20001cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
20001ce0:	4e34      	ldr	r6, [pc, #208]	@ (20001db4 <_strtoul_l.constprop.0+0xd8>)
20001ce2:	4686      	mov	lr, r0
20001ce4:	460d      	mov	r5, r1
20001ce6:	4628      	mov	r0, r5
20001ce8:	f815 4b01 	ldrb.w	r4, [r5], #1
20001cec:	5d37      	ldrb	r7, [r6, r4]
20001cee:	f017 0708 	ands.w	r7, r7, #8
20001cf2:	d1f8      	bne.n	20001ce6 <_strtoul_l.constprop.0+0xa>
20001cf4:	2c2d      	cmp	r4, #45	@ 0x2d
20001cf6:	d12f      	bne.n	20001d58 <_strtoul_l.constprop.0+0x7c>
20001cf8:	782c      	ldrb	r4, [r5, #0]
20001cfa:	2701      	movs	r7, #1
20001cfc:	1c85      	adds	r5, r0, #2
20001cfe:	f033 0010 	bics.w	r0, r3, #16
20001d02:	d109      	bne.n	20001d18 <_strtoul_l.constprop.0+0x3c>
20001d04:	2c30      	cmp	r4, #48	@ 0x30
20001d06:	d12c      	bne.n	20001d62 <_strtoul_l.constprop.0+0x86>
20001d08:	7828      	ldrb	r0, [r5, #0]
20001d0a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
20001d0e:	2858      	cmp	r0, #88	@ 0x58
20001d10:	d127      	bne.n	20001d62 <_strtoul_l.constprop.0+0x86>
20001d12:	786c      	ldrb	r4, [r5, #1]
20001d14:	2310      	movs	r3, #16
20001d16:	3502      	adds	r5, #2
20001d18:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
20001d1c:	2600      	movs	r6, #0
20001d1e:	fbb8 f8f3 	udiv	r8, r8, r3
20001d22:	fb03 f908 	mul.w	r9, r3, r8
20001d26:	ea6f 0909 	mvn.w	r9, r9
20001d2a:	4630      	mov	r0, r6
20001d2c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
20001d30:	f1bc 0f09 	cmp.w	ip, #9
20001d34:	d81c      	bhi.n	20001d70 <_strtoul_l.constprop.0+0x94>
20001d36:	4664      	mov	r4, ip
20001d38:	42a3      	cmp	r3, r4
20001d3a:	dd2a      	ble.n	20001d92 <_strtoul_l.constprop.0+0xb6>
20001d3c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
20001d40:	d007      	beq.n	20001d52 <_strtoul_l.constprop.0+0x76>
20001d42:	4580      	cmp	r8, r0
20001d44:	d322      	bcc.n	20001d8c <_strtoul_l.constprop.0+0xb0>
20001d46:	d101      	bne.n	20001d4c <_strtoul_l.constprop.0+0x70>
20001d48:	45a1      	cmp	r9, r4
20001d4a:	db1f      	blt.n	20001d8c <_strtoul_l.constprop.0+0xb0>
20001d4c:	fb00 4003 	mla	r0, r0, r3, r4
20001d50:	2601      	movs	r6, #1
20001d52:	f815 4b01 	ldrb.w	r4, [r5], #1
20001d56:	e7e9      	b.n	20001d2c <_strtoul_l.constprop.0+0x50>
20001d58:	2c2b      	cmp	r4, #43	@ 0x2b
20001d5a:	bf04      	itt	eq
20001d5c:	782c      	ldrbeq	r4, [r5, #0]
20001d5e:	1c85      	addeq	r5, r0, #2
20001d60:	e7cd      	b.n	20001cfe <_strtoul_l.constprop.0+0x22>
20001d62:	2b00      	cmp	r3, #0
20001d64:	d1d8      	bne.n	20001d18 <_strtoul_l.constprop.0+0x3c>
20001d66:	2c30      	cmp	r4, #48	@ 0x30
20001d68:	bf0c      	ite	eq
20001d6a:	2308      	moveq	r3, #8
20001d6c:	230a      	movne	r3, #10
20001d6e:	e7d3      	b.n	20001d18 <_strtoul_l.constprop.0+0x3c>
20001d70:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
20001d74:	f1bc 0f19 	cmp.w	ip, #25
20001d78:	d801      	bhi.n	20001d7e <_strtoul_l.constprop.0+0xa2>
20001d7a:	3c37      	subs	r4, #55	@ 0x37
20001d7c:	e7dc      	b.n	20001d38 <_strtoul_l.constprop.0+0x5c>
20001d7e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
20001d82:	f1bc 0f19 	cmp.w	ip, #25
20001d86:	d804      	bhi.n	20001d92 <_strtoul_l.constprop.0+0xb6>
20001d88:	3c57      	subs	r4, #87	@ 0x57
20001d8a:	e7d5      	b.n	20001d38 <_strtoul_l.constprop.0+0x5c>
20001d8c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
20001d90:	e7df      	b.n	20001d52 <_strtoul_l.constprop.0+0x76>
20001d92:	1c73      	adds	r3, r6, #1
20001d94:	d106      	bne.n	20001da4 <_strtoul_l.constprop.0+0xc8>
20001d96:	2322      	movs	r3, #34	@ 0x22
20001d98:	f8ce 3000 	str.w	r3, [lr]
20001d9c:	4630      	mov	r0, r6
20001d9e:	b932      	cbnz	r2, 20001dae <_strtoul_l.constprop.0+0xd2>
20001da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
20001da4:	b107      	cbz	r7, 20001da8 <_strtoul_l.constprop.0+0xcc>
20001da6:	4240      	negs	r0, r0
20001da8:	2a00      	cmp	r2, #0
20001daa:	d0f9      	beq.n	20001da0 <_strtoul_l.constprop.0+0xc4>
20001dac:	b106      	cbz	r6, 20001db0 <_strtoul_l.constprop.0+0xd4>
20001dae:	1e69      	subs	r1, r5, #1
20001db0:	6011      	str	r1, [r2, #0]
20001db2:	e7f5      	b.n	20001da0 <_strtoul_l.constprop.0+0xc4>
20001db4:	2000220a 	.word	0x2000220a

20001db8 <strtoul>:
20001db8:	4613      	mov	r3, r2
20001dba:	460a      	mov	r2, r1
20001dbc:	4601      	mov	r1, r0
20001dbe:	4802      	ldr	r0, [pc, #8]	@ (20001dc8 <strtoul+0x10>)
20001dc0:	6800      	ldr	r0, [r0, #0]
20001dc2:	f7ff bf8b 	b.w	20001cdc <_strtoul_l.constprop.0>
20001dc6:	bf00      	nop
20001dc8:	2000231c 	.word	0x2000231c

20001dcc <__errno>:
20001dcc:	4b01      	ldr	r3, [pc, #4]	@ (20001dd4 <__errno+0x8>)
20001dce:	6818      	ldr	r0, [r3, #0]
20001dd0:	4770      	bx	lr
20001dd2:	bf00      	nop
20001dd4:	2000231c 	.word	0x2000231c

20001dd8 <_init>:
20001dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001dda:	bf00      	nop
20001ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001dde:	bc08      	pop	{r3}
20001de0:	469e      	mov	lr, r3
20001de2:	4770      	bx	lr

20001de4 <_fini>:
20001de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001de6:	bf00      	nop
20001de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001dea:	bc08      	pop	{r3}
20001dec:	469e      	mov	lr, r3
20001dee:	4770      	bx	lr
